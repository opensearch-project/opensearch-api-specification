name: Test Spec

on:
  push:
    paths:
      - .github/workflows/test-spec.yml
      - package*.json
      - spec/**
      - tests/**
      - tools/src/tester/**
      - tsconfig.json
  pull_request:
    paths:
      - .github/workflows/test-spec.yml
      - package*.json
      - spec/**
      - tests/**
      - tools/src/tester/**
      - tsconfig.json

jobs:
  test-opensearch-spec:
    strategy:
      matrix:
        entry:
          - version: 1.3.17
            admin_password: admin
          - version: 2.0.0
            admin_password: admin
          - version: 2.16.0
          - version: 2.16.0
            tests: plugins/index_state_management
          - version: 2.16.0
            tests: plugins/ml
          - version: 2.16.0
            tests: routing
          - version: 2.16.0
            tests: snapshot
          - version: 2.17.0
            hub: opensearchstaging
            ref: '@sha256:1273489ebbedcb470ea13563dae4c6dc6b2ed431e87e686ed931ae0733034b25'
          - version: 3.0.0
            hub: opensearchstaging
            ref: '@sha256:06af2ba4037f8423dc1a4ed3cd29108a1912774e7c659e73f0fac09e1bb2b63d'

    name: test-opensearch-spec (version=${{ matrix.entry.version }}, hub=${{ matrix.entry.hub || 'opensearchproject' }}, tests=${{ matrix.entry.tests || 'default' }})
    runs-on: ubuntu-latest

    env:
      OPENSEARCH_DOCKER_HUB_PROJECT: ${{ matrix.entry.hub || 'opensearchproject' }}
      OPENSEARCH_DOCKER_REF: ${{ matrix.entry.ref }}
      OPENSEARCH_VERSION: ${{ matrix.entry.version }}
      OPENSEARCH_PASSWORD: ${{ matrix.entry.admin_password || 'myStrongPassword123!' }}
      OPENSEARCH_JAVA_OPTS: ${{ matrix.entry.opts }} -Xms8g -Xmx8g

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm ci

      - name: Run OpenSearch Cluster
        working-directory: tests/${{ matrix.entry.tests || 'default' }}
        run: docker compose up -d

      - name: Run Tests
        run: |
          npm run test:spec -- \
            --opensearch-insecure \
            --opensearch-version=${{ matrix.entry.version }} \
            --coverage coverage/test-spec-coverage-${{ matrix.entry.version }}-${{ matrix.entry.tests || 'default' }}.json \
            --tests=tests/${{ matrix.entry.tests || 'default' }}

      - name: Get Container Logs
        if: failure()
        run: |
          for container_id in $(docker ps -aqf "ancestor=opensearchproject/opensearch:${{ matrix.entry.version }}"); do \
            echo Dumping logs from $container_id ... && \
            docker logs $container_id \
          ; done

      - name: Upload Test Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.entry.version }}-${{ hashFiles(format('tests/{0}', matrix.entry.tests || 'default')) }}
          path: coverage/test-spec-coverage-${{ matrix.entry.version }}-${{ matrix.entry.tests || 'default' }}.json

  merge-coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test-opensearch-spec
    steps:
      - uses: actions/checkout@v4

      - name: Download Spec Coverage Data
        uses: actions/download-artifact@v4
        with:
          path: coverage

      - name: Combine Test Coverage Data
        shell: bash -eo pipefail {0}
        run: |
          jq -sc '
            (map(.operations) | add | unique | length) as $total_operations_count |
            (map(.evaluated_operations) | add | unique | length) as $evaluated_operations_count |
            { 
              total_operations_count: $total_operations_count,
              evaluated_operations_count: $evaluated_operations_count,
              evaluated_paths_pct: $evaluated_operations_count | (10000 * . / $total_operations_count | round / 100)
            }
          ' $(find ./coverage -name "test-spec-coverage-*.json") > ./coverage/coverage.json
          cat ./coverage/coverage.json

      - name: Construct Comment Data Payload
        shell: bash -eo pipefail {0}
        run: |
          jq \
            --arg pr_number ${PR_NUMBER} \
            --slurpfile test_coverage ./coverage/coverage.json \
            --null-input '
            {
              "pr_number": ($pr_number),
              "comment_identifier": "## Spec Test Coverage Analysis",
              "template_name": "pr-test-coverage-analysis",
              "template_data": {
                "test_coverage": ($test_coverage[0])
              }
            }
            ' | tee pr-comment.json
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Upload PR Comment Payload
        uses: actions/upload-artifact@v4
        with:
          name: pr-comment
          path: pr-comment.json
