openapi: 3.1.0
info:
  title: Schemas of `_common` Category
  description: Schemas of `_common` category.
  version: 1.0.0
paths: {}
components:
  schemas:
    Type:
      type: string
      description: The type of document or resource.
      x-version-removed: '2.0'
    Id:
      type: string
      description: The unique identifier for a resource.
    AcknowledgedResponseBase:
      type: object
      properties:
        acknowledged:
          description: For a successful response, this value is always true. On failure, an exception is returned instead.
          type: boolean
      required:
        - acknowledged
    DocStatus:
      description: The item level HTTP response status code during indexing.
      type: object
      properties:
        1xx:
          type: integer
          format: int32
          description: The number of informational responses.
        2xx:
          type: integer
          format: int32
          description: The number of successful responses.
        3xx:
          type: integer
          format: int32
          description: The number of redirection responses.
        4xx:
          type: integer
          format: int32
          description: The number of client error responses.
        5xx:
          type: integer
          format: int32
          description: The number of server error responses.
    Duration:
      description: A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
      pattern: ^(?:(-1)|([0-9\.]+)(?:d|h|m|s|ms|micros|nanos))$
      type: string
    Metadata:
      type: object
      description: The custom metadata attached to a resource.
      additionalProperties: true
    GeoBounds:
      description: |-
        A geo-bounding box. It can be represented in the following ways:
         - As 4 top/bottom/left/right coordinates.
         - As 2 top_left/bottom_right points.
         - As 2 top_right/bottom_left points.
         - As a Well Known Text (WKT) bounding box.
      oneOf:
        - title: coords
          description: The bounds specified using coordinate values.
          $ref: '#/components/schemas/CoordsGeoBounds'
        - title: tlbr
          description: The bounds specified using upper-left and lower-right points.
          $ref: '#/components/schemas/TopLeftBottomRightGeoBounds'
        - title: trbl
          description: The bounds specified using upper-right and lower-left points.
          $ref: '#/components/schemas/TopRightBottomLeftGeoBounds'
        - title: wkt
          description: The bounds specified using WKT format.
          $ref: '#/components/schemas/WktGeoBounds'
    CoordsGeoBounds:
      type: object
      description: The geographical bounds specified using coordinate values.
      properties:
        top:
          type: number
          format: double
          description: The top boundary latitude.
        bottom:
          type: number
          format: double
          description: The bottom boundary latitude.
        left:
          type: number
          format: double
          description: The left boundary longitude.
        right:
          type: number
          format: double
          description: The right boundary longitude.
      required:
        - bottom
        - left
        - right
        - top
    TopLeftBottomRightGeoBounds:
      type: object
      description: The geographical bounds specified using upper-left and lower-right points.
      properties:
        top_left:
          $ref: '#/components/schemas/GeoLocation'
          description: The upper-left corner coordinates.
        bottom_right:
          $ref: '#/components/schemas/GeoLocation'
          description: The lower-right corner coordinates.
      required:
        - bottom_right
        - top_left
    GeoLocation:
      description: |-  
        A latitude/longitude as a two-dimensional point. It can be represented in the following ways:
         - As a `{lat, long}` object.
         - As a geohash value.
         - As a `[lon, lat]` array.
         - As a string in `<lat>, <lon>` or WKT point format.
      oneOf:
        - title: latlon
          description: The location specified using latitude and longitude coordinates.
          $ref: '#/components/schemas/LatLonGeoLocation'
        - title: geohash
          description: The location specified using a geohash value.
          $ref: '#/components/schemas/GeoHashLocation'
        - title: coords
          description: The location specified as an array of `[longitude, latitude]`.
          type: array
          items:
            type: number
            format: double
        - title: text
          description: The location specified as a string in `lat,lon` or WKT format.
          type: string
    LatLonGeoLocation:
      type: object
      description: The geographical location specified using latitude and longitude.
      properties:
        lat:
          description: The latitude coordinate.
          type: number
          format: double
        lon:
          description: The longitude coordinate.
          type: number
          format: double
      required:
        - lat
        - lon
    GeoHashLocation:
      type: object
      description: The geographical location specified using a geohash.
      properties:
        geohash:
          $ref: '#/components/schemas/GeoHash'
      required:
        - geohash
    GeoHash:
      type: string
      description: The geohash string representation of a geographical location.
    TopRightBottomLeftGeoBounds:
      type: object
      description: The geographical bounds specified using upper-right and lower-left points.
      properties:
        top_right:
          $ref: '#/components/schemas/GeoLocation'
          description: The upper-right corner coordinates.
        bottom_left:
          $ref: '#/components/schemas/GeoLocation'
          description: The lower-left corner coordinates.
      required:
        - bottom_left
        - top_right
    WktGeoBounds:
      type: object
      description: The geographical bounds specified using Well-Known Text (WKT) format.
      properties:
        wkt:
          type: string
          description: The WKT string representation of the geographical bounds.
      required:
        - wkt
    XyLocation:
      x-version-added: '2.4'
      description: |-
        A two-dimensional Cartesian point specified by x and y coordinates. It can be represented in the following ways:
         - As an `{x, y}` object.
         - As an `[x, y]` array.
         - As a string in `"x, y"` or WKT point format.
      oneOf:
        - title: cartesian
          description: The location specified using x and y coordinates.
          $ref: '#/components/schemas/XyCartesianCoordinates'
        - title: coords
          description: The location specified as an array of [x, y] coordinates.
          type: array
          items:
            type: number
            format: double
        - title: text
          description: The location specified as a string in `x,y` or WKT format.
          type: string
    XyCartesianCoordinates:
      x-version-added: '2.4'
      type: object
      description: The Cartesian coordinates specified using x and y values.
      properties:
        x:
          description: The x coordinate.
          type: number
          format: double
        y:
          description: The y coordinate.
          type: number
          format: double
      required:
        - x
        - y
    EpochTimeUnitMillis:
      $ref: '#/components/schemas/UnitMillis'
    UnitMillis:
      description: The time unit for milliseconds.
      type: integer
      format: int64
    DurationLarge:
      description: |-
        A date histogram interval, similar to `Duration`, with support for additional units: `w` (week), `M` (month), `q` (quarter), and `y` (year).
      type: string
    FieldValue:
      description: A field value.
      type: 
        - boolean
        - 'null'
        - number
        - string
    Void:
      description: |-
        The absence of any type. This is commonly used in APIs that don't return a body.

        Although "void" is generally used for a unit type that has only one value, this is interpreted as
        the bottom type, which has no value. Most languages have a unit type, but few have a bottom type.

        See https://en.m.wikipedia.org/wiki/Unit_type and https://en.m.wikipedia.org/wiki/Bottom_type.
      type: object
    GeoTile:
      description: A map tile reference, represented as `{zoom}/{x}/{y}`.
      type: string
    IndexName:
      type: string
    Field:
      description: The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
      type: string
    SequenceNumber:
      type: integer
      format: int64
      description: The sequence number of the document.
    VersionNumber:
      type: integer
      format: int64
    SortResults:
      type: array
      items:
        $ref: '#/components/schemas/FieldValue'
    GeoLine:
      type: object
      properties:
        type:
          description: Always `"LineString"`
          type: string
        coordinates:
          description: An array of `[lon, lat]` coordinates.
          type: array
          items:
            type: array
            items:
              type: number
              format: double
      required:
        - coordinates
        - type
    ClusterStatistics:
      type: object
      properties:
        skipped:
          type: integer
          format: int32
        successful:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        running:
          type: integer
          format: int32
        partial:
          type: integer
          format: int32
        failed:
          type: integer
          format: int32
        details:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ClusterDetails'
      required:
        - failed
        - partial
        - running
        - skipped
        - successful
        - total
    ClusterDetails:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ClusterSearchStatus'
        indices:
          type: string
        took:
          $ref: '#/components/schemas/DurationValueUnitMillis'
        timed_out:
          type: boolean
        _shards:
          $ref: '#/components/schemas/ShardStatistics'
        failures:
          type: array
          items:
            $ref: '#/components/schemas/ShardFailure'
      required:
        - indices
        - status
        - timed_out
    ClusterSearchStatus:
      type: string
      enum:
        - failed
        - partial
        - running
        - skipped
        - successful
    DurationValueUnitMillis:
      $ref: '#/components/schemas/UnitMillis'
    ShardStatistics:
      type: object
      properties:
        failed:
          $ref: '#/components/schemas/uint'
        successful:
          $ref: '#/components/schemas/uint'
        total:
          $ref: '#/components/schemas/uint'
        failures:
          type: array
          items:
            $ref: '#/components/schemas/ShardFailure'
        skipped:
          $ref: '#/components/schemas/uint'
      required:
        - failed
        - successful
        - total
    uint:
      type: integer
    ShardFailure:
      type: object
      properties:
        index:
          $ref: '#/components/schemas/IndexName'
        node:
          type: string
        reason:
          $ref: '#/components/schemas/ErrorCause'
        shard:
          type: integer
        status:
          type: string
      required:
        - reason
        - shard
    ErrorCause:
      type: object
      properties:
        type:
          description: The type of error.
          type: string
        reason:
          description: A human-readable explanation of the error, in English.
          type: string
        stack_trace:
          description: The server stack trace, present only if the `error_trace=true` parameter was sent with the request.
          type: string
        caused_by:
          $ref: '#/components/schemas/ErrorCause'
        root_cause:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
      required:
        - type
      additionalProperties:
        title: metadata
        description: Any additional information about the error.
    DurationValueUnitNanos:
      $ref: '#/components/schemas/UnitNanos'
    UnitNanos:
      description: Time unit for nanoseconds.
      type: integer
      format: int64
    DurationValueUnitMicros:
      $ref: '#/components/schemas/UnitMicros'
    UnitMicros:
      description: Time unit for microseconds.
      type: integer
      format: int64
    ScrollId:
      type: string
    Routing:
      type: string
      description: The routing value for the document.
    RoutingInQueryString:
      $ref: '#/components/schemas/StringOrStringArray'
    DateTime:
      description: |-
        A date and time, either as a string whose format depends on the context (defaulting to ISO_8601) or the
        number of milliseconds since the epoch. OpenSearch accepts both as an input but will generally output a string.
        representation.
      oneOf:
        - type: string
        - $ref: '#/components/schemas/EpochTimeUnitMillis'
    Indices:
      description: |-
        A comma-separated list of data streams, indexes, and aliases used to limit the request.
        Supports wildcards (`*`).
        To target all data streams and indexes, omit this parameter or use `*` or `_all`.
      oneOf:
        - $ref: '#/components/schemas/IndexName'
        - type: array
          items:
            $ref: '#/components/schemas/IndexName'
    Fields:
      oneOf:
        - $ref: '#/components/schemas/Field'
        - type: array
          items:
            $ref: '#/components/schemas/Field'
    ExpandWildcards:
      description: Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
      oneOf:
        - $ref: '#/components/schemas/ExpandWildcard'
        - type: array
          items:
            $ref: '#/components/schemas/ExpandWildcard'
    ExpandWildcard:
      oneOf:
        - type: string
          const: all
          description: Match any index, including hidden ones.
        - type: string
          const: closed
          description: Match closed, non-hidden indexes.
        - type: string
          const: hidden
          description: Match hidden indexes. Must be combined with open, closed, or both.
        - type: string
          const: none
          description: Wildcard expressions are not accepted.
        - type: string
          const: open
          description: Match open, non-hidden indexes.
    VersionString:
      type: string
    SearchType:
      oneOf:
        - type: string
          const: dfs_query_then_fetch
          description: Documents are scored using global term and document frequencies across all shards. This is usually slower but more accurate.
        - type: string
          const: query_then_fetch
          description: Documents are scored using local term and document frequencies for the shard. This is usually faster but less accurate.
    SuggestMode:
      type: string
      enum:
        - always
        - missing
        - popular
    MinimumShouldMatch:
      description: The minimum number of terms that should match as an integer, percentage, or range.
      oneOf:
        - type: integer
          format: int32
        - type: string
    Distance:
      type: string
    DateMath:
      type: string
    Script:
      oneOf:
        - title: inline
          $ref: '#/components/schemas/InlineScript'
        - title: stored
          $ref: '#/components/schemas/StoredScriptId'
    InlineScript:
      oneOf:
        - title: source
          type: string
        - allOf:
            - $ref: '#/components/schemas/ScriptBase'
            - type: object
              properties:
                lang:
                  $ref: '#/components/schemas/ScriptLanguage'
                options:
                  type: object
                  additionalProperties:
                    type: string
                source:
                  description: The script source.
                  type: string
              required:
                - source
    ScriptLanguage:
      anyOf:
        - title: builtin
          $ref: '#/components/schemas/BuiltinScriptLanguage'
        - title: custom
          type: string
    BuiltinScriptLanguage:
      type: string
      enum:
        - expression
        - java
        - mustache
        - painless
    ScriptBase:
      type: object
      properties:
        params:
          description: |-
            Specifies any named parameters that are passed into the script as variables. 
            Use parameters instead of hard-coded values to decrease compilation time. 
          type: object
          additionalProperties: true
    StoredScriptId:
      allOf:
        - $ref: '#/components/schemas/ScriptBase'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Id'
          required:
            - id
    MultiTermQueryRewrite:
      oneOf:
        - type: string
          const: constant_score
          description: The constant score rewrite method assigns the same score to all matching documents.
        - type: string
          const: constant_score_boolean
          description: The constant score Boolean rewrite method creates a Boolean query with a constant score.
        - type: string
          const: scoring_boolean
          description: The scoring Boolean rewrite method creates a Boolean query that scores each term separately.
        - type: string
          pattern: top_terms(_blended_freqs|_boost)?_\d+
          description: The top terms query rewrite method with optional parameters.
    Fuzziness:
      oneOf:
        - type: string
          description: The fuzziness value as `AUTO`, or a string edit distance.
        - type: integer
          description: The fuzziness value as a numeric edit distance.
          format: int32
    GeoDistanceType:
      oneOf:
        - type: string
          const: arc
          description: The arc calculation method uses great circle distance.
        - type: string
          const: plane
          description: The plane calculation method uses faster but less accurate flat-earth distance.
    Name:
      type: string
      description: The name of a resource or configuration element.
    ScriptField:
      type: object
      description: The configuration for a script field.
      properties:
        script:
          $ref: '#/components/schemas/Script'
          description: The script to execute for this field.
        ignore_failure:
          type: boolean
          description: Whether to ignore failures during script execution.
      required:
        - script
    Sort:
      oneOf:
        - $ref: '#/components/schemas/SortOptions'
          description: The single sort option.
        - type: array
          description: The list of sort options.
          items:
            $ref: '#/components/schemas/SortOptions'
    SortOptions:
      oneOf:
        - type: string
          const: _score
          description: Sort by document score.
        - type: string
          const: _doc
          description: Sort by document index order.
        - type: string
          description: Sort by field name.
          not:
            type: string
            enum:
              - _doc
              - _score
        - type: object
          description: Sort by score options.
          properties:
            _score:
              $ref: '#/components/schemas/ScoreSort'
            _doc:
              $ref: '#/components/schemas/ScoreSort'
            _geo_distance:
              $ref: '#/components/schemas/GeoDistanceSort'
            _script:
              $ref: '#/components/schemas/ScriptSort'
          minProperties: 1
          maxProperties: 1
        - type: object
          description: Sort by field options.
          propertyNames:
            allOf:
              - $ref: '#/components/schemas/Field'
              - not:
                  type: string
                  enum:
                    - _doc
                    - _geo_distance
                    - _score
                    - _script
          additionalProperties:
            $ref: '#/components/schemas/FieldSort'
          minProperties: 1
          maxProperties: 1
    FieldSort:
      oneOf:
        - title: order
          description: The sort order direction.
          $ref: '#/components/schemas/SortOrder'
        - type: object
          description: The detailed field sort options.
          properties:
            missing:
              $ref: '#/components/schemas/FieldValue'
              description: The value to use when the field is missing.
            mode:
              $ref: '#/components/schemas/SortMode'
              description: The mode for sorting on array fields.
            nested:
              $ref: '#/components/schemas/NestedSortValue'
              description: The nested path sort options.
            order:
              $ref: '#/components/schemas/SortOrder'
              description: The sort order direction.
            unmapped_type:
              $ref: '_common.mapping.yaml#/components/schemas/FieldType'
              description: The type to use for unmapped fields.
            numeric_type:
              $ref: '#/components/schemas/FieldSortNumericType'
              description: The numeric type to use for sorting.
            format:
              type: string
              description: The format to use for the sort values.
    FieldSortNumericType:
      oneOf:
        - type: string
          const: date
          description: The field contains date values.
        - type: string
          const: date_nanos
          description: The field contains date values with nanosecond precision.
        - type: string
          const: double
          description: The field contains double-precision floating-point values.
        - type: string
          const: long
          description: The field contains long integer values.
    ScoreSort:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/SortOrder'
    SortOrder:
      type: string
      description: The direction of the sort order.
      enum:
        - asc
        - desc
    GeoDistanceSort:
      type: object
      description: The options for sorting by geo distance.
      properties:
        mode:
          $ref: '#/components/schemas/SortMode'
          description: The mode for sorting on array or multi-valued fields.
        distance_type:
          $ref: '#/components/schemas/GeoDistanceType'
          description: The algorithm to use for distance calculation.
        ignore_unmapped:
          type: boolean
          description: Whether to ignore unmapped fields and not sort based on them.
        order:
          $ref: '#/components/schemas/SortOrder'
          description: The direction of the sort order.
        unit:
          $ref: '#/components/schemas/DistanceUnit'
          description: The unit of distance measurement.
      additionalProperties:
        type: array
        description: The geo points to use for distance calculation.
        items:
          $ref: '#/components/schemas/GeoLocation'
    SortMode:
      oneOf:
        - type: string
          const: avg
          description: Use the average of all values.
        - type: string
          const: max
          description: Use the maximum value.
        - type: string
          const: median
          description: Use the median value.
        - type: string
          const: min
          description: Use the minimum value.
        - type: string
          const: sum
          description: Use the sum of all values.
    DistanceUnit:
      oneOf:
        - title: centimeters
          type: string
          const: cm
        - title: feet
          type: string
          const: ft
        - title: inches
          type: string
          const: in
        - title: kilometers
          type: string
          const: km
        - title: meters
          type: string
          const: m
        - title: miles
          type: string
          const: mi
        - title: millimeters
          type: string
          const: mm
        - title: nautical miles
          type: string
          const: nmi
        - title: yards
          type: string
          const: yd
    ScriptSort:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/SortOrder'
        script:
          $ref: '#/components/schemas/Script'
          description: The script to use for sorting.
        type:
          $ref: '#/components/schemas/ScriptSortType'
          description: The type of the script sort value.
        mode:
          $ref: '#/components/schemas/SortMode'
          description: The mode for sorting on array or multi-valued fields.
        nested:
          $ref: '#/components/schemas/NestedSortValue'
          description: The nested path and filter for nested sorting.
      required:
        - script
    ScriptSortType:
      oneOf:
        - type: string
          const: number
          description: The script returns a numeric value.
        - type: string
          const: string
          description: The script returns a string value.
        - type: string
          const: version
          description: The script returns a version value.
    NestedSortValue:
      type: object
      properties:
        filter:
          $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
          description: The filter to apply to nested objects.
        max_children:
          type: integer
          format: int32
          description: The maximum number of children to consider for sorting.
        nested:
          $ref: '#/components/schemas/NestedSortValue'
          description: How to sort hierarchical nested objects.
        path:
          $ref: '#/components/schemas/Field'
          description: The path to the nested objects.
      required:
        - path
    RelationName:
      type: string
      description: The name of a relation in a join field.
    Ids:
      oneOf:
        - $ref: '#/components/schemas/Id'
          description: A single document ID.
        - type: array
          items:
            $ref: '#/components/schemas/Id'
            description: An array of document IDs.
    VersionType:
      oneOf:
        - type: string
          const: external
          description: The version number must be higher than the current version.
        - type: string
          const: external_gte
          description: The version number must be higher than or equal to the current version.
        - type: string
          const: force
          description: The version number is forced to be the given value.
        - type: string
          const: internal
          description: The version number is managed internally by OpenSearch.
    TimeZone:
      type: string
      description: The time zone identifier.
    DateFormat:
      type: string
      description: The date format pattern.
    GeoHashPrecision:
      description: The level of geohash precision, which can be expressed as a geohash length between 1 and 12 or as a distance measure, such as "1km" or "10m".
      oneOf:
        - title: geohash_length
          type: integer
          format: int32
          description: The geohash precision as a geohash length.
        - title: distance
          type: string
          description: The geohash precision as a distance measure.
    GeoTilePrecision:
      type: number
      description: The precision level for geo tile calculations.
    EmptyObject:
      type: object
      description: An empty object with no properties.
    SlicedScroll:
      type: object
      description: The configuration for a sliced scroll request.
      properties:
        field:
          $ref: '#/components/schemas/Field'
          description: The field to slice on.
        id:
          type: integer
          format: int32
          description: The ID of the slice.
        max:
          type: integer
          format: int32
          description: The maximum number of slices.
      required:
        - id
        - max
    NodeName:
      type: string
      description: The name of the node.
    Refresh:
      oneOf:
        - type: boolean
          description: Whether to refresh the affected shards immediately.
        - type: string
          const: 'false'
          description: Do not refresh the affected shards.
        - type: string
          const: 'true'
          description: Refresh the affected shards immediately.
        - type: string
          const: wait_for
          description: Wait for the changes to become visible before replying.
    WaitForActiveShards:
      description: Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
      oneOf:
        - title: count
          type: integer
          description: The number of active shards to wait for.
        - title: option
          $ref: '#/components/schemas/WaitForActiveShardOptions'
          description: Determines how many shards to wait for.
    WaitForActiveShardOptions:
      oneOf:
        - type: string
          const: all
          description: Wait for all shards to be active.
        - type: string
          const: index-setting
          description: Wait for the number of shards specified in the index settings.
    InlineGetDictUserDefined:
      type: object
      description: The inline get operation results for user-defined dictionaries.
      properties:
        fields:
          type: object
          description: The fields retrieved from the document.
          additionalProperties:
            type: object
        found:
          type: boolean
          description: Whether the document was found.
        _seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        _primary_term:
          type: integer
          format: int32
          description: The primary term of the document.
        _routing:
          $ref: '#/components/schemas/Routing'
        _source:
          type: object
          description: The source of the document.
          additionalProperties: true
      required:
        - found
    Names:
      description: A comma-separated list of aliases to retrieve. Supports wildcards (`*`).  To retrieve all aliases, omit this parameter or use `*` or `_all`.
      oneOf:
        - $ref: '#/components/schemas/Name'
        - type: array
          items:
            $ref: '#/components/schemas/Name'
    NodeIds:
      description: A comma-separated list of node IDs used to filter results. Supports [node filters](https://opensearch.org/docs/latest/api-reference/nodes-apis/index/#node-filters).
      oneOf:
        - $ref: '#/components/schemas/NodeId'
        - type: array
          items:
            $ref: '#/components/schemas/NodeId'
    NodeId:
      type: string
      description: The unique identifier of a node.
    HumanReadableByteCount:
      type: string
      pattern: '(?:(-1)|(0)|\d+(\.\d+)?(b|kb|k|mb|m|gb|g|tb|t|pb|p))'
      description: The unique identifier of a node.
    ByteUnit:
      # eslint-disable yml/sort-sequence-values -- The order of `kb` & `k` etc. is important for preferring the more correct variant.
      oneOf:
        - title: bytes
          type: string
          const: b
        - title: kilo_bytes
          type: string
          enum:
            - kb
            - k
        - title: mega_bytes
          type: string
          enum:
            - mb
            - m
        - title: giga_bytes
          type: string
          enum:
            - gb
            - g
        - title: tera_bytes
          type: string
          enum:
            - tb
            - t
        - title: peta_bytes
          type: string
          enum:
            - pb
            - p
      # eslint-enable yml/sort-sequence-values
    ByteCount:
      type: integer
      format: int64
      description: The size in bytes.
    PercentageNumber:
      type: number
      format: double
      description: The percentage value as a number.     
    PercentageString:
      type: string
      pattern: '\d+(\.\d+)?'
      description: The percentage value as a string.
    Host:
      type: string
      description: The hostname or IP address.
    Ip:
      type: string
      description: The IP address.
    StringifiedEpochTimeUnitSeconds:
      description: |-
        Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
        this behavior while keeping the semantics of the field type.

        Depending on the target language, code generators can keep the union or remove it and leniently parse
        strings to the target type.
      oneOf:
        - $ref: '#/components/schemas/EpochTimeUnitSeconds'
        - type: string
    EpochTimeUnitSeconds:
      $ref: '#/components/schemas/UnitSeconds'
    UnitSeconds:
      description: Time unit for seconds.
      type: integer
      format: int64
    TimeOfDay:
      description: Time of day, expressed as HH:MM:SS.
      type: string
    TimeUnit:
      description: Specifies the time units, for example, `5d` or `7h`. For more information, see [Supported units](https://opensearch.org/docs/latest/api-reference/units/).
      oneOf:
        - title: nanoseconds
          type: string
          const: nanos
        - title: microseconds
          type: string
          const: micros
        - title: milliseconds
          type: string
          const: ms
        - title: seconds
          type: string
          const: s
        - title: minutes
          type: string
          const: m
        - title: hours
          type: string
          const: h
        - title: days
          type: string
          const: d
    HealthStatus:
      # eslint-disable yml/sort-sequence-values
      oneOf:
        - description: All shards are assigned.
          type: string
          enum:
            - green
            - GREEN
        - description: |
            All primary shards are assigned, but one or more replica shards are
            unassigned. If a node in the cluster fails, some data could be unavailable
            until that node is repaired.
          type: string
          enum:
            - yellow
            - YELLOW
        - description: |
            One or more primary shards are unassigned, so some data is unavailable. This
            can occur briefly during cluster startup as primary shards are assigned.
          type: string
          enum:
            - red
            - RED
        # eslint-enable yml/sort-sequence-values
    Uuid:
      type: string
      description: The universally unique identifier.
    ScrollIds:
      oneOf:
        - $ref: '#/components/schemas/ScrollId'
          description: A single scroll identifier.
        - type: array
          description: A list of scroll identifiers.
          items:
            $ref: '#/components/schemas/ScrollId'
    TransportAddress:
      type: string
      description: The transport address of a node.
    StringOrStringArray:
      oneOf:
        - type: string
        - type: array
          items:
            type: string
    StringifiedInteger:
      description: |-
        Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
        this behavior while keeping the semantics of the field type.

        Depending on the target language, code generators can keep the union or remove it and leniently parse
        strings to the target type.
      oneOf:
        - type: integer
        - type: string
    StringifiedLong:
      oneOf:
        - type: integer
          format: int64
        - type: string
    StringifiedDouble:
      oneOf:
        - type: number
          format: double
        - type: string
    StringifiedBoolean:
      description: |-
        Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
        this behavior while keeping the semantics of the field type.

        Depending on the target language, code generators can keep the union or remove it and leniently parse
        strings to the target type.
      oneOf:
        - type: boolean
        - type: string
    PipelineName:
      type: string
    StringifiedEpochTimeUnitMillis:
      description: |-
        Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
        this behavior while keeping the semantics of the field type.

        Depending on the target language, code generators can keep the union or remove it and leniently parse
        strings to the target type.
      oneOf:
        - $ref: '#/components/schemas/EpochTimeUnitMillis'
        - type: string
    DFIIndependenceMeasure:
      oneOf:
        - type: string
          const: chisquared
          description: The chi-squared measure of independence.
        - type: string
          const: saturated
          description: The saturated measure of independence.
        - type: string
          const: standardized
          description: The standardized measure of independence.
    DFRAfterEffect:
      oneOf:
        - type: string
          const: b
          description: The basic after effect.
        - type: string
          const: l
          description: The Laplace after effect.
        - type: string
          const: no
          description: No after effect.
    DFRBasicModel:
      oneOf:
        - type: string
          const: be
          description: The Bose-Einstein model.
        - type: string
          const: d
          description: The divergence from independence model.
        - type: string
          const: g
          description: The geometric model.
        - type: string
          const: if
          description: The inverse frequency model.
        - type: string
          const: in
          description: The inverse document frequency model.
        - type: string
          const: ine
          description: The inverse expected document frequency model.
        - type: string
          const: p
          description: The Poisson model.
    TermFrequencyNormalization:
      oneOf:
        - type: string
          const: h1
          description: The first normalization of Hazm.
        - type: string
          const: h2
          description: The second normalization of Hazm.
        - type: string
          const: h3
          description: The third normalization of Hazm.
        - type: string
          const: no
          description: No normalization.
        - type: string
          const: z
          description: The Zipfian normalization.
    IBDistribution:
      oneOf:
        - type: string
          const: ll
          description: The log-logistic distribution.
        - type: string
          const: spl
          description: The smoothed power-law distribution.
    IBLambda:
      oneOf:
        - type: string
          const: df
          description: The document frequency Lambda.
        - type: string
          const: ttf
          description: The total term frequency Lambda.
    byte:
      type: number
      description: The byte value.
    short:
      type: number
      description: The short integer value.
    ulong:
      type: number
      description: The unsigned long integer value.
    Level:
      description: Specifies the level of detail of the returned information.
      type: string
      enum:
        - cluster
        - indices
        - shards
    WaitForEvents:
      description: Waits until all currently queued events with the given priority are processed. 
      oneOf:
        - type: string
          const: immediate
          description: Highest priority, processed as soon as possible.
        - type: string
          const: urgent
          description: Very high priority, processed after immediate events.
        - type: string
          const: high
          description: High priority, processed after urgent events.
        - type: string
          const: normal
          description: Default priority, processed after high priority events.
        - type: string
          const: low
          description: Low priority, processed after normal events.
        - type: string
          const: languid
          description: Lowest priority, processed after all other events.
    DataStreamName:
      type: string
    CompletionStats:
      type: object
      properties:
        size_in_bytes:
          description: The total amount, in bytes, of memory used for completion across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        size:
          description: The human-readable size of memory used for completion.
          $ref: '#/components/schemas/HumanReadableByteCount'
        fields:
          type: object
          description: The per-field completion statistics.
          additionalProperties:
            $ref: '#/components/schemas/FieldSizeUsage'
      required:
        - size_in_bytes
    FieldSizeUsage:
      type: object
      description: The memory usage statistics for a field.
      properties:
        size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The human-readable size of memory used.
        size_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The size of memory used in bytes.
      required:
        - size_in_bytes
    DocStats:
      type: object
      description: The document-level statistics.
      properties:
        count:
          description: |-
            The total number of non-deleted documents across all primary shards assigned to the selected nodes.
            This number is based on documents in Lucene segments and may include documents from nested fields.
          type: integer
          format: int64
        deleted:
          description: |-
            The total number of deleted documents across all primary shards assigned to the selected nodes.
            This number is based on the number of documents stored in Lucene segments.
            OpenSearch reclaims the disk space previously occupied by the deleted Lucene documents when a segment is merged.
          type: integer
          format: int64
      required:
        - count
    FielddataStats:
      description: The statistics about field data memory usage.
      type: object
      properties:
        evictions:
          type: integer
          format: int64
          description: The number of times field data was evicted from memory.
        memory_size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The human-readable amount of memory used for field data.
        memory_size_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The amount of memory used for field data in bytes.
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldMemoryUsage'
            description: The per-field field data statistics.
      required:
        - memory_size_in_bytes
    FieldMemoryUsage:
      type: object
      description: The memory usage statistics for a field.
      properties:
        memory_size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The human-readable amount of memory used.
        memory_size_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The amount of memory used in bytes.
      required:
        - memory_size_in_bytes
    QueryCacheStats:
      type: object
      description: The statistics about query cache usage.
      properties:
        cache_count:
          description: |-
            The total number of entries added to the query cache across all shards assigned to the selected nodes.
            This number includes all current and evicted entries.
          type: integer
          format: int64
        cache_size:
          description: The total number of entries currently stored in the query cache across all shards assigned to the selected nodes.
          type: integer
          format: int64
        evictions:
          description: The total number of query cache evictions across all shards assigned to the selected nodes.
          type: integer
          format: int64
        hit_count:
          description: The total number of query cache hits across all shards assigned to the selected nodes.
          type: integer
          format: int64
        memory_size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The human-readable amount of memory used for the query cache.
        memory_size_in_bytes:
          description: The total amount, in bytes, of memory used for the query cache across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        miss_count:
          description: The total number of query cache misses across all shards assigned to the selected nodes.
          type: integer
          format: int64
        total_count:
          description: The total number of hits and misses stored in the query cache across all shards assigned to the selected nodes.
          type: integer
          format: int64
      required:
        - cache_count
        - cache_size
        - evictions
        - hit_count
        - memory_size_in_bytes
        - miss_count
        - total_count
    RemoteStoreStats:
      type: object
      description: The statistics related to remote segment store operations.
      properties:
        upload:
          $ref: '#/components/schemas/RemoteStoreUploadStats'     
        download:
          $ref: '#/components/schemas/RemoteStoreDownloadStats'
      required:
        - download
        - upload
    RemoteStoreTranslogStats:
      type: object
      description: The statistics related to remote translog operations.
      properties:
        upload:
          $ref: '#/components/schemas/RemoteStoreTranslogUploadStats'
      required:
        - upload
    RemoteStoreTranslogUploadStats:
      type: object
      description: The statistics related to uploads to the remote translog store.
      properties:
        total_uploads:
          $ref: '#/components/schemas/RemoteStoreTranslogUploadTotalUploadsStats'
        total_upload_size:
          $ref: '#/components/schemas/RemoteStoreTranslogUploadTotalUploadSizeStats'
      required:
        - total_upload_size
        - total_uploads
    RemoteStoreTranslogUploadTotalUploadsStats:
      type: object
      description: The number of syncs to the remote translog store.
      properties:
        failed:
          description: The number of failed upload syncs to the remote translog store.
          type: integer
          format: int64
        started:
          description: The number of upload syncs to the remote translog store that have started.
          type: integer
          format: int64
        succeeded:
          description: The number of successful upload syncs to the remote translog store.
          type: integer
          format: int64
      required:
        - failed
        - started
        - succeeded
    RemoteStoreTranslogUploadTotalUploadSizeStats:
      type: object
      description: The total amount of data uploaded to the remote translog store. 
      properties:
        failed:
          description: The number of bytes that failed to upload to the remote translog store.
          $ref: '#/components/schemas/HumanReadableByteCount'
        failed_bytes:
          description: The number of bytes that failed to upload to the remote translog store.
          $ref: '#/components/schemas/ByteCount'
        started:
          description: The number of bytes successfully uploaded to the remote translog store.
          $ref: '#/components/schemas/HumanReadableByteCount'
        started_bytes:
          description: The number of bytes successfully uploaded to the remote translog store.
          $ref: '#/components/schemas/ByteCount'
        succeeded:
          description: The number of bytes successfully uploaded to the remote translog store.
          $ref: '#/components/schemas/HumanReadableByteCount'
        succeeded_bytes:
          description: The number of bytes successfully uploaded to the remote translog store.
          $ref: '#/components/schemas/ByteCount'
      required:
        - failed_bytes
        - started_bytes
        - succeeded_bytes
    RemoteStoreUploadStats:
      type: object
      description: Any statistics related to uploads to the remote segment store.
      properties:
        max_refresh_time_lag:
          description: The maximum duration that the remote refresh is behind the local refresh.
          $ref: '#/components/schemas/Duration'
        max_refresh_time_lag_in_millis:
          description: The maximum duration, in milliseconds, that the remote refresh is behind the local refresh.
          $ref: '#/components/schemas/DurationValueUnitMillis'
        pressure:
          $ref: '#/components/schemas/RemoteStoreUploadPressureStats'
        refresh_size_lag:
          $ref: '#/components/schemas/RemoteStoreUploadRefreshSizeLagStats'
        total_time_spent:
          description: The total amount of time spent on uploads to the remote segment store.
          $ref: '#/components/schemas/Duration'
        total_time_spent_in_millis:
          description: The total amount of time, in milliseconds, spent on uploads to the remote segment store.
          $ref: '#/components/schemas/DurationValueUnitMillis'
        total_upload_size:
          $ref: '#/components/schemas/RemoteStoreUploadDownloadStats'
      required:
        - max_refresh_time_lag_in_millis
        - refresh_size_lag
        - total_time_spent_in_millis
        - total_upload_size
    RemoteStoreUploadDownloadStats:
      type: object
      description: The amount of data, in bytes, uploaded or downloaded to/from the remote segment store.
      properties:
        failed:
          description: The number of bytes that failed to upload to/from the remote segment store.
          $ref: '#/components/schemas/HumanReadableByteCount'
        failed_bytes:
          description: The number of bytes that failed to upload to/from the remote segment store.
          $ref: '#/components/schemas/ByteCount'
        started:
          description: The number of bytes to upload/download to/from the remote segment store after the upload/download has started.
          $ref: '#/components/schemas/HumanReadableByteCount'
        started_bytes:
          description: The number of bytes to upload/download to/from the remote segment store after the upload/download has started.
          $ref: '#/components/schemas/ByteCount'
        succeeded:
          description: The number of bytes successfully uploaded/downloaded to/from the remote segment store.
          $ref: '#/components/schemas/HumanReadableByteCount'
        succeeded_bytes:
          description: The number of bytes successfully uploaded/downloaded to/from the remote segment store.
          $ref: '#/components/schemas/ByteCount'
      required:
        - failed_bytes
        - started_bytes
        - succeeded_bytes
    RemoteStoreUploadPressureStats:
      type: object
      description: Statistics related to segment store upload backpressure. 
      properties:
        total_rejections:
          description: The total number of requests rejected due to segment store upload backpressure. 
          type: integer
          format: int64
      required:
        - total_rejections
    RemoteStoreUploadRefreshSizeLagStats:
      type: object
      description: The amount of lag during upload between the remote segment store and the local store.
      properties:
        max:
          description: The maximum amount of lag, in bytes, during the upload refresh between the remote segment store and the local store. 
          $ref: '#/components/schemas/HumanReadableByteCount'
        max_bytes:
          description: The maximum amount of lag, in bytes, during the upload refresh between the remote segment store and the local store. 
          $ref: '#/components/schemas/ByteCount'
        total:
          description: The total number of bytes that lagged during the upload refresh between the remote segment store and the local store. 
          $ref: '#/components/schemas/HumanReadableByteCount'
        total_bytes:
          description: The total number of bytes that lagged during the upload refresh between the remote segment store and the local store. 
          $ref: '#/components/schemas/ByteCount'
      required:
        - max_bytes
        - total_bytes
    RemoteStoreDownloadStats:
      type: object
      description: Any statistics related to downloads to the remote segment store. 
      properties:
        total_download_size:
          description: The total amount of data downloaded from the remote segment store. 
          $ref: '#/components/schemas/RemoteStoreUploadDownloadStats'
        total_time_spent:
          description: The total amount of time spent on downloads from the remote segment store.
          $ref: '#/components/schemas/Duration'
        total_time_spent_in_millis:
          description: The total duration, in milliseconds, spent on downloads from the remote segment store. 
          $ref: '#/components/schemas/DurationValueUnitMillis'
      required:
        - total_download_size
        - total_time_spent_in_millis
    SegmentReplicationStats:
      x-version-added: 2.10.0
      oneOf:
        - x-version-added: 2.10.0
          x-version-removed: 2.12.0
          type: object
          description: The segment replication statistics for versions 2.10.0 to 2.12.0.
          properties:
            max_bytes_behind:
              $ref: '#/components/schemas/HumanReadableByteCount'
              description: The maximum number of bytes the replica is behind the primary.
            max_replication_lag:
              $ref: '#/components/schemas/Duration'
              description: The maximum replication lag between primary and replica shards.
            total_bytes_behind:
              $ref: '#/components/schemas/HumanReadableByteCount'
              description: The total number of bytes all replicas are behind their primaries.
          required:
            - max_bytes_behind
            - max_replication_lag
            - total_bytes_behind
        - x-version-added: 2.12.0
          type: object
          description: The segment replication statistics for version 2.12.0 and later.
          properties:
            max_bytes_behind:
              $ref: '#/components/schemas/ByteCount'
              description: The maximum number of bytes the replica is behind the primary.
            max_replication_lag:
              $ref: '#/components/schemas/DurationValueUnitMillis'
              description: The maximum replication lag between primary and replica shards in milliseconds.
            total_bytes_behind:
              $ref: '#/components/schemas/ByteCount'
              description: The total number of bytes all replicas are behind their primaries.
          required:
            - max_bytes_behind
            - max_replication_lag
            - total_bytes_behind
    SegmentsStats:
      type: object
      description: The statistics about segments.
      properties:
        count:
          description: The total number of segments across all shards assigned to the selected nodes.
          type: integer
          format: int32
        doc_values_memory:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The human-readable amount of memory used for doc values.
        doc_values_memory_in_bytes:
          description: The total amount, in bytes, of memory used for document values across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        file_sizes:
          description: |-
            This object is not populated by the cluster stats API.
            To get information on segment files, use the node stats API.
          type: object
          additionalProperties:
            $ref: 'indices.stats.yaml#/components/schemas/ShardFileSizeInfo'
        fixed_bit_set:
          $ref: '#/components/schemas/HumanReadableByteCount'
        fixed_bit_set_memory_in_bytes:
          description: The total amount of memory, in bytes, used by fixed bit sets across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        index_writer_memory:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The human-readable amount of memory used by index writers.
        index_writer_max_memory_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The maximum amount of memory, in bytes, used by index writers.
        index_writer_memory_in_bytes:
          description: The total amount, in bytes, of memory used by all index writers across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        max_unsafe_auto_id_timestamp:
          description: The Unix timestamp, in milliseconds, of the most recently retried indexing request.
          $ref: '#/components/schemas/EpochTimeUnitMillis'
        memory:
          description: The total amount of memory used for segments across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/HumanReadableByteCount'
        memory_in_bytes:
          description: The total amount, in bytes, of memory used for segments across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        norms_memory:
          description: The total amount of memory used for normalization factors across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/HumanReadableByteCount'
        norms_memory_in_bytes:
          description: The total amount, in bytes, of memory used for normalization factors across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        points_memory:
          description: The total amount of memory used for points across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/HumanReadableByteCount'
        points_memory_in_bytes:
          description: The total amount, in bytes, of memory used for points across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        stored_fields_memory:
          description: The total amount of memory used for stored fields across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/HumanReadableByteCount'
        stored_fields_memory_in_bytes:
          description: The total amount, in bytes, of memory used for stored fields across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        terms_memory:
          description: The total amount of memory used for terms across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/HumanReadableByteCount'
        terms_memory_in_bytes:
          description: The total amount, in bytes, of memory used for terms across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        term_vectors_memory:
          description: The total amount of memory used for term vectors across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/HumanReadableByteCount'
        term_vectors_memory_in_bytes:
          description: The total amount, in bytes, of memory used for term vectors across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        version_map_memory:
          description: The total amount of memory used by all version maps across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/HumanReadableByteCount'
        version_map_memory_in_bytes:
          description: The total amount, in bytes, of memory used by all version maps across all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        remote_store:
          $ref: '#/components/schemas/RemoteStoreStats'
        segment_replication:
          x-version-added: 2.10.0
          $ref: '#/components/schemas/SegmentReplicationStats'
      required:
        - count
        - doc_values_memory_in_bytes
        - file_sizes
        - fixed_bit_set_memory_in_bytes
        - index_writer_memory_in_bytes
        - max_unsafe_auto_id_timestamp
        - memory_in_bytes
        - norms_memory_in_bytes
        - points_memory_in_bytes
        - stored_fields_memory_in_bytes
        - term_vectors_memory_in_bytes
        - terms_memory_in_bytes
        - version_map_memory_in_bytes
    StoreStats:
      type: object
      properties:
        size:
          $ref: '#/components/schemas/HumanReadableByteCount'
        size_in_bytes:
          description: The total size, in bytes, of all shards assigned to the selected nodes.
          $ref: '#/components/schemas/ByteCount'
        reserved:
          $ref: '#/components/schemas/HumanReadableByteCount'
        reserved_in_bytes:
          description: A prediction, in bytes, of how much larger the shard stores will eventually grow due to ongoing peer recoveries, restoring snapshots, and similar activities.
          $ref: '#/components/schemas/ByteCount'
      required:
        - reserved_in_bytes
        - size_in_bytes
    PluginStats:
      type: object
      properties:
        classname:
          type: string
        description:
          type: string
        extended_plugins:
          type: array
          items:
            type: string
        has_native_controller:
          type: boolean
        java_version:
          $ref: '#/components/schemas/VersionString'
        name:
          $ref: '#/components/schemas/Name'
        version:
          $ref: '#/components/schemas/VersionString'
        licensed:
          type: boolean
        custom_foldername:
          type: ['null', string]
        opensearch_version:
          $ref: '#/components/schemas/VersionString'
        optional_extended_plugins:
          type: array
          items:
            type: string
          x-version-added: '2.19'
      required:
        - classname
        - description
        - extended_plugins
        - has_native_controller
        - java_version
        - name
        - opensearch_version
        - version
    NodeStatistics:
      type: object
      description: The statistics about node operations.
      properties:
        failures:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
        total:
          description: The total number of nodes selected by the request. 
          type: integer
        successful:
          description: The number of nodes that responded successfully to the request. 
          type: integer
        failed:
          description: The number of nodes that rejected the request or failed to respond. If this value is not 0, then a reason for the rejection or failure is included in the response. 
          type: integer
      required:
        - failed
        - successful
        - total
    WriteResponseBase:
      type: object
      description: The base response for write operations.
      properties:
        _type:
          $ref: '#/components/schemas/Type'
        _id:
          $ref: '#/components/schemas/Id'
        _index:
          $ref: '#/components/schemas/IndexName'
        _primary_term:
          type: integer
          format: int64
          description: The primary term of the document.
        result:
          $ref: '#/components/schemas/Result'

        _seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        _shards:
          $ref: '#/components/schemas/ShardStatistics'
        _version:
          $ref: '#/components/schemas/VersionNumber'
        forced_refresh:
          type: boolean
      required:
        - _id
        - _index
        - _primary_term
        - _seq_no
        - _shards
        - _version
        - result
    Result:
      oneOf:
        - type: string
          const: created
          description: The document was created.
        - type: string
          const: deleted
          description: The document was deleted.
        - type: string
          const: noop
          description: The update operation didn't change anything.
        - type: string
          const: not_found
          description: The document was not found.
        - type: string
          const: updated
          description: The document was updated.
    Conflicts:
      oneOf:
        - type: string
          const: abort
          description: Abort the operation on version conflicts.
        - type: string
          const: proceed
          description: Proceed with the operation on version conflicts.
    Slices:
      description: The slice configuration used to parallelize a process.
      oneOf:
        - title: count
          type: integer
          format: int32
          description: The number of slices to use.
        - title: calculation
          $ref: '#/components/schemas/SlicesCalculation'
          description: The method to calculate the number of slices.
    SlicesCalculation:
      oneOf:
        - type: string
          const: auto
          description: Automatically determine the number of slices.
    Retries:
      type: object
      description: The retry statistics for bulk and search operations.
      properties:
        bulk:
          type: integer
          format: int64
          description: The number of bulk operation retries.
        search:
          type: integer
          format: int64
          description: The number of search operation retries.
      required:
        - bulk
        - search
    TaskId:
      type: string
      description: The unique identifier of a task.
    TaskFailure:
      type: object
      description: The details of a task failure.
      properties:
        task_id:
          type: integer
          description: The ID of the failed task.
        node_id:
          $ref: '#/components/schemas/NodeId'
        status:
          type: string
          description: The status of the failed task.
        reason:
          $ref: '#/components/schemas/ErrorCause'
      required:
        - node_id
        - reason
        - status
        - task_id
    InlineGet:
      type: object
      description: The result of an inline get operation.
      properties:
        fields:
          type: object
          description: The fields retrieved from the document.
          additionalProperties:
            type: object
        found:
          description: Whether the document was found.
          type: boolean
        _seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        _primary_term:
          type: number
          description: The primary term of the document.
        _routing:
          $ref: '#/components/schemas/Routing'
        _source:
          type: object
          description: The source of the document.
      required:
        - found
    IndexAlias:
      type: string
      description: The name of an index alias.
    ErrorResponseBase:
      description: The base structure for error responses.
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorCause'
        status:
          type: number
          description: The HTTP status code.
      required:
        - error
        - status
    StoredScript:
      type: object
      description: The definition of a stored script.
      properties:
        lang:
          $ref: '#/components/schemas/ScriptLanguage'
        options:
          type: object
          description: The options for the script.
          additionalProperties:
            type: string
        source:
          description: The location of the source code for the script.
          type: string
      required:
        - lang
        - source
    OpType:
      oneOf:
        - type: string
          const: create
          description: Create a new document.
        - type: string
          const: index
          description: Create a new document or replace an existing one.
    ShardsOperationResponseBase:
      description: The base response for operations involving shards.
      type: object
      properties:
        _shards:
          $ref: '#/components/schemas/ShardStatistics'
      required:
        - _shards
    IndicesResponseBase:
      allOf:
        - $ref: '#/components/schemas/AcknowledgedResponseBase'
        - type: object
          description: The base response for index operations.
          properties:
            _shards:
              $ref: '#/components/schemas/ShardStatistics'
    DataStreamNames:
      oneOf:
        - $ref: '#/components/schemas/DataStreamName'
        - type: array
          items:
            $ref: '#/components/schemas/DataStreamName'
    FlushStats:
      type: object
      description: The statistics about flush operations.
      properties:
        periodic:
          type: integer
          format: int64
          description: The number of periodic flush operations.
        total:
          type: integer
          format: int64
          description: The total number of flush operations.
        total_time:
          $ref: '#/components/schemas/Duration'
        total_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
      required:
        - periodic
        - total
        - total_time_in_millis
    GetStats:
      type: object
      description: The statistics about get operations.
      properties:
        total:
          type: integer
          format: int64
          description: The total number of get operations.
        getTime:
          $ref: '#/components/schemas/Duration'
          deprecated: true
          x-version-deprecated: '2.19'
        time:
          $ref: '#/components/schemas/Duration'
          x-version-added: '2.19'
        time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
        exists_total:
          type: integer
          format: int64
          description: The total number of successful get operations.
        exists_time:
          $ref: '#/components/schemas/Duration'
        exists_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
        missing_total:
          type: integer
          format: int64
          description: The total number of failed get operations due to missing documents.
        missing_time:
          $ref: '#/components/schemas/Duration'
        missing_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
        current:
          type: integer
          format: int64
          description: The number of current get operations.
      required:
        - current
        - exists_time_in_millis
        - exists_total
        - missing_time_in_millis
        - missing_total
        - time_in_millis
        - total
    IndexingStats:
      type: object
      description: The statistics about indexing operations.
      properties:
        index_total:
          type: integer
          format: int64
          description: The total number of indexing operations.
        index_time:
          $ref: '#/components/schemas/Duration'
          description: The total amount of time spent on indexing operations.
        index_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total amount of time spent on indexing operations in milliseconds.
        index_current:
          type: integer
          format: int64
          description: The number of current indexing operations.
        index_failed:
          type: integer
          format: int64
          description: The number of failed indexing operations.
        delete_total:
          type: integer
          format: int64
          description: The total number of delete operations.
        delete_time:
          $ref: '#/components/schemas/Duration'
        delete_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
        delete_current:
          type: integer
          format: int64
          description: The number of current delete operations.
        noop_update_total:
          type: integer
          format: int64
          description: The total number of noop update operations.
        is_throttled:
          type: boolean
          description: Whether indexing is currently throttled.
        throttle_time:
          $ref: '#/components/schemas/Duration'
          description: The total amount of time spent throttling indexing operations.
        throttle_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total amount of time spent throttling indexing operations in milliseconds.
        doc_status:
          $ref: '#/components/schemas/DocStatus'
        types:
          x-version-removed: '2.0'
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IndexingStats'
      required:
        - delete_current
        - delete_time_in_millis
        - delete_total
        - index_current
        - index_failed
        - index_time_in_millis
        - index_total
        - is_throttled
        - noop_update_total
        - throttle_time_in_millis
    MergesStats:
      type: object
      description: The statistics about merge operations.
      properties:
        current:
          type: integer
          description: The number of current merge operations.
          format: int64
        current_docs:
          type: integer
          description: The number of documents in current merge operations.
          format: int64
        current_size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The size of current merge operations in a human-readable format.
        current_size_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The size of current merge operations in bytes.
        total:
          type: integer
          format: int64
          description: The total number of merge operations.
        total_auto_throttle:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The total auto-throttle size in a human-readable format.
        total_auto_throttle_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The total auto-throttle size in bytes.
        total_docs:
          type: integer
          format: int64
          description: The total number of documents that have been merged.
        total_size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The total size of merge operations in a human-readable format.
        total_size_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The total size of merge operations in bytes.
        total_stopped_time:
          $ref: '#/components/schemas/Duration'
          description: The total amount of time merge operations have been stopped.
        total_stopped_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total amount of time merge operations have been stopped in milliseconds.
        total_throttled_time:
          $ref: '#/components/schemas/Duration'
          description: The total amount of time merge operations have been throttled.
        total_throttled_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total amount of time merge operations have been throttled in milliseconds.
        total_time:
          $ref: '#/components/schemas/Duration'
          description: The total amount of time spent on merge operations.
        total_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total amount of time spent on merge operations in milliseconds.
        unreferenced_file_cleanups_performed:
          type: integer
          format: int64
          description: The number of unreferenced file cleanups performed.
      required:
        - current
        - current_docs
        - current_size_in_bytes
        - total
        - total_auto_throttle_in_bytes
        - total_docs
        - total_size_in_bytes
        - total_stopped_time_in_millis
        - total_throttled_time_in_millis
        - total_time_in_millis
    RecoveryStats:
      type: object
      description: The statistics about recovery operations.
      properties:
        current_as_source:
          type: integer
          format: int64
          description: The number of ongoing recoveries for which this node is the source.
        current_as_target:
          type: integer
          format: int64
          description: The number of ongoing recoveries for which this node is the target.
        throttle_time:
          $ref: '#/components/schemas/Duration'
          description: The total amount of time recovery operations have been throttled.
        throttle_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total amount of time recovery operations have been throttled in milliseconds.
      required:
        - current_as_source
        - current_as_target
        - throttle_time_in_millis
    RefreshStats:
      type: object
      description: The statistics about refresh operations.
      properties:
        external_total:
          type: integer
          format: int64
          description: The total number of external refresh operations.
        external_total_time:
          $ref: '#/components/schemas/Duration'
          description: The total amount of time spent on external refresh operations.
        external_total_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total amount of time spent on external refresh operations in milliseconds.
        listeners:
          type: integer
          format: int64
          description: The number of refresh listeners.
        total:
          type: integer
          format: int64
          description: The total number of refresh operations.
        total_time:
          $ref: '#/components/schemas/Duration'
          description: The total amount of time spent on refresh operations.
        total_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total amount of time spent on refresh operations in milliseconds.
      required:
        - external_total
        - external_total_time_in_millis
        - listeners
        - total
        - total_time_in_millis
    RequestCacheStats:
      type: object
      description: The statistics about request cache operations.
      properties:
        evictions:
          type: integer
          format: int64
          description: The number of request cache evictions.
        hit_count:
          type: integer
          format: int64
          description: The number of request cache hits.
        memory_size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The size of the request cache in a human-readable format.
        memory_size_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The size of the request cache in bytes.
        miss_count:
          type: integer
          format: int64
          description: The number of request cache misses.
      required:
        - evictions
        - hit_count
        - memory_size_in_bytes
        - miss_count
    SearchStats:
      type: object
      description: The statistics about search operations.
      properties:
        open_contexts:
          description: The number of open search contexts.
          type: integer
          format: int64
        query_current:
          description: The number of currently running shard query operations.
          type: integer
          format: int64
        query_time:
          description: The total amount of time taken to complete all shard query operations. 
          $ref: '#/components/schemas/Duration'
        query_time_in_millis:
          description: The total amount of time taken to complete all shard query operations, in milliseconds. 
          $ref: '#/components/schemas/DurationValueUnitMillis'
        query_total:
          description: The total number of shard query operations.
          type: integer
          format: int64
        concurrent_query_total:
          description: The total number of query operations using concurrent segment search.
          type: integer
          format: int64
        concurrent_query_time:
          $ref: '#/components/schemas/Duration'
        concurrent_query_time_in_millis:
          description: The total amount of time taken by all query operations using concurrent segment search, in milliseconds.
          $ref: '#/components/schemas/DurationValueUnitMillis'
        concurrent_query_current:
          description: The number of currently running query operations using concurrent segment search.
          type: integer
          format: int64
        concurrent_avg_slice_count:
          description: The average slice count of all search requests. This is computed as the total slice count divided by the total number of concurrent search requests.
          type: integer
          format: int64
        fetch_current:
          description: The number of currently running shard fetch operations.
          type: integer
          format: int64
        fetch_time:
          description: The total amount of time taken to complete all shard fetch operations.
          $ref: '#/components/schemas/Duration'
        fetch_time_in_millis:
          description: The total amount of time taken to complete all shard fetch operations, in milliseconds. 
          $ref: '#/components/schemas/DurationValueUnitMillis'
        fetch_total:
          description: The total number of shard fetch operations.
          type: integer
          format: int64
        scroll_current:
          description: The number of shard scroll operations that are currently running.
          type: integer
          format: int64
        scroll_time:
          description: The total amount of time taken to complete all shard scroll operations.
          $ref: '#/components/schemas/Duration'
        scroll_time_in_millis:
          description: The total amount of time taken to complete all shard scroll operations, in milliseconds. 
          $ref: '#/components/schemas/DurationValueUnitMillis'
        scroll_total:
          description: The total number of shard scroll operations.
          type: integer
          format: int64
        point_in_time_total:
          description: The total number of shard Point in Time (PIT) contexts created (completed and active) since the node last restarted.
          type: integer
          format: int64
        point_in_time_time:
          $ref: '#/components/schemas/Duration'
        point_in_time_time_in_millis:
          description: The amount of time that shard PIT contexts have been held open since the node last restarted, in milliseconds. 
          $ref: '#/components/schemas/DurationValueUnitMillis'
        point_in_time_current:
          description: The number of currently open shard PIT contexts.
          type: integer
          format: int64
        suggest_current:
          description: The number of currently running shard suggest operations.
          type: integer
          format: int64
        suggest_time:
          description: The total amount of time take to complete all shard suggest operations.
          $ref: '#/components/schemas/Duration'
        suggest_time_in_millis:
          description: The total amount of time taken to complete all shard suggest operations, in milliseconds. 
          $ref: '#/components/schemas/DurationValueUnitMillis'
        suggest_total:
          description: The total number of shard suggest operations.
          type: integer
          format: int64
        search_idle_reactivate_count_total:
          type: integer
          format: int64
          description: The total number of idle search reactivations.
        request:
          type: object
          description: Statistics related to coordinator search operations for the node. 
          additionalProperties:
            $ref: '#/components/schemas/RequestStats'
        groups:
          type: object
          description: The search statistics grouped by search groups.
          additionalProperties:
            $ref: '#/components/schemas/SearchStats'
      required:
        - fetch_current
        - fetch_time_in_millis
        - fetch_total
        - query_current
        - query_time_in_millis
        - query_total
        - scroll_current
        - scroll_time_in_millis
        - scroll_total
        - suggest_current
        - suggest_time_in_millis
        - suggest_total
    TranslogStats:
      type: object
      description: The statistics about translog operations.
      properties:
        earliest_last_modified_age:
          type: integer
          format: int64
          description: The age of the oldest translog entry.
        operations:
          type: integer
          format: int32
          description: The number of operations in the translog.
        remote_store:
          $ref: '#/components/schemas/RemoteStoreTranslogStats'
        size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The size of the translog in a human-readable format.
        size_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The size of the translog in bytes.
        uncommitted_operations:
          type: integer
          format: int32
          description: The number of uncommitted operations in the translog.
        uncommitted_size:
          $ref: '#/components/schemas/HumanReadableByteCount'
          description: The size of uncommitted operations in a human-readable format.
        uncommitted_size_in_bytes:
          $ref: '#/components/schemas/ByteCount'
          description: The size of uncommitted operations in bytes.
      required:
        - earliest_last_modified_age
        - operations
        - size_in_bytes
        - uncommitted_operations
        - uncommitted_size_in_bytes
    RequestStats:
      type: object
      description: The statistics about request operations.
      properties:
        time:
          $ref: '#/components/schemas/Duration'
          description: The total time spent on request operations.
        time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total time spent on request operations in milliseconds.    
        current:
          type: integer
          format: int64
          description: The number of current request operations.
        total:
          type: integer
          format: int64
          description: The total number of request operations.
    WarmerStats:
      type: object
      description: The statistics about index warmer operations.
      properties:
        current:
          type: integer
          format: int64
          description: The number of current warmer operations.
        total:
          type: integer
          format: int64
          description: The total number of warmer operations.
        total_time:
          $ref: '#/components/schemas/Duration'
          description: The total time spent on warmer operations.
        total_time_in_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: The total time spent on warmer operations in milliseconds.
      required:
        - current
        - total
        - total_time_in_millis
    GeoShapeRelation:
      oneOf:
        - type: string
          const: contains
          description: The shape contains the query shape.
        - type: string
          const: disjoint
          description: The shape has no points in common with the query shape.
        - type: string
          const: intersects
          description: The shape shares any points in common with the query shape.
        - type: string
          const: within
          description: The shape is within the query shape.
    StringifiedVersionNumber:
      description: |-
        Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
        this behavior while keeping the semantics of the field type.

        Depending on the target language, code generators can keep the union or remove it and leniently parse
        strings to the target type.
      oneOf:
        - $ref: '#/components/schemas/VersionNumber'
        - type: string
    ActionStatusOptions:
      oneOf:
        - type: string
          const: failure
          description: The action failed.
        - type: string
          const: simulated
          description: The action was simulated.
        - type: string
          const: success
          description: The action succeeded.
        - type: string
          const: throttled
          description: The action was throttled.
    NodeAttributes:
      type: object
      properties:
        attributes:
          description: A list of node attributes.
          type: object
          additionalProperties:
            type: string
        ephemeral_id:
          $ref: '#/components/schemas/Id'
        id:
          $ref: '#/components/schemas/NodeId'
        name:
          $ref: '#/components/schemas/NodeName'
        transport_address:
          $ref: '#/components/schemas/TransportAddress'
        roles:
          $ref: '#/components/schemas/NodeRoles'
        external_id:
          type: string
          description: The roles of the node.
      required:
        - attributes
        - ephemeral_id
        - name
        - transport_address
    NodeRoles:
      description: The role assigned to the node.
      type: array
      items:
        $ref: '#/components/schemas/NodeRole'
    NodeRole:
      oneOf:
        - type: string
          const: client
          description: The node can act as a client node.
        - type: string
          const: coordinating_only
          description: The node only performs coordination tasks.
        - type: string
          const: data
          description: The node can store data.
        - type: string
          const: data_cold
          description: The node can store cold data.
        - type: string
          const: data_content
          description: The node can store content data.
        - type: string
          const: data_frozen
          description: The node can store frozen data.
        - type: string
          const: data_hot
          description: The node can store hot data.
        - type: string
          const: data_warm
          description: The node can store warm data.
        - type: string
          const: ingest
          description: The node can perform ingest operations.
        - type: string
          const: ml
          description: The node can perform machine learning operations.
        - type: string
          const: remote_cluster_client
          description: The node can act as a remote cluster client.
        - type: string
          const: transform
          description: The node can perform transform operations.
        - type: string
          const: voting_only
          description: The node can only vote in cluster decisions.
        - type: string
          const: master
          deprecated: true
          x-version-deprecated: '2.0'
          x-deprecation-message: Use `cluster_manager` instead.
        - type: string
          const: cluster_manager
          description: The node can act as a cluster manager.
          x-version-added: '2.0'
    HttpHeaders:
      type: object
      description: The HTTP headers.
      additionalProperties:
        $ref: '#/components/schemas/StringOrStringArray'
    Password:
      type: string
      description: The password for authentication.
    Username:
      type: string
      description: The username for authentication.
    BaseNode:
      type: object
      description: The base information about a node.
      properties:
        attributes:
          type: object
          description: The attributes of the node.
          additionalProperties:
            type: string
        host:
          $ref: '#/components/schemas/Host'
        ip:
          $ref: '#/components/schemas/Ip'
        name:
          $ref: '#/components/schemas/Name'
        roles:
          $ref: '#/components/schemas/NodeRoles'
        transport_address:
          $ref: '#/components/schemas/TransportAddress'
      required:
        - name
    RankContainer:
      type: object
      description: The container for ranking configuration.
      properties:
        rrf:
          $ref: '#/components/schemas/RrfRank'
          description: The reciprocal rank fusion configuration.
      minProperties: 1
      maxProperties: 1
    RrfRank:
      allOf:
        - $ref: '#/components/schemas/RankBase'
        - type: object
          description: The reciprocal rank fusion ranking configuration.
          properties:
            rank_constant:
              description: To what degree documents found in individual result sets per query influence the final ranked result set.
              type: number
            window_size:
              description: The size of the individual result sets per query.
              type: number
    RankBase:
      type: object
      description: The base configuration for ranking.
    NodeShard:
      type: object
      description: The information about a shard on a node.
      properties:
        state:
          $ref: 'indices.stats.yaml#/components/schemas/ShardRoutingState'
        primary:
          type: boolean
        node:
          $ref: '#/components/schemas/NodeName'
        shard:
          type: integer
          format: int32
        index:
          $ref: '#/components/schemas/IndexName'
        allocation_id:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Id'
        recovery_source:
          type: object
          description: The recovery source information for this shard.
          additionalProperties:
            $ref: '#/components/schemas/Id'
        unassigned_info:
          $ref: 'cluster.allocation_explain.yaml#/components/schemas/UnassignedInformation'
        relocating_node:
          oneOf:
            - $ref: '#/components/schemas/NodeId'
            - type: 'null'
              description: No relocation is in progress.
      required:
        - index
        - primary
        - shard
        - state
    OpenSearchVersionInfo:
      type: object
      description: The version information for OpenSearch.
      properties:
        build_date:
          $ref: '#/components/schemas/DateTime'
          description: When the version was built.
        build_flavor:
          type: string
          description: The flavor of the build.
        build_hash:
          type: string
          description: The hash of the build.
        build_snapshot:
          type: boolean
          description: Whether this is a snapshot build.
        build_type:
          type: string
          description: The type of the build.
        distribution:
          type: string
          description: The distribution name.
        lucene_version:
          $ref: '#/components/schemas/VersionString'
          description: The version of Lucene being used.
        minimum_index_compatibility_version:
          $ref: '#/components/schemas/VersionString'
          description: The minimum compatible index version.
        minimum_wire_compatibility_version:
          $ref: '#/components/schemas/VersionString'
          description: The minimum compatible wire protocol version.
        number:
          type: string
          description: The version number.
      required:
        - build_date
        - build_hash
        - build_snapshot
        - build_type
        - distribution
        - lucene_version
        - minimum_index_compatibility_version
        - minimum_wire_compatibility_version
        - number
    PhaseTook:
      type: object
      description: The time taken by different phases of the search.
      properties:
        dfs_pre_query:
          $ref: '#/components/schemas/uint'
          description: The time taken for the distributed frequency search `pre-query` phase.
        query:
          $ref: '#/components/schemas/uint'
          description: The time taken for the `query` phase.
        fetch:
          $ref: '#/components/schemas/uint'
          description: The time taken for the `fetch` phase.
        dfs_query:
          $ref: '#/components/schemas/uint'
          description: The time taken for the distributed frequency search query phase.
        expand:
          $ref: '#/components/schemas/uint'
          description: The time taken for the `expand` phase.
        can_match:
          $ref: '#/components/schemas/uint'
          description: The time taken for the `can_match` phase.
      required:
        - can_match
        - dfs_pre_query
        - dfs_query
        - expand
        - fetch
        - query
    BulkByScrollTaskStatus:
      type: object
      description: The status of a bulk by scroll task.
      properties:
        slice_id:
          type: integer
          format: int32
        total:
          description: The number of documents that were successfully processed. 
          type: integer
          format: int64
        updated:
          description: The number of documents that were successfully updated after the reindex operation.
          type: integer
          format: int64
        created:
          description: The number of documents that were successfully created. 
          type: integer
          format: int64
        deleted:
          description: The number of documents that were successfully deleted. 
          type: integer
          format: int64
        batches:
          description: The number of scroll responses pulled back by the reindex operation.
          type: integer
          format: int32
        version_conflicts:
          description: The number of version conflicts encountered by the reindex operation.
          type: integer
          format: int64
        noops:
          description: The number of documents that were ignored. 
          type: integer
          format: int64
        retries:
          $ref: '#/components/schemas/Retries'
        throttled_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
        throttled:
          $ref: '#/components/schemas/Duration'
        requests_per_second:
          description: The number of requests per second effectively executed during the reindex operation.
          type: number
          format: float
        canceled:
          type: string
        throttled_until_millis:
          $ref: '#/components/schemas/DurationValueUnitMillis'
          description: When the throttling will end in milliseconds.
        throttled_until:
          $ref: '#/components/schemas/Duration'
          description: The amount time before the throttling will end.
        slices:
          type: array
          items:
            $ref: '#/components/schemas/BulkByScrollTaskStatusOrException'
      required:
        - batches
        - deleted
        - noops
        - requests_per_second
        - retries
        - throttled_millis
        - throttled_until_millis
        - total
        - version_conflicts
    BulkByScrollTaskStatusOrException:
      oneOf:
        - title: status
          $ref: '#/components/schemas/BulkByScrollTaskStatus'
          description: The status of the bulk by scroll task.
        - title: exception
          $ref: '#/components/schemas/ErrorCause'
          description: The error that occurred during the bulk by scroll task.
    BulkByScrollResponseBase:
      allOf:
        - $ref: '#/components/schemas/BulkByScrollTaskStatus'
          description: The base response for bulk by scroll operations.
        - type: object
          properties:
            took:
              type: integer
              format: int64
              description: The time taken by the operation in milliseconds.
            timed_out:
              type: boolean
              description: Whether the operation timed out.
            failures:
              type: array
              description: The list of failures that occurred during the operation.
              items:
                $ref: '#/components/schemas/BulkByScrollFailure'
          required:
            - failures
            - timed_out
            - took
    BulkByScrollFailure:
      anyOf:
        - $ref: '#/components/schemas/BulkItemResponseFailure'
        - $ref: '#/components/schemas/ScrollableHitSourceSearchFailure'
    BulkItemResponseFailure:
      type: object
      description: The details of a bulk item operation failure.
      properties:
        cause:
          $ref: '#/components/schemas/ErrorCause'
        id:
          $ref: '#/components/schemas/Id'
        index:
          $ref: '#/components/schemas/IndexName'
        status:
          type: integer
          format: int32
      required:
        - cause
        - index
        - status
    ScrollableHitSourceSearchFailure:
      type: object
      description: The details of a search failure during scrolling.
      properties:
        index:
          $ref: '#/components/schemas/IndexName'
        shard:
          type: integer
          format: int32
        node:
          type: string
        status:
          type: integer
          format: int32
        reason:
          $ref: '#/components/schemas/ErrorCause'
      required:
        - reason
        - status
    BatchSize:
      type: integer
      format: int64
      description: The size of a batch operation.
    ResourceType:
      type: string
      description: The type of resource.
      enum:
        - index_or_alias
    ResourceStats:
      type: object
      description: The statistics about resource usage.
      properties:
        average:
          $ref: '#/components/schemas/ResourceStat'
        total:
          $ref: '#/components/schemas/ResourceStat'
        min:
          $ref: '#/components/schemas/ResourceStat'
        max:
          $ref: '#/components/schemas/ResourceStat'
        thread_info:
          $ref: '#/components/schemas/ThreadInfo'
      required:
        - average
        - max
        - min
        - thread_info
        - total
    ResourceStat:
      type: object
      description: Any statistics about CPU and memory usage.
      properties:
        cpu_time_in_nanos:
          $ref: '#/components/schemas/DurationValueUnitNanos'
        memory_in_bytes:
          $ref: '#/components/schemas/ByteCount'
      required:
        - cpu_time_in_nanos
        - memory_in_bytes
    ThreadInfo:
      type: object
      description: The information about thread usage.
      properties:
        thread_executions:
          type: number
          description: The number of thread executions.
        active_threads:
          type: number
          description: The number of currently active threads.
      required:
        - active_threads
        - thread_executions