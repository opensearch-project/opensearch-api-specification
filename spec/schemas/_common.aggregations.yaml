openapi: 3.1.0
info:
  title: Schemas of _common.aggregations category
  description: Schemas of _common.aggregations category
  version: 1.0.0
paths: {}
components:
  schemas:
    Aggregate:
      oneOf:
        - $ref: '#/components/schemas/CardinalityAggregate'
        - $ref: '#/components/schemas/HdrPercentilesAggregate'
        - $ref: '#/components/schemas/HdrPercentileRanksAggregate'
        - $ref: '#/components/schemas/TDigestPercentilesAggregate'
        - $ref: '#/components/schemas/TDigestPercentileRanksAggregate'
        - $ref: '#/components/schemas/PercentilesBucketAggregate'
        - $ref: '#/components/schemas/MedianAbsoluteDeviationAggregate'
        - $ref: '#/components/schemas/MinAggregate'
        - $ref: '#/components/schemas/MaxAggregate'
        - $ref: '#/components/schemas/SumAggregate'
        - $ref: '#/components/schemas/AvgAggregate'
        - $ref: '#/components/schemas/WeightedAvgAggregate'
        - $ref: '#/components/schemas/ValueCountAggregate'
        - $ref: '#/components/schemas/SimpleValueAggregate'
        - $ref: '#/components/schemas/DerivativeAggregate'
        - $ref: '#/components/schemas/BucketMetricValueAggregate'
        - $ref: '#/components/schemas/StatsAggregate'
        - $ref: '#/components/schemas/StatsBucketAggregate'
        - $ref: '#/components/schemas/ExtendedStatsAggregate'
        - $ref: '#/components/schemas/ExtendedStatsBucketAggregate'
        - $ref: '#/components/schemas/GeoBoundsAggregate'
        - $ref: '#/components/schemas/GeoCentroidAggregate'
        - $ref: '#/components/schemas/HistogramAggregate'
        - $ref: '#/components/schemas/DateHistogramAggregate'
        - $ref: '#/components/schemas/AutoDateHistogramAggregate'
        - $ref: '#/components/schemas/VariableWidthHistogramAggregate'
        - $ref: '#/components/schemas/StringTermsAggregate'
        - $ref: '#/components/schemas/LongTermsAggregate'
        - $ref: '#/components/schemas/DoubleTermsAggregate'
        - $ref: '#/components/schemas/UnmappedTermsAggregate'
        - $ref: '#/components/schemas/LongRareTermsAggregate'
        - $ref: '#/components/schemas/StringRareTermsAggregate'
        - $ref: '#/components/schemas/UnmappedRareTermsAggregate'
        - $ref: '#/components/schemas/MultiTermsAggregate'
        - $ref: '#/components/schemas/MissingAggregate'
        - $ref: '#/components/schemas/NestedAggregate'
        - $ref: '#/components/schemas/ReverseNestedAggregate'
        - $ref: '#/components/schemas/GlobalAggregate'
        - $ref: '#/components/schemas/FilterAggregate'
        - $ref: '#/components/schemas/ChildrenAggregate'
        - $ref: '#/components/schemas/ParentAggregate'
        - $ref: '#/components/schemas/SamplerAggregate'
        - $ref: '#/components/schemas/UnmappedSamplerAggregate'
        - $ref: '#/components/schemas/GeoHashGridAggregate'
        - $ref: '#/components/schemas/GeoTileGridAggregate'
        - $ref: '#/components/schemas/GeoHexGridAggregate'
        - $ref: '#/components/schemas/RangeAggregate'
        - $ref: '#/components/schemas/DateRangeAggregate'
        - $ref: '#/components/schemas/GeoDistanceAggregate'
        - $ref: '#/components/schemas/IpRangeAggregate'
        - $ref: '#/components/schemas/IpPrefixAggregate'
        - $ref: '#/components/schemas/FiltersAggregate'
        - $ref: '#/components/schemas/AdjacencyMatrixAggregate'
        - $ref: '#/components/schemas/SignificantLongTermsAggregate'
        - $ref: '#/components/schemas/SignificantStringTermsAggregate'
        - $ref: '#/components/schemas/UnmappedSignificantTermsAggregate'
        - $ref: '#/components/schemas/CompositeAggregate'
        - $ref: '#/components/schemas/FrequentItemSetsAggregate'
        - $ref: '#/components/schemas/ScriptedMetricAggregate'
        - $ref: '#/components/schemas/TopHitsAggregate'
        - $ref: '#/components/schemas/InferenceAggregate'
        - $ref: '#/components/schemas/StringStatsAggregate'
        - $ref: '#/components/schemas/BoxPlotAggregate'
        - $ref: '#/components/schemas/TopMetricsAggregate'
        - $ref: '#/components/schemas/TTestAggregate'
        - $ref: '#/components/schemas/RateAggregate'
        - $ref: '#/components/schemas/CumulativeCardinalityAggregate'
        - $ref: '#/components/schemas/MatrixStatsAggregate'
        - $ref: '#/components/schemas/GeoLineAggregate'
    CardinalityAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type: number
          required:
            - value
    AggregateBase:
      type: object
      properties:
        meta:
          $ref: '_common.yaml#/components/schemas/Metadata'
    HdrPercentilesAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    PercentilesAggregateBase:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            values:
              $ref: '#/components/schemas/Percentiles'
          required:
            - values
    Percentiles:
      oneOf:
        - $ref: '#/components/schemas/KeyedPercentiles'
        - type: array
          items:
            $ref: '#/components/schemas/ArrayPercentilesItem'
    KeyedPercentiles:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: number
          - nullable: true
            type: string
    ArrayPercentilesItem:
      type: object
      properties:
        key:
          type: string
        value:
          oneOf:
            - type: number
            - nullable: true
              type: string
        value_as_string:
          type: string
      required:
        - key
        - value
    HdrPercentileRanksAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    TDigestPercentilesAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    TDigestPercentileRanksAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    PercentilesBucketAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    MedianAbsoluteDeviationAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    SingleMetricAggregateBase:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              description: |-
                The metric value. A missing value generally means that there was no data to aggregate,
                unless specified otherwise.
              oneOf:
                - type: number
                - nullable: true
                  type: string
            value_as_string:
              type: string
          required:
            - value
    MinAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    MaxAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    SumAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    AvgAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    WeightedAvgAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    ValueCountAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    SimpleValueAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    DerivativeAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
          properties:
            normalized_value:
              type: number
            normalized_value_as_string:
              type: string
    BucketMetricValueAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
          properties:
            keys:
              type: array
              items:
                type: string
          required:
            - keys
    StatsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            count:
              type: number
            min:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            max:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            avg:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            sum:
              type: number
            min_as_string:
              type: string
            max_as_string:
              type: string
            avg_as_string:
              type: string
            sum_as_string:
              type: string
          required:
            - count
            - min
            - max
            - avg
            - sum
    StatsBucketAggregate:
      allOf:
        - $ref: '#/components/schemas/StatsAggregate'
        - type: object
    ExtendedStatsAggregate:
      allOf:
        - $ref: '#/components/schemas/StatsAggregate'
        - type: object
          properties:
            sum_of_squares:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            variance:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            variance_population:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            variance_sampling:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            std_deviation:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            std_deviation_population:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            std_deviation_sampling:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            std_deviation_bounds:
              $ref: '#/components/schemas/StandardDeviationBounds'
            sum_of_squares_as_string:
              type: string
            variance_as_string:
              type: string
            variance_population_as_string:
              type: string
            variance_sampling_as_string:
              type: string
            std_deviation_as_string:
              type: string
            std_deviation_bounds_as_string:
              $ref: '#/components/schemas/StandardDeviationBoundsAsString'
          required:
            - sum_of_squares
            - variance
            - variance_population
            - variance_sampling
            - std_deviation
            - std_deviation_population
            - std_deviation_sampling
    StandardDeviationBounds:
      type: object
      properties:
        upper:
          oneOf:
            - type: number
            - nullable: true
              type: string
        lower:
          oneOf:
            - type: number
            - nullable: true
              type: string
        upper_population:
          oneOf:
            - type: number
            - nullable: true
              type: string
        lower_population:
          oneOf:
            - type: number
            - nullable: true
              type: string
        upper_sampling:
          oneOf:
            - type: number
            - nullable: true
              type: string
        lower_sampling:
          oneOf:
            - type: number
            - nullable: true
              type: string
      required:
        - upper
        - lower
        - upper_population
        - lower_population
        - upper_sampling
        - lower_sampling
    StandardDeviationBoundsAsString:
      type: object
      properties:
        upper:
          type: string
        lower:
          type: string
        upper_population:
          type: string
        lower_population:
          type: string
        upper_sampling:
          type: string
        lower_sampling:
          type: string
      required:
        - upper
        - lower
        - upper_population
        - lower_population
        - upper_sampling
        - lower_sampling
    ExtendedStatsBucketAggregate:
      allOf:
        - $ref: '#/components/schemas/ExtendedStatsAggregate'
        - type: object
    GeoBoundsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            bounds:
              $ref: '_common.yaml#/components/schemas/GeoBounds'
    GeoCentroidAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            count:
              type: number
            location:
              $ref: '_common.yaml#/components/schemas/GeoLocation'
          required:
            - count
    HistogramAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseHistogramBucket'
        - type: object
    MultiBucketAggregateBaseHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsHistogramBucket'
          required:
            - buckets
    BucketsHistogramBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/HistogramBucket'
        - type: array
          items:
            $ref: '#/components/schemas/HistogramBucket'
    HistogramBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key_as_string:
              type: string
            key:
              type: number
          required:
            - key
    MultiBucketBase:
      type: object
      properties:
        doc_count:
          type: number
      required:
        - doc_count
    DateHistogramAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseDateHistogramBucket'
        - type: object
    MultiBucketAggregateBaseDateHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsDateHistogramBucket'
          required:
            - buckets
    BucketsDateHistogramBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/DateHistogramBucket'
        - type: array
          items:
            $ref: '#/components/schemas/DateHistogramBucket'
    DateHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key_as_string:
              type: string
            key:
              $ref: '_common.yaml#/components/schemas/EpochTimeUnitMillis'
          required:
            - key
    AutoDateHistogramAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseDateHistogramBucket'
        - type: object
          properties:
            interval:
              $ref: '_common.yaml#/components/schemas/DurationLarge'
          required:
            - interval
    VariableWidthHistogramAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseVariableWidthHistogramBucket'
        - type: object
    MultiBucketAggregateBaseVariableWidthHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsVariableWidthHistogramBucket'
          required:
            - buckets
    BucketsVariableWidthHistogramBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableWidthHistogramBucket'
        - type: array
          items:
            $ref: '#/components/schemas/VariableWidthHistogramBucket'
    VariableWidthHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            min:
              type: number
            key:
              type: number
            max:
              type: number
            min_as_string:
              type: string
            key_as_string:
              type: string
            max_as_string:
              type: string
          required:
            - min
            - key
            - max
    StringTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseStringTermsBucket'
        - type: object
    TermsAggregateBaseStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseStringTermsBucket'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    MultiBucketAggregateBaseStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsStringTermsBucket'
          required:
            - buckets
    BucketsStringTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/StringTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/StringTermsBucket'
    StringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/TermsBucketBase'
        - type: object
          properties:
            key:
              $ref: '_common.yaml#/components/schemas/FieldValue'
          required:
            - key
    TermsBucketBase:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            doc_count_error:
              type: number
    LongTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseLongTermsBucket'
        - type: object
    TermsAggregateBaseLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseLongTermsBucket'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    MultiBucketAggregateBaseLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsLongTermsBucket'
          required:
            - buckets
    BucketsLongTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/LongTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/LongTermsBucket'
    LongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/TermsBucketBase'
        - type: object
          properties:
            key:
              type: number
            key_as_string:
              type: string
          required:
            - key
    DoubleTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseDoubleTermsBucket'
        - type: object
    TermsAggregateBaseDoubleTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseDoubleTermsBucket'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    MultiBucketAggregateBaseDoubleTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsDoubleTermsBucket'
          required:
            - buckets
    BucketsDoubleTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/DoubleTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/DoubleTermsBucket'
    DoubleTermsBucket:
      allOf:
        - $ref: '#/components/schemas/TermsBucketBase'
        - type: object
          properties:
            key:
              type: number
            key_as_string:
              type: string
          required:
            - key
    UnmappedTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseVoid'
        - type: object
    TermsAggregateBaseVoid:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseVoid'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    MultiBucketAggregateBaseVoid:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsVoid'
          required:
            - buckets
    BucketsVoid:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '_common.yaml#/components/schemas/Void'
        - type: array
          items:
            $ref: '_common.yaml#/components/schemas/Void'
    LongRareTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseLongRareTermsBucket'
        - type: object
    MultiBucketAggregateBaseLongRareTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsLongRareTermsBucket'
          required:
            - buckets
    BucketsLongRareTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/LongRareTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/LongRareTermsBucket'
    LongRareTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: number
            key_as_string:
              type: string
          required:
            - key
    StringRareTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseStringRareTermsBucket'
        - type: object
    MultiBucketAggregateBaseStringRareTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsStringRareTermsBucket'
          required:
            - buckets
    BucketsStringRareTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/StringRareTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/StringRareTermsBucket'
    StringRareTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: string
          required:
            - key
    UnmappedRareTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseVoid'
        - type: object
    MultiTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseMultiTermsBucket'
        - type: object
    TermsAggregateBaseMultiTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseMultiTermsBucket'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    MultiBucketAggregateBaseMultiTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsMultiTermsBucket'
          required:
            - buckets
    BucketsMultiTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/MultiTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/MultiTermsBucket'
    MultiTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: array
              items:
                $ref: '_common.yaml#/components/schemas/FieldValue'
            key_as_string:
              type: string
            doc_count_error_upper_bound:
              type: number
          required:
            - key
    MissingAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    SingleBucketAggregateBase:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            doc_count:
              type: number
          required:
            - doc_count
    NestedAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    ReverseNestedAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    GlobalAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    FilterAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    ChildrenAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    ParentAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    SamplerAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    UnmappedSamplerAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    GeoHashGridAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseGeoHashGridBucket'
        - type: object
    MultiBucketAggregateBaseGeoHashGridBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsGeoHashGridBucket'
          required:
            - buckets
    BucketsGeoHashGridBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/GeoHashGridBucket'
        - type: array
          items:
            $ref: '#/components/schemas/GeoHashGridBucket'
    GeoHashGridBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              $ref: '_common.yaml#/components/schemas/GeoHash'
          required:
            - key
    GeoTileGridAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseGeoTileGridBucket'
        - type: object
    MultiBucketAggregateBaseGeoTileGridBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsGeoTileGridBucket'
          required:
            - buckets
    BucketsGeoTileGridBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/GeoTileGridBucket'
        - type: array
          items:
            $ref: '#/components/schemas/GeoTileGridBucket'
    GeoTileGridBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              $ref: '_common.yaml#/components/schemas/GeoTile'
          required:
            - key
    GeoHexGridAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseGeoHexGridBucket'
        - type: object
    MultiBucketAggregateBaseGeoHexGridBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsGeoHexGridBucket'
          required:
            - buckets
    BucketsGeoHexGridBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/GeoHexGridBucket'
        - type: array
          items:
            $ref: '#/components/schemas/GeoHexGridBucket'
    GeoHexGridBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              $ref: '_common.yaml#/components/schemas/GeoHexCell'
          required:
            - key
    RangeAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseRangeBucket'
        - type: object
    MultiBucketAggregateBaseRangeBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsRangeBucket'
          required:
            - buckets
    BucketsRangeBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/RangeBucket'
        - type: array
          items:
            $ref: '#/components/schemas/RangeBucket'
    RangeBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            from:
              type: number
            to:
              type: number
            from_as_string:
              type: string
            to_as_string:
              type: string
            key:
              description: The bucket key. Present if the aggregation is _not_ keyed
              type: string
    DateRangeAggregate:
      allOf:
        - $ref: '#/components/schemas/RangeAggregate'
        - type: object
    GeoDistanceAggregate:
      allOf:
        - $ref: '#/components/schemas/RangeAggregate'
        - type: object
    IpRangeAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseIpRangeBucket'
        - type: object
    MultiBucketAggregateBaseIpRangeBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsIpRangeBucket'
          required:
            - buckets
    BucketsIpRangeBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/IpRangeBucket'
        - type: array
          items:
            $ref: '#/components/schemas/IpRangeBucket'
    IpRangeBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: string
            from:
              type: string
            to:
              type: string
    IpPrefixAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseIpPrefixBucket'
        - type: object
    MultiBucketAggregateBaseIpPrefixBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsIpPrefixBucket'
          required:
            - buckets
    BucketsIpPrefixBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/IpPrefixBucket'
        - type: array
          items:
            $ref: '#/components/schemas/IpPrefixBucket'
    IpPrefixBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            is_ipv6:
              type: boolean
            key:
              type: string
            prefix_length:
              type: number
            netmask:
              type: string
          required:
            - is_ipv6
            - key
            - prefix_length
    FiltersAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseFiltersBucket'
        - type: object
    MultiBucketAggregateBaseFiltersBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsFiltersBucket'
          required:
            - buckets
    BucketsFiltersBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/FiltersBucket'
        - type: array
          items:
            $ref: '#/components/schemas/FiltersBucket'
    FiltersBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
    AdjacencyMatrixAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseAdjacencyMatrixBucket'
        - type: object
    MultiBucketAggregateBaseAdjacencyMatrixBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsAdjacencyMatrixBucket'
          required:
            - buckets
    BucketsAdjacencyMatrixBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/AdjacencyMatrixBucket'
        - type: array
          items:
            $ref: '#/components/schemas/AdjacencyMatrixBucket'
    AdjacencyMatrixBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: string
          required:
            - key
    SignificantLongTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsAggregateBaseSignificantLongTermsBucket'
        - type: object
    SignificantTermsAggregateBaseSignificantLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseSignificantLongTermsBucket'
        - type: object
          properties:
            bg_count:
              type: number
            doc_count:
              type: number
    MultiBucketAggregateBaseSignificantLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsSignificantLongTermsBucket'
          required:
            - buckets
    BucketsSignificantLongTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/SignificantLongTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/SignificantLongTermsBucket'
    SignificantLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsBucketBase'
        - type: object
          properties:
            key:
              type: number
            key_as_string:
              type: string
          required:
            - key
    SignificantTermsBucketBase:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            score:
              type: number
            bg_count:
              type: number
          required:
            - score
            - bg_count
    SignificantStringTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsAggregateBaseSignificantStringTermsBucket'
        - type: object
    SignificantTermsAggregateBaseSignificantStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseSignificantStringTermsBucket'
        - type: object
          properties:
            bg_count:
              type: number
            doc_count:
              type: number
    MultiBucketAggregateBaseSignificantStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsSignificantStringTermsBucket'
          required:
            - buckets
    BucketsSignificantStringTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/SignificantStringTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/SignificantStringTermsBucket'
    SignificantStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsBucketBase'
        - type: object
          properties:
            key:
              type: string
          required:
            - key
    UnmappedSignificantTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsAggregateBaseVoid'
        - type: object
    SignificantTermsAggregateBaseVoid:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseVoid'
        - type: object
          properties:
            bg_count:
              type: number
            doc_count:
              type: number
    CompositeAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseCompositeBucket'
        - type: object
          properties:
            after_key:
              $ref: '#/components/schemas/CompositeAggregateKey'
    CompositeAggregateKey:
      type: object
      additionalProperties:
        $ref: '_common.yaml#/components/schemas/FieldValue'
    MultiBucketAggregateBaseCompositeBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsCompositeBucket'
          required:
            - buckets
    BucketsCompositeBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/CompositeBucket'
        - type: array
          items:
            $ref: '#/components/schemas/CompositeBucket'
    CompositeBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              $ref: '#/components/schemas/CompositeAggregateKey'
          required:
            - key
    FrequentItemSetsAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseFrequentItemSetsBucket'
        - type: object
    MultiBucketAggregateBaseFrequentItemSetsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsFrequentItemSetsBucket'
          required:
            - buckets
    BucketsFrequentItemSetsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/FrequentItemSetsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/FrequentItemSetsBucket'
    FrequentItemSetsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
            support:
              type: number
          required:
            - key
            - support
    ScriptedMetricAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type: object
          required:
            - value
    TopHitsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            hits:
              $ref: '_core.search.yaml#/components/schemas/HitsMetadata'
          required:
            - hits
    InferenceAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              $ref: '_common.yaml#/components/schemas/FieldValue'
            feature_importance:
              type: array
              items:
                $ref: '#/components/schemas/InferenceFeatureImportance'
            top_classes:
              type: array
              items:
                $ref: '#/components/schemas/InferenceTopClassEntry'
            warning:
              type: string
    InferenceFeatureImportance:
      type: object
      properties:
        feature_name:
          type: string
        importance:
          type: number
        classes:
          type: array
          items:
            $ref: '#/components/schemas/InferenceClassImportance'
      required:
        - feature_name
    InferenceClassImportance:
      type: object
      properties:
        class_name:
          type: string
        importance:
          type: number
      required:
        - class_name
        - importance
    InferenceTopClassEntry:
      type: object
      properties:
        class_name:
          $ref: '_common.yaml#/components/schemas/FieldValue'
        class_probability:
          type: number
        class_score:
          type: number
      required:
        - class_name
        - class_probability
        - class_score
    StringStatsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            count:
              type: number
            min_length:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            max_length:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            avg_length:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            entropy:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            distribution:
              oneOf:
                - type: object
                  additionalProperties:
                    type: number
                - nullable: true
                  type: string
            min_length_as_string:
              type: string
            max_length_as_string:
              type: string
            avg_length_as_string:
              type: string
          required:
            - count
            - min_length
            - max_length
            - avg_length
            - entropy
    BoxPlotAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            min:
              type: number
            max:
              type: number
            q1:
              type: number
            q2:
              type: number
            q3:
              type: number
            lower:
              type: number
            upper:
              type: number
            min_as_string:
              type: string
            max_as_string:
              type: string
            q1_as_string:
              type: string
            q2_as_string:
              type: string
            q3_as_string:
              type: string
            lower_as_string:
              type: string
            upper_as_string:
              type: string
          required:
            - min
            - max
            - q1
            - q2
            - q3
            - lower
            - upper
    TopMetricsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            top:
              type: array
              items:
                $ref: '#/components/schemas/TopMetrics'
          required:
            - top
    TopMetrics:
      type: object
      properties:
        sort:
          type: array
          items:
            oneOf:
              - $ref: '_common.yaml#/components/schemas/FieldValue'
              - nullable: true
                type: string
        metrics:
          type: object
          additionalProperties:
            oneOf:
              - $ref: '_common.yaml#/components/schemas/FieldValue'
              - nullable: true
                type: string
      required:
        - sort
        - metrics
    TTestAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              oneOf:
                - type: number
                - nullable: true
                  type: string
            value_as_string:
              type: string
          required:
            - value
    RateAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type: number
            value_as_string:
              type: string
          required:
            - value
    CumulativeCardinalityAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type: number
            value_as_string:
              type: string
          required:
            - value
    MatrixStatsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            doc_count:
              type: number
            fields:
              type: array
              items:
                $ref: '#/components/schemas/MatrixStatsFields'
          required:
            - doc_count
    MatrixStatsFields:
      type: object
      properties:
        name:
          $ref: '_common.yaml#/components/schemas/Field'
        count:
          type: number
        mean:
          type: number
        variance:
          type: number
        skewness:
          type: number
        kurtosis:
          type: number
        covariance:
          type: object
          additionalProperties:
            type: number
        correlation:
          type: object
          additionalProperties:
            type: number
      required:
        - name
        - count
        - mean
        - variance
        - skewness
        - kurtosis
        - covariance
        - correlation
    GeoLineAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            type:
              type: string
            geometry:
              $ref: '_common.yaml#/components/schemas/GeoLine'
            properties:
              type: object
          required:
            - type
            - geometry
            - properties
    AggregationContainer:
      allOf:
        - type: object
          properties:
            aggregations:
              description: |-
                Sub-aggregations for this aggregation.
                Only applies to bucket aggregations.
              type: object
              additionalProperties:
                $ref: '#/components/schemas/AggregationContainer'
            meta:
              $ref: '_common.yaml#/components/schemas/Metadata'
        - type: object
          properties:
            adjacency_matrix:
              $ref: '#/components/schemas/AdjacencyMatrixAggregation'
            auto_date_histogram:
              $ref: '#/components/schemas/AutoDateHistogramAggregation'
            avg:
              $ref: '#/components/schemas/AverageAggregation'
            avg_bucket:
              $ref: '#/components/schemas/AverageBucketAggregation'
            boxplot:
              $ref: '#/components/schemas/BoxplotAggregation'
            bucket_script:
              $ref: '#/components/schemas/BucketScriptAggregation'
            bucket_selector:
              $ref: '#/components/schemas/BucketSelectorAggregation'
            bucket_sort:
              $ref: '#/components/schemas/BucketSortAggregation'
            bucket_count_ks_test:
              $ref: '#/components/schemas/BucketKsAggregation'
            bucket_correlation:
              $ref: '#/components/schemas/BucketCorrelationAggregation'
            cardinality:
              $ref: '#/components/schemas/CardinalityAggregation'
            categorize_text:
              $ref: '#/components/schemas/CategorizeTextAggregation'
            children:
              $ref: '#/components/schemas/ChildrenAggregation'
            composite:
              $ref: '#/components/schemas/CompositeAggregation'
            cumulative_cardinality:
              $ref: '#/components/schemas/CumulativeCardinalityAggregation'
            cumulative_sum:
              $ref: '#/components/schemas/CumulativeSumAggregation'
            date_histogram:
              $ref: '#/components/schemas/DateHistogramAggregation'
            date_range:
              $ref: '#/components/schemas/DateRangeAggregation'
            derivative:
              $ref: '#/components/schemas/DerivativeAggregation'
            diversified_sampler:
              $ref: '#/components/schemas/DiversifiedSamplerAggregation'
            extended_stats:
              $ref: '#/components/schemas/ExtendedStatsAggregation'
            extended_stats_bucket:
              $ref: '#/components/schemas/ExtendedStatsBucketAggregation'
            frequent_item_sets:
              $ref: '#/components/schemas/FrequentItemSetsAggregation'
            filter:
              $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
            filters:
              $ref: '#/components/schemas/FiltersAggregation'
            geo_bounds:
              $ref: '#/components/schemas/GeoBoundsAggregation'
            geo_centroid:
              $ref: '#/components/schemas/GeoCentroidAggregation'
            geo_distance:
              $ref: '#/components/schemas/GeoDistanceAggregation'
            geohash_grid:
              $ref: '#/components/schemas/GeoHashGridAggregation'
            geo_line:
              $ref: '#/components/schemas/GeoLineAggregation'
            geotile_grid:
              $ref: '#/components/schemas/GeoTileGridAggregation'
            geohex_grid:
              $ref: '#/components/schemas/GeohexGridAggregation'
            global:
              $ref: '#/components/schemas/GlobalAggregation'
            histogram:
              $ref: '#/components/schemas/HistogramAggregation'
            ip_range:
              $ref: '#/components/schemas/IpRangeAggregation'
            ip_prefix:
              $ref: '#/components/schemas/IpPrefixAggregation'
            inference:
              $ref: '#/components/schemas/InferenceAggregation'
            line:
              $ref: '#/components/schemas/GeoLineAggregation'
            matrix_stats:
              $ref: '#/components/schemas/MatrixStatsAggregation'
            max:
              $ref: '#/components/schemas/MaxAggregation'
            max_bucket:
              $ref: '#/components/schemas/MaxBucketAggregation'
            median_absolute_deviation:
              $ref: '#/components/schemas/MedianAbsoluteDeviationAggregation'
            min:
              $ref: '#/components/schemas/MinAggregation'
            min_bucket:
              $ref: '#/components/schemas/MinBucketAggregation'
            missing:
              $ref: '#/components/schemas/MissingAggregation'
            moving_avg:
              $ref: '#/components/schemas/MovingAverageAggregation'
            moving_percentiles:
              $ref: '#/components/schemas/MovingPercentilesAggregation'
            moving_fn:
              $ref: '#/components/schemas/MovingFunctionAggregation'
            multi_terms:
              $ref: '#/components/schemas/MultiTermsAggregation'
            nested:
              $ref: '#/components/schemas/NestedAggregation'
            normalize:
              $ref: '#/components/schemas/NormalizeAggregation'
            parent:
              $ref: '#/components/schemas/ParentAggregation'
            percentile_ranks:
              $ref: '#/components/schemas/PercentileRanksAggregation'
            percentiles:
              $ref: '#/components/schemas/PercentilesAggregation'
            percentiles_bucket:
              $ref: '#/components/schemas/PercentilesBucketAggregation'
            range:
              $ref: '#/components/schemas/RangeAggregation'
            rare_terms:
              $ref: '#/components/schemas/RareTermsAggregation'
            rate:
              $ref: '#/components/schemas/RateAggregation'
            reverse_nested:
              $ref: '#/components/schemas/ReverseNestedAggregation'
            sampler:
              $ref: '#/components/schemas/SamplerAggregation'
            scripted_metric:
              $ref: '#/components/schemas/ScriptedMetricAggregation'
            serial_diff:
              $ref: '#/components/schemas/SerialDifferencingAggregation'
            significant_terms:
              $ref: '#/components/schemas/SignificantTermsAggregation'
            significant_text:
              $ref: '#/components/schemas/SignificantTextAggregation'
            stats:
              $ref: '#/components/schemas/StatsAggregation'
            stats_bucket:
              $ref: '#/components/schemas/StatsBucketAggregation'
            string_stats:
              $ref: '#/components/schemas/StringStatsAggregation'
            sum:
              $ref: '#/components/schemas/SumAggregation'
            sum_bucket:
              $ref: '#/components/schemas/SumBucketAggregation'
            terms:
              $ref: '#/components/schemas/TermsAggregation'
            top_hits:
              $ref: '#/components/schemas/TopHitsAggregation'
            t_test:
              $ref: '#/components/schemas/TTestAggregation'
            top_metrics:
              $ref: '#/components/schemas/TopMetricsAggregation'
            value_count:
              $ref: '#/components/schemas/ValueCountAggregation'
            weighted_avg:
              $ref: '#/components/schemas/WeightedAverageAggregation'
            variable_width_histogram:
              $ref: '#/components/schemas/VariableWidthHistogramAggregation'
          minProperties: 1
          maxProperties: 1
    AdjacencyMatrixAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            filters:
              description: |-
                Filters used to create buckets.
                At least one filter is required.
              type: object
              additionalProperties:
                $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
    BucketAggregationBase:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
    Aggregation:
      type: object
      properties:
        meta:
          $ref: '_common.yaml#/components/schemas/Metadata'
        name:
          type: string
    AutoDateHistogramAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            buckets:
              description: The target number of buckets.
              type: number
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            format:
              description: |-
                The date format used to format `key_as_string` in the response.
                If no `format` is specified, the first date format specified in the field mapping is used.
              type: string
            minimum_interval:
              $ref: '#/components/schemas/MinimumInterval'
            missing:
              $ref: '_common.yaml#/components/schemas/DateTime'
            offset:
              description: Time zone specified as a ISO 8601 UTC offset.
              type: string
            params:
              type: object
              additionalProperties:
                type: object
            script:
              $ref: '_common.yaml#/components/schemas/Script'
            time_zone:
              $ref: '_common.yaml#/components/schemas/TimeZone'
    MinimumInterval:
      type: string
      enum:
        - second
        - minute
        - hour
        - day
        - month
        - year
    AverageAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    FormatMetricAggregationBase:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            format:
              type: string
    MetricAggregationBase:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
        missing:
          $ref: '#/components/schemas/Missing'
        script:
          $ref: '_common.yaml#/components/schemas/Script'
    Missing:
      oneOf:
        - type: string
        - type: number
        - type: number
        - type: boolean
    AverageBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    PipelineAggregationBase:
      allOf:
        - $ref: '#/components/schemas/BucketPathAggregation'
        - type: object
          properties:
            format:
              description: |-
                `DecimalFormat` pattern for the output value.
                If specified, the formatted value is returned in the aggregation’s `value_as_string` property.
              type: string
            gap_policy:
              $ref: '#/components/schemas/GapPolicy'
    GapPolicy:
      type: string
      enum:
        - skip
        - insert_zeros
        - keep_values
    BucketPathAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            buckets_path:
              $ref: '#/components/schemas/BucketsPath'
    BucketsPath:
      description: |-
        Buckets path can be expressed in different ways, and an aggregation may accept some or all of these
        forms depending on its type. Please refer to each aggregation's documentation to know what buckets
        path forms they accept.
      oneOf:
        - type: string
        - type: array
          items:
            type: string
        - type: object
          additionalProperties:
            type: string
    BoxplotAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            compression:
              description: Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling
                control of memory usage and approximation error.
              type: number
    BucketScriptAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            script:
              $ref: '_common.yaml#/components/schemas/Script'
    BucketSelectorAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            script:
              $ref: '_common.yaml#/components/schemas/Script'
    BucketSortAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            from:
              description: Buckets in positions prior to `from` will be truncated.
              type: number
            gap_policy:
              $ref: '#/components/schemas/GapPolicy'
            size:
              description: |-
                The number of buckets to return.
                Defaults to all buckets of the parent aggregation.
              type: number
            sort:
              $ref: '_common.yaml#/components/schemas/Sort'
    BucketKsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketPathAggregation'
        - type: object
          properties:
            alternative:
              description: |-
                A list of string values indicating which K-S test alternative to calculate. The valid values
                are: "greater", "less", "two_sided". This parameter is key for determining the K-S statistic used
                when calculating the K-S test. Default value is all possible alternative hypotheses.
              type: array
              items:
                type: string
            fractions:
              description: >-
                A list of doubles indicating the distribution of the samples with which to compare to the `buckets_path`
                results.

                In typical usage this is the overall proportion of documents in each bucket, which is compared with the actual

                document proportions in each bucket from the sibling aggregation counts. The default is to assume that overall

                documents are uniformly distributed on these buckets, which they would be if one used equal percentiles of a

                metric to define the bucket end points.
              type: array
              items:
                type: number
            sampling_method:
              description: >-
                Indicates the sampling methodology when calculating the K-S test. Note, this is sampling of the returned
                values.

                This determines the cumulative distribution function (CDF) points used comparing the two samples. Default is

                `upper_tail`, which emphasizes the upper end of the CDF points. Valid options are: `upper_tail`, `uniform`,

                and `lower_tail`.
              type: string
    BucketCorrelationAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketPathAggregation'
        - type: object
          properties:
            function:
              $ref: '#/components/schemas/BucketCorrelationFunction'
          required:
            - function
    BucketCorrelationFunction:
      type: object
      properties:
        count_correlation:
          $ref: '#/components/schemas/BucketCorrelationFunctionCountCorrelation'
      required:
        - count_correlation
    BucketCorrelationFunctionCountCorrelation:
      type: object
      properties:
        indicator:
          $ref: '#/components/schemas/BucketCorrelationFunctionCountCorrelationIndicator'
      required:
        - indicator
    BucketCorrelationFunctionCountCorrelationIndicator:
      type: object
      properties:
        doc_count:
          description: |-
            The total number of documents that initially created the expectations. It’s required to be greater
            than or equal to the sum of all values in the buckets_path as this is the originating superset of data
            to which the term values are correlated.
          type: number
        expectations:
          description: |-
            An array of numbers with which to correlate the configured `bucket_path` values.
            The length of this value must always equal the number of buckets returned by the `bucket_path`.
          type: array
          items:
            type: number
        fractions:
          description: |-
            An array of fractions to use when averaging and calculating variance. This should be used if
            the pre-calculated data and the buckets_path have known gaps. The length of fractions, if provided,
            must equal expectations.
          type: array
          items:
            type: number
      required:
        - doc_count
        - expectations
    CardinalityAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            precision_threshold:
              description: |-
                A unique count below which counts are expected to be close to accurate.
                This allows to trade memory for accuracy.
              type: number
            rehash:
              type: boolean
            execution_hint:
              $ref: '#/components/schemas/CardinalityExecutionMode'
    CardinalityExecutionMode:
      type: string
      enum:
        - global_ordinals
        - segment_ordinals
        - direct
        - save_memory_heuristic
        - save_time_heuristic
    CategorizeTextAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            max_unique_tokens:
              description: |-
                The maximum number of unique tokens at any position up to max_matched_tokens. Must be larger than 1.
                Smaller values use less memory and create fewer categories. Larger values will use more memory and
                create narrower categories. Max allowed value is 100.
              type: number
            max_matched_tokens:
              description: |-
                The maximum number of token positions to match on before attempting to merge categories. Larger
                values will use more memory and create narrower categories. Max allowed value is 100.
              type: number
            similarity_threshold:
              description: >-
                The minimum percentage of tokens that must match for text to be added to the category bucket. Must

                be between 1 and 100. The larger the value the narrower the categories. Larger values will increase memory

                usage and create narrower categories.
              type: number
            categorization_filters:
              description: >-
                This property expects an array of regular expressions. The expressions are used to filter out matching

                sequences from the categorization field values. You can use this functionality to fine tune the categorization

                by excluding sequences from consideration when categories are defined. For example, you can exclude SQL

                statements that appear in your log files. This property cannot be used at the same time as categorization_analyzer.

                If you only want to define simple regular expression filters that are applied prior to tokenization, setting

                this property is the easiest method. If you also want to customize the tokenizer or post-tokenization filtering,

                use the categorization_analyzer property instead and include the filters as pattern_replace character filters.
              type: array
              items:
                type: string
            categorization_analyzer:
              $ref: '#/components/schemas/CategorizeTextAnalyzer'
            shard_size:
              description: The number of categorization buckets to return from each shard before merging all the results.
              type: number
            size:
              description: The number of buckets to return.
              type: number
            min_doc_count:
              description: The minimum number of documents in a bucket to be returned to the results.
              type: number
            shard_min_doc_count:
              description: The minimum number of documents in a bucket to be returned from the shard before merging.
              type: number
          required:
            - field
    CategorizeTextAnalyzer:
      oneOf:
        - type: string
        - $ref: '#/components/schemas/CustomCategorizeTextAnalyzer'
    CustomCategorizeTextAnalyzer:
      type: object
      properties:
        char_filter:
          type: array
          items:
            type: string
        tokenizer:
          type: string
        filter:
          type: array
          items:
            type: string
    ChildrenAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            type:
              $ref: '_common.yaml#/components/schemas/RelationName'
    CompositeAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            after:
              $ref: '#/components/schemas/CompositeAggregateKey'
            size:
              description: The number of composite buckets that should be returned.
              type: number
            sources:
              description: |-
                The value sources used to build composite buckets.
                Keys are returned in the order of the `sources` definition.
              type: array
              items:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/CompositeAggregationSource'
    CompositeAggregationSource:
      type: object
      properties:
        terms:
          $ref: '#/components/schemas/CompositeTermsAggregation'
        histogram:
          $ref: '#/components/schemas/CompositeHistogramAggregation'
        date_histogram:
          $ref: '#/components/schemas/CompositeDateHistogramAggregation'
        geotile_grid:
          $ref: '#/components/schemas/CompositeGeoTileGridAggregation'
    CompositeTermsAggregation:
      allOf:
        - $ref: '#/components/schemas/CompositeAggregationBase'
        - type: object
    CompositeAggregationBase:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
        missing_bucket:
          type: boolean
        missing_order:
          $ref: '#/components/schemas/MissingOrder'
        script:
          $ref: '_common.yaml#/components/schemas/Script'
        value_type:
          $ref: '#/components/schemas/ValueType'
        order:
          $ref: '_common.yaml#/components/schemas/SortOrder'
    MissingOrder:
      type: string
      enum:
        - first
        - last
        - default
    ValueType:
      type: string
      enum:
        - string
        - long
        - double
        - number
        - date
        - date_nanos
        - ip
        - numeric
        - geo_point
        - boolean
    CompositeHistogramAggregation:
      allOf:
        - $ref: '#/components/schemas/CompositeAggregationBase'
        - type: object
          properties:
            interval:
              type: number
          required:
            - interval
    CompositeDateHistogramAggregation:
      allOf:
        - $ref: '#/components/schemas/CompositeAggregationBase'
        - type: object
          properties:
            format:
              type: string
            calendar_interval:
              $ref: '_common.yaml#/components/schemas/DurationLarge'
            fixed_interval:
              $ref: '_common.yaml#/components/schemas/DurationLarge'
            offset:
              $ref: '_common.yaml#/components/schemas/Duration'
            time_zone:
              $ref: '_common.yaml#/components/schemas/TimeZone'
    CompositeGeoTileGridAggregation:
      allOf:
        - $ref: '#/components/schemas/CompositeAggregationBase'
        - type: object
          properties:
            precision:
              type: number
            bounds:
              $ref: '_common.yaml#/components/schemas/GeoBounds'
    CumulativeCardinalityAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    CumulativeSumAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    DateHistogramAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            calendar_interval:
              $ref: '#/components/schemas/CalendarInterval'
            extended_bounds:
              $ref: '#/components/schemas/ExtendedBoundsFieldDateMath'
            hard_bounds:
              $ref: '#/components/schemas/ExtendedBoundsFieldDateMath'
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            fixed_interval:
              $ref: '_common.yaml#/components/schemas/Duration'
            format:
              description: |-
                The date format used to format `key_as_string` in the response.
                If no `format` is specified, the first date format specified in the field mapping is used.
              type: string
            interval:
              $ref: '_common.yaml#/components/schemas/Duration'
            min_doc_count:
              description: |-
                Only returns buckets that have `min_doc_count` number of documents.
                By default, all buckets between the first bucket that matches documents and the last one are returned.
              type: number
            missing:
              $ref: '_common.yaml#/components/schemas/DateTime'
            offset:
              $ref: '_common.yaml#/components/schemas/Duration'
            order:
              $ref: '#/components/schemas/AggregateOrder'
            params:
              type: object
              additionalProperties:
                type: object
            script:
              $ref: '_common.yaml#/components/schemas/Script'
            time_zone:
              $ref: '_common.yaml#/components/schemas/TimeZone'
            keyed:
              description: Set to `true` to associate a unique string key with each bucket and return the ranges as a hash rather than
                an array.
              type: boolean
    CalendarInterval:
      type: string
      enum:
        - second
        - minute
        - hour
        - day
        - week
        - month
        - quarter
        - year
    ExtendedBoundsFieldDateMath:
      type: object
      properties:
        max:
          $ref: '#/components/schemas/FieldDateMath'
        min:
          $ref: '#/components/schemas/FieldDateMath'
      required:
        - max
        - min
    FieldDateMath:
      description: |-
        A date range limit, represented either as a DateMath expression or a number expressed
        according to the target field's precision.
      oneOf:
        - $ref: '_common.yaml#/components/schemas/DateMath'
        - type: number
    AggregateOrder:
      oneOf:
        - type: object
          additionalProperties:
            $ref: '_common.yaml#/components/schemas/SortOrder'
          minProperties: 1
          maxProperties: 1
        - type: array
          items:
            type: object
            additionalProperties:
              $ref: '_common.yaml#/components/schemas/SortOrder'
            minProperties: 1
            maxProperties: 1
    DateRangeAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            format:
              description: The date format used to format `from` and `to` in the response.
              type: string
            missing:
              $ref: '#/components/schemas/Missing'
            ranges:
              description: Array of date ranges.
              type: array
              items:
                $ref: '#/components/schemas/DateRangeExpression'
            time_zone:
              $ref: '_common.yaml#/components/schemas/TimeZone'
            keyed:
              description: Set to `true` to associate a unique string key with each bucket and returns the ranges as a hash rather
                than an array.
              type: boolean
    DateRangeExpression:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/FieldDateMath'
        key:
          description: Custom key to return the range with.
          type: string
        to:
          $ref: '#/components/schemas/FieldDateMath'
    DerivativeAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    DiversifiedSamplerAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            execution_hint:
              $ref: '#/components/schemas/SamplerAggregationExecutionHint'
            max_docs_per_value:
              description: Limits how many documents are permitted per choice of de-duplicating value.
              type: number
            script:
              $ref: '_common.yaml#/components/schemas/Script'
            shard_size:
              description: Limits how many top-scoring documents are collected in the sample processed on each shard.
              type: number
            field:
              $ref: '_common.yaml#/components/schemas/Field'
    SamplerAggregationExecutionHint:
      type: string
      enum:
        - map
        - global_ordinals
        - bytes_hash
    ExtendedStatsAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            sigma:
              description: The number of standard deviations above/below the mean to display.
              type: number
    ExtendedStatsBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            sigma:
              description: The number of standard deviations above/below the mean to display.
              type: number
    FrequentItemSetsAggregation:
      type: object
      properties:
        fields:
          description: Fields to analyze.
          type: array
          items:
            $ref: '#/components/schemas/FrequentItemSetsField'
        minimum_set_size:
          description: The minimum size of one item set.
          type: number
        minimum_support:
          description: The minimum support of one item set.
          type: number
        size:
          description: The number of top item sets to return.
          type: number
        filter:
          $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
      required:
        - fields
    FrequentItemSetsField:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
        exclude:
          $ref: '#/components/schemas/TermsExclude'
        include:
          $ref: '#/components/schemas/TermsInclude'
      required:
        - field
    TermsExclude:
      oneOf:
        - type: string
        - type: array
          items:
            type: string
    TermsInclude:
      oneOf:
        - type: string
        - type: array
          items:
            type: string
        - $ref: '#/components/schemas/TermsPartition'
    TermsPartition:
      type: object
      properties:
        num_partitions:
          description: The number of partitions.
          type: number
        partition:
          description: The partition number for this request.
          type: number
      required:
        - num_partitions
        - partition
    FiltersAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            filters:
              $ref: '#/components/schemas/BucketsQueryContainer'
            other_bucket:
              description: Set to `true` to add a bucket to the response which will contain all documents that do not match any of the
                given filters.
              type: boolean
            other_bucket_key:
              description: The key with which the other bucket is returned.
              type: string
            keyed:
              description: |-
                By default, the named filters aggregation returns the buckets as an object.
                Set to `false` to return the buckets as an array of objects.
              type: boolean
    BucketsQueryContainer:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
        - type: array
          items:
            $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
    GeoBoundsAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            wrap_longitude:
              description: Specifies whether the bounding box should be allowed to overlap the international date line.
              type: boolean
    GeoCentroidAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            count:
              type: number
            location:
              $ref: '_common.yaml#/components/schemas/GeoLocation'
    GeoDistanceAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            distance_type:
              $ref: '_common.yaml#/components/schemas/GeoDistanceType'
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            origin:
              $ref: '_common.yaml#/components/schemas/GeoLocation'
            ranges:
              description: An array of ranges used to bucket documents.
              type: array
              items:
                $ref: '#/components/schemas/AggregationRange'
            unit:
              $ref: '_common.yaml#/components/schemas/DistanceUnit'
    AggregationRange:
      type: object
      properties:
        from:
          description: Start of the range (inclusive).
          oneOf:
            - type: number
            - type: string
            - nullable: true
              type: string
        key:
          description: Custom key to return the range with.
          type: string
        to:
          description: End of the range (exclusive).
          oneOf:
            - type: number
            - type: string
            - nullable: true
              type: string
    GeoHashGridAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            bounds:
              $ref: '_common.yaml#/components/schemas/GeoBounds'
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            precision:
              $ref: '_common.yaml#/components/schemas/GeoHashPrecision'
            shard_size:
              description: |-
                Allows for more accurate counting of the top cells returned in the final result the aggregation.
                Defaults to returning `max(10,(size x number-of-shards))` buckets from each shard.
              type: number
            size:
              description: The maximum number of geohash buckets to return.
              type: number
    GeoLineAggregation:
      type: object
      properties:
        point:
          $ref: '#/components/schemas/GeoLinePoint'
        sort:
          $ref: '#/components/schemas/GeoLineSort'
        include_sort:
          description: When `true`, returns an additional array of the sort values in the feature properties.
          type: boolean
        sort_order:
          $ref: '_common.yaml#/components/schemas/SortOrder'
        size:
          description: |-
            The maximum length of the line represented in the aggregation.
            Valid sizes are between 1 and 10000.
          type: number
      required:
        - point
        - sort
    GeoLinePoint:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
      required:
        - field
    GeoLineSort:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
      required:
        - field
    GeoTileGridAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            precision:
              $ref: '_common.yaml#/components/schemas/GeoTilePrecision'
            shard_size:
              description: |-
                Allows for more accurate counting of the top cells returned in the final result the aggregation.
                Defaults to returning `max(10,(size x number-of-shards))` buckets from each shard.
              type: number
            size:
              description: The maximum number of buckets to return.
              type: number
            bounds:
              $ref: '_common.yaml#/components/schemas/GeoBounds'
    GeohexGridAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            precision:
              description: |-
                Integer zoom of the key used to defined cells or buckets
                in the results. Value should be between 0-15.
              type: number
            bounds:
              $ref: '_common.yaml#/components/schemas/GeoBounds'
            size:
              description: Maximum number of buckets to return.
              type: number
            shard_size:
              description: Number of buckets returned from each shard.
              type: number
          required:
            - field
    GlobalAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
    HistogramAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            extended_bounds:
              $ref: '#/components/schemas/ExtendedBoundsdouble'
            hard_bounds:
              $ref: '#/components/schemas/ExtendedBoundsdouble'
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            interval:
              description: |-
                The interval for the buckets.
                Must be a positive decimal.
              type: number
            min_doc_count:
              description: |-
                Only returns buckets that have `min_doc_count` number of documents.
                By default, the response will fill gaps in the histogram with empty buckets.
              type: number
            missing:
              description: |-
                The value to apply to documents that do not have a value.
                By default, documents without a value are ignored.
              type: number
            offset:
              description: |-
                By default, the bucket keys start with 0 and then continue in even spaced steps of `interval`.
                The bucket boundaries can be shifted by using the `offset` option.
              type: number
            order:
              $ref: '#/components/schemas/AggregateOrder'
            script:
              $ref: '_common.yaml#/components/schemas/Script'
            format:
              type: string
            keyed:
              description: If `true`, returns buckets as a hash instead of an array, keyed by the bucket keys.
              type: boolean
    ExtendedBoundsdouble:
      type: object
      properties:
        max:
          description: Maximum value for the bound.
          type: number
        min:
          description: Minimum value for the bound.
          type: number
      required:
        - max
        - min
    IpRangeAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            ranges:
              description: Array of IP ranges.
              type: array
              items:
                $ref: '#/components/schemas/IpRangeAggregationRange'
    IpRangeAggregationRange:
      type: object
      properties:
        from:
          description: Start of the range.
          oneOf:
            - type: string
            - nullable: true
              type: string
        mask:
          description: IP range defined as a CIDR mask.
          type: string
        to:
          description: End of the range.
          oneOf:
            - type: string
            - nullable: true
              type: string
    IpPrefixAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            prefix_length:
              description: |-
                Length of the network prefix. For IPv4 addresses the accepted range is [0, 32].
                For IPv6 addresses the accepted range is [0, 128].
              type: number
            is_ipv6:
              description: Defines whether the prefix applies to IPv6 addresses.
              type: boolean
            append_prefix_length:
              description: Defines whether the prefix length is appended to IP address keys in the response.
              type: boolean
            keyed:
              description: Defines whether buckets are returned as a hash rather than an array in the response.
              type: boolean
            min_doc_count:
              description: Minimum number of documents in a bucket for it to be included in the response.
              type: number
          required:
            - field
            - prefix_length
    InferenceAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            model_id:
              $ref: '_common.yaml#/components/schemas/Name'
            inference_config:
              $ref: '#/components/schemas/InferenceConfigContainer'
          required:
            - model_id
    InferenceConfigContainer:
      type: object
      properties:
        regression:
          $ref: 'ml._common.yaml#/components/schemas/RegressionInferenceOptions'
        classification:
          $ref: 'ml._common.yaml#/components/schemas/ClassificationInferenceOptions'
      minProperties: 1
      maxProperties: 1
    MatrixStatsAggregation:
      allOf:
        - $ref: '#/components/schemas/MatrixAggregation'
        - type: object
          properties:
            mode:
              $ref: '_common.yaml#/components/schemas/SortMode'
    MatrixAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            fields:
              $ref: '_common.yaml#/components/schemas/Fields'
            missing:
              description: |-
                The value to apply to documents that do not have a value.
                By default, documents without a value are ignored.
              type: object
              additionalProperties:
                type: number
    MaxAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    MaxBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    MedianAbsoluteDeviationAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            compression:
              description: Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling
                control of memory usage and approximation error.
              type: number
    MinAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    MinBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    MissingAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            missing:
              $ref: '#/components/schemas/Missing'
    MovingAverageAggregation:
      discriminator:
        propertyName: model
      oneOf:
        - $ref: '#/components/schemas/LinearMovingAverageAggregation'
        - $ref: '#/components/schemas/SimpleMovingAverageAggregation'
        - $ref: '#/components/schemas/EwmaMovingAverageAggregation'
        - $ref: '#/components/schemas/HoltMovingAverageAggregation'
        - $ref: '#/components/schemas/HoltWintersMovingAverageAggregation'
    LinearMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - linear
            settings:
              $ref: '_common.yaml#/components/schemas/EmptyObject'
          required:
            - model
            - settings
    MovingAverageAggregationBase:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            minimize:
              type: boolean
            predict:
              type: number
            window:
              type: number
    SimpleMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - simple
            settings:
              $ref: '_common.yaml#/components/schemas/EmptyObject'
          required:
            - model
            - settings
    EwmaMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - ewma
            settings:
              $ref: '#/components/schemas/EwmaModelSettings'
          required:
            - model
            - settings
    EwmaModelSettings:
      type: object
      properties:
        alpha:
          type: number
    HoltMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - holt
            settings:
              $ref: '#/components/schemas/HoltLinearModelSettings'
          required:
            - model
            - settings
    HoltLinearModelSettings:
      type: object
      properties:
        alpha:
          type: number
        beta:
          type: number
    HoltWintersMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - holt_winters
            settings:
              $ref: '#/components/schemas/HoltWintersModelSettings'
          required:
            - model
            - settings
    HoltWintersModelSettings:
      type: object
      properties:
        alpha:
          type: number
        beta:
          type: number
        gamma:
          type: number
        pad:
          type: boolean
        period:
          type: number
        type:
          $ref: '#/components/schemas/HoltWintersType'
    HoltWintersType:
      type: string
      enum:
        - add
        - mult
    MovingPercentilesAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            window:
              description: The size of window to "slide" across the histogram.
              type: number
            shift:
              description: |-
                By default, the window consists of the last n values excluding the current bucket.
                Increasing `shift` by 1, moves the starting window position by 1 to the right.
              type: number
            keyed:
              type: boolean
    MovingFunctionAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            script:
              description: The script that should be executed on each window of data.
              type: string
            shift:
              description: |-
                By default, the window consists of the last n values excluding the current bucket.
                Increasing `shift` by 1, moves the starting window position by 1 to the right.
              type: number
            window:
              description: The size of window to "slide" across the histogram.
              type: number
    MultiTermsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            collect_mode:
              $ref: '#/components/schemas/TermsAggregationCollectMode'
            order:
              $ref: '#/components/schemas/AggregateOrder'
            min_doc_count:
              description: The minimum number of documents in a bucket for it to be returned.
              type: number
            shard_min_doc_count:
              description: The minimum number of documents in a bucket on each shard for it to be returned.
              type: number
            shard_size:
              description: >-
                The number of candidate terms produced by each shard.

                By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
              type: number
            show_term_doc_count_error:
              description: Calculates the doc count error on per term basis.
              type: boolean
            size:
              description: The number of term buckets should be returned out of the overall terms list.
              type: number
            terms:
              description: The field from which to generate sets of terms.
              type: array
              items:
                $ref: '#/components/schemas/MultiTermLookup'
          required:
            - terms
    TermsAggregationCollectMode:
      type: string
      enum:
        - depth_first
        - breadth_first
    MultiTermLookup:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
        missing:
          $ref: '#/components/schemas/Missing'
      required:
        - field
    NestedAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            path:
              $ref: '_common.yaml#/components/schemas/Field'
    NormalizeAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            method:
              $ref: '#/components/schemas/NormalizeMethod'
    NormalizeMethod:
      type: string
      enum:
        - rescale_0_1
        - rescale_0_100
        - percent_of_sum
        - mean
        - z-score
        - softmax
    ParentAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            type:
              $ref: '_common.yaml#/components/schemas/RelationName'
    PercentileRanksAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            keyed:
              description: >-
                By default, the aggregation associates a unique string key with each bucket and returns the ranges as a
                hash rather than an array.

                Set to `false` to disable this behavior.
              type: boolean
            values:
              description: An array of values for which to calculate the percentile ranks.
              oneOf:
                - type: array
                  items:
                    type: number
                - nullable: true
                  type: string
            hdr:
              $ref: '#/components/schemas/HdrMethod'
            tdigest:
              $ref: '#/components/schemas/TDigest'
    HdrMethod:
      type: object
      properties:
        number_of_significant_value_digits:
          description: Specifies the resolution of values for the histogram in number of significant digits.
          type: number
    TDigest:
      type: object
      properties:
        compression:
          description: Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling
            control of memory usage and approximation error.
          type: number
    PercentilesAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            keyed:
              description: >-
                By default, the aggregation associates a unique string key with each bucket and returns the ranges as a
                hash rather than an array.

                Set to `false` to disable this behavior.
              type: boolean
            percents:
              description: The percentiles to calculate.
              type: array
              items:
                type: number
            hdr:
              $ref: '#/components/schemas/HdrMethod'
            tdigest:
              $ref: '#/components/schemas/TDigest'
    PercentilesBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            percents:
              description: The list of percentiles to calculate.
              type: array
              items:
                type: number
    RangeAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            missing:
              description: |-
                The value to apply to documents that do not have a value.
                By default, documents without a value are ignored.
              type: number
            ranges:
              description: An array of ranges used to bucket documents.
              type: array
              items:
                $ref: '#/components/schemas/AggregationRange'
            script:
              $ref: '_common.yaml#/components/schemas/Script'
            keyed:
              description: Set to `true` to associate a unique string key with each bucket and return the ranges as a hash rather than
                an array.
              type: boolean
            format:
              type: string
    RareTermsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            exclude:
              $ref: '#/components/schemas/TermsExclude'
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            include:
              $ref: '#/components/schemas/TermsInclude'
            max_doc_count:
              description: The maximum number of documents a term should appear in.
              type: number
            missing:
              $ref: '#/components/schemas/Missing'
            precision:
              description: |-
                The precision of the internal CuckooFilters.
                Smaller precision leads to better approximation, but higher memory usage.
              type: number
            value_type:
              type: string
    RateAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            unit:
              $ref: '#/components/schemas/CalendarInterval'
            mode:
              $ref: '#/components/schemas/RateMode'
    RateMode:
      type: string
      enum:
        - sum
        - value_count
    ReverseNestedAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            path:
              $ref: '_common.yaml#/components/schemas/Field'
    SamplerAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            shard_size:
              description: Limits how many top-scoring documents are collected in the sample processed on each shard.
              type: number
    ScriptedMetricAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            combine_script:
              $ref: '_common.yaml#/components/schemas/Script'
            init_script:
              $ref: '_common.yaml#/components/schemas/Script'
            map_script:
              $ref: '_common.yaml#/components/schemas/Script'
            params:
              description: |-
                A global object with script parameters for `init`, `map` and `combine` scripts.
                It is shared between the scripts.
              type: object
              additionalProperties:
                type: object
            reduce_script:
              $ref: '_common.yaml#/components/schemas/Script'
    SerialDifferencingAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            lag:
              description: |-
                The historical bucket to subtract from the current value.
                Must be a positive, non-zero integer.
              type: number
    SignificantTermsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            background_filter:
              $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
            chi_square:
              $ref: '#/components/schemas/ChiSquareHeuristic'
            exclude:
              $ref: '#/components/schemas/TermsExclude'
            execution_hint:
              $ref: '#/components/schemas/TermsAggregationExecutionHint'
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            gnd:
              $ref: '#/components/schemas/GoogleNormalizedDistanceHeuristic'
            include:
              $ref: '#/components/schemas/TermsInclude'
            jlh:
              $ref: '_common.yaml#/components/schemas/EmptyObject'
            min_doc_count:
              description: Only return terms that are found in more than `min_doc_count` hits.
              type: number
            mutual_information:
              $ref: '#/components/schemas/MutualInformationHeuristic'
            percentage:
              $ref: '#/components/schemas/PercentageScoreHeuristic'
            script_heuristic:
              $ref: '#/components/schemas/ScriptedHeuristic'
            shard_min_doc_count:
              description: >-
                Regulates the certainty a shard has if the term should actually be added to the candidate list or not
                with respect to the `min_doc_count`.

                Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.
              type: number
            shard_size:
              description: >-
                Can be used to control the volumes of candidate terms produced by each shard.

                By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
              type: number
            size:
              description: The number of buckets returned out of the overall terms list.
              type: number
    ChiSquareHeuristic:
      type: object
      properties:
        background_is_superset:
          description: Set to `false` if you defined a custom background filter that represents a different set of documents that
            you want to compare to.
          type: boolean
        include_negatives:
          description: Set to `false` to filter out the terms that appear less often in the subset than in documents outside the
            subset.
          type: boolean
      required:
        - background_is_superset
        - include_negatives
    TermsAggregationExecutionHint:
      type: string
      enum:
        - map
        - global_ordinals
        - global_ordinals_hash
        - global_ordinals_low_cardinality
    GoogleNormalizedDistanceHeuristic:
      type: object
      properties:
        background_is_superset:
          description: Set to `false` if you defined a custom background filter that represents a different set of documents that
            you want to compare to.
          type: boolean
    MutualInformationHeuristic:
      type: object
      properties:
        background_is_superset:
          description: Set to `false` if you defined a custom background filter that represents a different set of documents that
            you want to compare to.
          type: boolean
        include_negatives:
          description: Set to `false` to filter out the terms that appear less often in the subset than in documents outside the
            subset.
          type: boolean
    PercentageScoreHeuristic:
      type: object
    ScriptedHeuristic:
      type: object
      properties:
        script:
          $ref: '_common.yaml#/components/schemas/Script'
      required:
        - script
    SignificantTextAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            background_filter:
              $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
            chi_square:
              $ref: '#/components/schemas/ChiSquareHeuristic'
            exclude:
              $ref: '#/components/schemas/TermsExclude'
            execution_hint:
              $ref: '#/components/schemas/TermsAggregationExecutionHint'
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            filter_duplicate_text:
              description: Whether to out duplicate text to deal with noisy data.
              type: boolean
            gnd:
              $ref: '#/components/schemas/GoogleNormalizedDistanceHeuristic'
            include:
              $ref: '#/components/schemas/TermsInclude'
            jlh:
              $ref: '_common.yaml#/components/schemas/EmptyObject'
            min_doc_count:
              description: Only return values that are found in more than `min_doc_count` hits.
              type: number
            mutual_information:
              $ref: '#/components/schemas/MutualInformationHeuristic'
            percentage:
              $ref: '#/components/schemas/PercentageScoreHeuristic'
            script_heuristic:
              $ref: '#/components/schemas/ScriptedHeuristic'
            shard_min_doc_count:
              description: >-
                Regulates the certainty a shard has if the values should actually be added to the candidate list or not
                with respect to the min_doc_count.

                Values will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.
              type: number
            shard_size:
              description: >-
                The number of candidate terms produced by each shard.

                By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
              type: number
            size:
              description: The number of buckets returned out of the overall terms list.
              type: number
            source_fields:
              $ref: '_common.yaml#/components/schemas/Fields'
    StatsAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    StatsBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    StringStatsAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            show_distribution:
              description: Shows the probability distribution for all characters.
              type: boolean
    SumAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    SumBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    TermsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            collect_mode:
              $ref: '#/components/schemas/TermsAggregationCollectMode'
            exclude:
              $ref: '#/components/schemas/TermsExclude'
            execution_hint:
              $ref: '#/components/schemas/TermsAggregationExecutionHint'
            field:
              $ref: '_common.yaml#/components/schemas/Field'
            include:
              $ref: '#/components/schemas/TermsInclude'
            min_doc_count:
              description: Only return values that are found in more than `min_doc_count` hits.
              type: number
            missing:
              $ref: '#/components/schemas/Missing'
            missing_order:
              $ref: '#/components/schemas/MissingOrder'
            missing_bucket:
              type: boolean
            value_type:
              description: Coerced unmapped fields into the specified type.
              type: string
            order:
              $ref: '#/components/schemas/AggregateOrder'
            script:
              $ref: '_common.yaml#/components/schemas/Script'
            shard_size:
              description: >-
                The number of candidate terms produced by each shard.

                By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
              type: number
            show_term_doc_count_error:
              description: Set to `true` to return the `doc_count_error_upper_bound`, which is an upper bound to the error on the
                `doc_count` returned by each shard.
              type: boolean
            size:
              description: The number of buckets returned out of the overall terms list.
              type: number
            format:
              type: string
    TopHitsAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            docvalue_fields:
              $ref: '_common.yaml#/components/schemas/Fields'
            explain:
              description: If `true`, returns detailed information about score computation as part of a hit.
              type: boolean
            from:
              description: Starting document offset.
              type: number
            highlight:
              $ref: '_core.search.yaml#/components/schemas/Highlight'
            script_fields:
              description: Returns the result of one or more script evaluations for each hit.
              type: object
              additionalProperties:
                $ref: '_common.yaml#/components/schemas/ScriptField'
            size:
              description: The maximum number of top matching hits to return per bucket.
              type: number
            sort:
              $ref: '_common.yaml#/components/schemas/Sort'
            _source:
              $ref: '_core.search.yaml#/components/schemas/SourceConfig'
            stored_fields:
              $ref: '_common.yaml#/components/schemas/Fields'
            track_scores:
              description: If `true`, calculates and returns document scores, even if the scores are not used for sorting.
              type: boolean
            version:
              description: If `true`, returns document version as part of a hit.
              type: boolean
            seq_no_primary_term:
              description: If `true`, returns sequence number and primary term of the last modification of each hit.
              type: boolean
    TTestAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            a:
              $ref: '#/components/schemas/TestPopulation'
            b:
              $ref: '#/components/schemas/TestPopulation'
            type:
              $ref: '#/components/schemas/TTestType'
    TestPopulation:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
        script:
          $ref: '_common.yaml#/components/schemas/Script'
        filter:
          $ref: '_common.query_dsl.yaml#/components/schemas/QueryContainer'
      required:
        - field
    TTestType:
      type: string
      enum:
        - paired
        - homoscedastic
        - heteroscedastic
    TopMetricsAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            metrics:
              description: The fields of the top document to return.
              oneOf:
                - $ref: '#/components/schemas/TopMetricsValue'
                - type: array
                  items:
                    $ref: '#/components/schemas/TopMetricsValue'
            size:
              description: The number of top documents from which to return metrics.
              type: number
            sort:
              $ref: '_common.yaml#/components/schemas/Sort'
    TopMetricsValue:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
      required:
        - field
    ValueCountAggregation:
      allOf:
        - $ref: '#/components/schemas/FormattableMetricAggregation'
        - type: object
    FormattableMetricAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            format:
              type: string
    WeightedAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            format:
              description: A numeric response formatter.
              type: string
            value:
              $ref: '#/components/schemas/WeightedAverageValue'
            value_type:
              $ref: '#/components/schemas/ValueType'
            weight:
              $ref: '#/components/schemas/WeightedAverageValue'
    WeightedAverageValue:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
        missing:
          description: A value or weight to use if the field is missing.
          type: number
        script:
          $ref: '_common.yaml#/components/schemas/Script'
    VariableWidthHistogramAggregation:
      type: object
      properties:
        field:
          $ref: '_common.yaml#/components/schemas/Field'
        buckets:
          description: The target number of buckets.
          type: number
        shard_size:
          description: |-
            The number of buckets that the coordinating node will request from each shard.
            Defaults to `buckets * 50`.
          type: number
        initial_buffer:
          description: >-
            Specifies the number of individual documents that will be stored in memory on a shard before the initial
            bucketing algorithm is run.

            Defaults to `min(10 * shard_size, 50000)`.
          type: number
