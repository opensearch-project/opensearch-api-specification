{
    "openapi": "3.0.2",
    "info": {
        "title": "OpenSearch",
        "version": "2021-11-23"
    },
    "paths": {
        "/": {
            "get": {
                "description": "Returns basic information about the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "Info",
                "responses": {
                    "200": {
                        "description": "Info 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "info",
                "x-version-added": "1.0"
            }
        },
        "/_aliases": {
            "post": {
                "description": "Updates index aliases.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/alias/"
                },
                "operationId": "IndicesUpdateAliases",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesUpdateAliases_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesUpdateAliases 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesUpdateAliasesResponseContent"
                                },
                                "examples": {
                                    "IndicesUpdateAliases_example1": {
                                        "summary": "Examples for Post Aliases Operation.",
                                        "description": "",
                                        "value": {
                                            "acknowledged": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.update_aliases",
                "x-version-added": "1.0"
            }
        },
        "/_cat/indices": {
            "get": {
                "description": "Returns information about indices: number of primaries and replicas, document counts, disk size, ...",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-indices/"
                },
                "operationId": "CatIndices",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "health",
                        "in": "query",
                        "description": "Health status ('green', 'yellow', or 'red') to filter only indices matching the specified health status.",
                        "schema": {
                            "$ref": "#/components/schemas/Health"
                        }
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "pri",
                        "in": "query",
                        "description": "Set to true to return stats only for primary shards.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set to true to return stats only for primary shards."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    },
                    {
                        "name": "include_unloaded_segments",
                        "in": "query",
                        "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatIndices 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatIndicesOutputPayload"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cat.indices",
                "x-version-added": "1.0"
            }
        },
        "/_cat/indices/{index}": {
            "get": {
                "description": "Returns information about indices: number of primaries and replicas, document counts, disk size, ...",
                "operationId": "CatIndices_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to limit the returned information.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of indices to limit the returned information.",
                            "x-data-type": "list"
                        },
                        "required": true,
                        "examples": {
                            "CatIndices_WithIndex_example1": {
                                "summary": "Examples for Cat indices with Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "health",
                        "in": "query",
                        "description": "Health status ('green', 'yellow', or 'red') to filter only indices matching the specified health status.",
                        "schema": {
                            "$ref": "#/components/schemas/Health"
                        }
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "pri",
                        "in": "query",
                        "description": "Set to true to return stats only for primary shards.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set to true to return stats only for primary shards."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    },
                    {
                        "name": "include_unloaded_segments",
                        "in": "query",
                        "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatIndices_WithIndex 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatIndices_WithIndexOutputPayload"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cat.indices",
                "x-version-added": "1.0"
            }
        },
        "/_cat/nodes": {
            "get": {
                "description": "Returns basic statistics about performance of cluster nodes.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-nodes/"
                },
                "operationId": "CatNodes",
                "parameters": [
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "full_id",
                        "in": "query",
                        "description": "Return the full node ID instead of the shortened version.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return the full node ID instead of the shortened version."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatNodes 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatNodesOutputPayload"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cat.nodes",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/settings": {
            "get": {
                "description": "Returns cluster settings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-settings/"
                },
                "operationId": "ClusterGetSettings",
                "parameters": [
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default clusters setting.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default clusters setting."
                        },
                        "examples": {
                            "ClusterGetSettings_example1": {
                                "summary": "Examples for Get cluster settings Operation.",
                                "description": "",
                                "value": true
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterGetSettings 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterGetSettingsResponseContent"
                                },
                                "examples": {
                                    "ClusterGetSettings_example1": {
                                        "summary": "Examples for Get cluster settings Operation.",
                                        "description": "",
                                        "value": {}
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cluster.get_settings",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Updates the cluster settings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-settings/"
                },
                "operationId": "ClusterPutSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterPutSettings_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterPutSettings 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterPutSettingsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cluster.put_settings",
                "x-version-added": "1.0"
            }
        },
        "/_remotestore/_restore": {
            "post": {
                "description": "Restores from remote store.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/opensearch/remote/#restoring-from-a-backup"
                },
                "operationId": "RemoteStoreRestore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoteStoreRestore_BodyParams"
                            },
                            "examples": {
                                "RemoteStoreRestore_example1": {
                                    "summary": "Examples for Post Remote Storage Restore Operation.",
                                    "description": "",
                                    "value": {
                                        "indices": [
                                            "books"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RemoteStoreRestore 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoteStoreRestoreResponseContent"
                                },
                                "examples": {
                                    "RemoteStoreRestore_example1": {
                                        "summary": "Examples for Post Remote Storage Restore Operation.",
                                        "description": "",
                                        "value": {
                                            "remote_store": {
                                                "indices": [
                                                    "books"
                                                ],
                                                "shards": {
                                                    "total": 1,
                                                    "failed": 0,
                                                    "successful": 1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "remote_store.restore",
                "x-version-added": "1.0"
            }
        },
        "/_search": {
            "get": {
                "description": "Returns results matching a query.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/search/"
                },
                "operationId": "Search_Get",
                "parameters": [
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "docvalue_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit."
                        },
                        "explode": true
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of hits to return.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of hits to return.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "suggest_field",
                        "in": "query",
                        "description": "Specify which field to use for suggestions.",
                        "schema": {
                            "type": "string",
                            "description": "Specify which field to use for suggestions."
                        }
                    },
                    {
                        "name": "suggest_mode",
                        "in": "query",
                        "description": "Specify suggest mode.",
                        "schema": {
                            "$ref": "#/components/schemas/SuggestMode"
                        }
                    },
                    {
                        "name": "suggest_size",
                        "in": "query",
                        "description": "How many suggestions to return in response.",
                        "schema": {
                            "type": "integer",
                            "description": "How many suggestions to return in response.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "suggest_text",
                        "in": "query",
                        "description": "The source text for which the suggestions should be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The source text for which the suggestions should be returned."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "track_scores",
                        "in": "query",
                        "description": "Whether to calculate and return scores even if they are not used for sorting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to calculate and return scores even if they are not used for sorting."
                        }
                    },
                    {
                        "name": "track_total_hits",
                        "in": "query",
                        "description": "Indicate if the number of documents that match the query should be tracked.",
                        "schema": {
                            "type": "boolean",
                            "description": "Indicate if the number of documents that match the query should be tracked."
                        }
                    },
                    {
                        "name": "allow_partial_search_results",
                        "in": "query",
                        "description": "Indicate if an error should be returned if there is a partial search failure or timeout.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicate if an error should be returned if there is a partial search failure or timeout."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "seq_no_primary_term",
                        "in": "query",
                        "description": "Specify whether to return sequence number and primary term of the last modification of each hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return sequence number and primary term of the last modification of each hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "batched_reduce_size",
                        "in": "query",
                        "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                        "schema": {
                            "type": "integer",
                            "default": 512,
                            "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search_Get 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search_GetResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "search",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns results matching a query.",
                "operationId": "Search_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Search_BodyParams"
                            },
                            "examples": {
                                "Search_Post_example1": {
                                    "summary": "Examples for Post Search Operation.",
                                    "description": "",
                                    "value": {
                                        "query": {
                                            "match_all": {}
                                        },
                                        "fields": [
                                            "*"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "docvalue_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit."
                        },
                        "explode": true
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        },
                        "examples": {
                            "Search_Post_example1": {
                                "summary": "Examples for Post Search Operation.",
                                "description": "",
                                "value": "1d"
                            }
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of hits to return.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of hits to return.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "suggest_field",
                        "in": "query",
                        "description": "Specify which field to use for suggestions.",
                        "schema": {
                            "type": "string",
                            "description": "Specify which field to use for suggestions."
                        }
                    },
                    {
                        "name": "suggest_mode",
                        "in": "query",
                        "description": "Specify suggest mode.",
                        "schema": {
                            "$ref": "#/components/schemas/SuggestMode"
                        }
                    },
                    {
                        "name": "suggest_size",
                        "in": "query",
                        "description": "How many suggestions to return in response.",
                        "schema": {
                            "type": "integer",
                            "description": "How many suggestions to return in response.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "suggest_text",
                        "in": "query",
                        "description": "The source text for which the suggestions should be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The source text for which the suggestions should be returned."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "track_scores",
                        "in": "query",
                        "description": "Whether to calculate and return scores even if they are not used for sorting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to calculate and return scores even if they are not used for sorting."
                        }
                    },
                    {
                        "name": "track_total_hits",
                        "in": "query",
                        "description": "Indicate if the number of documents that match the query should be tracked.",
                        "schema": {
                            "type": "boolean",
                            "description": "Indicate if the number of documents that match the query should be tracked."
                        }
                    },
                    {
                        "name": "allow_partial_search_results",
                        "in": "query",
                        "description": "Indicate if an error should be returned if there is a partial search failure or timeout.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicate if an error should be returned if there is a partial search failure or timeout."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "seq_no_primary_term",
                        "in": "query",
                        "description": "Specify whether to return sequence number and primary term of the last modification of each hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return sequence number and primary term of the last modification of each hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "batched_reduce_size",
                        "in": "query",
                        "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                        "schema": {
                            "type": "integer",
                            "default": 512,
                            "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search_Post 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search_PostResponseContent"
                                },
                                "examples": {
                                    "Search_Post_example1": {
                                        "summary": "Examples for Post Search Operation.",
                                        "description": "",
                                        "value": {
                                            "timed_out": false,
                                            "_shards": {
                                                "total": 1,
                                                "successful": 1,
                                                "skipped": 0,
                                                "failed": 0
                                            },
                                            "hits": {
                                                "total": {
                                                    "value": 0,
                                                    "relation": "eq"
                                                },
                                                "hits": []
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "search",
                "x-version-added": "1.0"
            }
        },
        "/_settings": {
            "get": {
                "description": "Returns settings for one or more indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/get-settings/"
                },
                "operationId": "IndicesGetSettings",
                "parameters": [
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetSettings 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesGetSettingsOutputPayload"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.get_settings",
                "x-version-added": "1.0"
            }
        },
        "/_settings/{name}": {
            "get": {
                "description": "Returns settings for one or more indices.",
                "operationId": "IndicesGetSettings_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of settings.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of settings.",
                            "x-data-type": "list"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetSettings_WithName 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesGetSettings_WithNameOutputPayload"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.get_settings",
                "x-version-added": "1.0"
            }
        },
        "/{index}": {
            "delete": {
                "description": "Deletes an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/delete-index/"
                },
                "operationId": "IndicesDelete",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to delete; use `_all` or `*` string to delete all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of indices to delete; use `_all` or `*` string to delete all indices.",
                            "x-data-type": "list"
                        },
                        "required": true,
                        "examples": {
                            "IndicesDelete_example1": {
                                "summary": "Examples for Delete Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesDelete 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesDeleteResponseContent"
                                },
                                "examples": {
                                    "IndicesDelete_example1": {
                                        "summary": "Examples for Delete Index Operation.",
                                        "description": "",
                                        "value": {
                                            "acknowledged": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.delete",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates an index with optional settings and mappings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/create-index/"
                },
                "operationId": "IndicesCreate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesCreate_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Index name."
                        },
                        "required": true,
                        "examples": {
                            "IndicesCreate_example1": {
                                "summary": "Examples for Create Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for before the operation returns."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesCreate 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesCreateResponseContent"
                                },
                                "examples": {
                                    "IndicesCreate_example1": {
                                        "summary": "Examples for Create Index Operation.",
                                        "description": "",
                                        "value": {
                                            "index": "books",
                                            "shards_acknowledged": true,
                                            "acknowledged": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.create",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_doc/{id}": {
            "get": {
                "description": "Returns a document.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
                },
                "operationId": "Get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Document ID."
                        },
                        "required": true,
                        "examples": {
                            "Get_example1": {
                                "summary": "Examples for Get document doc Operation.",
                                "description": "",
                                "value": "1"
                            }
                        }
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Index name."
                        },
                        "required": true,
                        "examples": {
                            "Get_example1": {
                                "summary": "Examples for Get document doc Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetResponseContent"
                                },
                                "examples": {
                                    "Get_example1": {
                                        "summary": "Examples for Get document doc Operation.",
                                        "description": "",
                                        "value": {
                                            "_index": "books",
                                            "_id": "1",
                                            "found": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "get",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_mapping": {
            "post": {
                "description": "Updates the index mappings.",
                "operationId": "IndicesPutMapping_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutMapping_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "list"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "write_index_only",
                        "in": "query",
                        "description": "When true, applies mappings only to the write index of an alias or data stream.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "When true, applies mappings only to the write index of an alias or data stream."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutMapping_Post 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesPutMapping_PostResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.put_mapping",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Updates the index mappings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/put-mapping/"
                },
                "operationId": "IndicesPutMapping_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutMapping_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "list"
                        },
                        "required": true,
                        "examples": {
                            "IndicesPutMapping_Put_example1": {
                                "summary": "Examples for Put Index Mapping with index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "write_index_only",
                        "in": "query",
                        "description": "When true, applies mappings only to the write index of an alias or data stream.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "When true, applies mappings only to the write index of an alias or data stream."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutMapping_Put 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesPutMapping_PutResponseContent"
                                },
                                "examples": {
                                    "IndicesPutMapping_Put_example1": {
                                        "summary": "Examples for Put Index Mapping with index Operation.",
                                        "description": "",
                                        "value": {
                                            "acknowledged": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.put_mapping",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_search": {
            "get": {
                "description": "Returns results matching a query.",
                "operationId": "Search_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "list"
                        },
                        "required": true
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "docvalue_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit."
                        },
                        "explode": true
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of hits to return.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of hits to return.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "suggest_field",
                        "in": "query",
                        "description": "Specify which field to use for suggestions.",
                        "schema": {
                            "type": "string",
                            "description": "Specify which field to use for suggestions."
                        }
                    },
                    {
                        "name": "suggest_mode",
                        "in": "query",
                        "description": "Specify suggest mode.",
                        "schema": {
                            "$ref": "#/components/schemas/SuggestMode"
                        }
                    },
                    {
                        "name": "suggest_size",
                        "in": "query",
                        "description": "How many suggestions to return in response.",
                        "schema": {
                            "type": "integer",
                            "description": "How many suggestions to return in response.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "suggest_text",
                        "in": "query",
                        "description": "The source text for which the suggestions should be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The source text for which the suggestions should be returned."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "track_scores",
                        "in": "query",
                        "description": "Whether to calculate and return scores even if they are not used for sorting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to calculate and return scores even if they are not used for sorting."
                        }
                    },
                    {
                        "name": "track_total_hits",
                        "in": "query",
                        "description": "Indicate if the number of documents that match the query should be tracked.",
                        "schema": {
                            "type": "boolean",
                            "description": "Indicate if the number of documents that match the query should be tracked."
                        }
                    },
                    {
                        "name": "allow_partial_search_results",
                        "in": "query",
                        "description": "Indicate if an error should be returned if there is a partial search failure or timeout.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicate if an error should be returned if there is a partial search failure or timeout."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "seq_no_primary_term",
                        "in": "query",
                        "description": "Specify whether to return sequence number and primary term of the last modification of each hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return sequence number and primary term of the last modification of each hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "batched_reduce_size",
                        "in": "query",
                        "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                        "schema": {
                            "type": "integer",
                            "default": 512,
                            "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search_Get_WithIndex 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search_Get_WithIndexResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "search",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns results matching a query.",
                "operationId": "Search_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Search_BodyParams"
                            },
                            "examples": {
                                "Search_Post_WithIndex_example1": {
                                    "summary": "Examples for Post Search With Index Operation.",
                                    "description": "",
                                    "value": {
                                        "query": {
                                            "match_all": {}
                                        },
                                        "fields": [
                                            "*"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "list"
                        },
                        "required": true,
                        "examples": {
                            "Search_Post_WithIndex_example1": {
                                "summary": "Examples for Post Search With Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "docvalue_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit."
                        },
                        "explode": true
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        },
                        "examples": {
                            "Search_Post_WithIndex_example1": {
                                "summary": "Examples for Post Search With Index Operation.",
                                "description": "",
                                "value": "1d"
                            }
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of hits to return.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of hits to return.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "suggest_field",
                        "in": "query",
                        "description": "Specify which field to use for suggestions.",
                        "schema": {
                            "type": "string",
                            "description": "Specify which field to use for suggestions."
                        }
                    },
                    {
                        "name": "suggest_mode",
                        "in": "query",
                        "description": "Specify suggest mode.",
                        "schema": {
                            "$ref": "#/components/schemas/SuggestMode"
                        }
                    },
                    {
                        "name": "suggest_size",
                        "in": "query",
                        "description": "How many suggestions to return in response.",
                        "schema": {
                            "type": "integer",
                            "description": "How many suggestions to return in response.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "suggest_text",
                        "in": "query",
                        "description": "The source text for which the suggestions should be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The source text for which the suggestions should be returned."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "track_scores",
                        "in": "query",
                        "description": "Whether to calculate and return scores even if they are not used for sorting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to calculate and return scores even if they are not used for sorting."
                        }
                    },
                    {
                        "name": "track_total_hits",
                        "in": "query",
                        "description": "Indicate if the number of documents that match the query should be tracked.",
                        "schema": {
                            "type": "boolean",
                            "description": "Indicate if the number of documents that match the query should be tracked."
                        }
                    },
                    {
                        "name": "allow_partial_search_results",
                        "in": "query",
                        "description": "Indicate if an error should be returned if there is a partial search failure or timeout.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicate if an error should be returned if there is a partial search failure or timeout."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "seq_no_primary_term",
                        "in": "query",
                        "description": "Specify whether to return sequence number and primary term of the last modification of each hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return sequence number and primary term of the last modification of each hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "batched_reduce_size",
                        "in": "query",
                        "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                        "schema": {
                            "type": "integer",
                            "default": 512,
                            "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search_Post_WithIndex 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search_Post_WithIndexResponseContent"
                                },
                                "examples": {
                                    "Search_Post_WithIndex_example1": {
                                        "summary": "Examples for Post Search With Index Operation.",
                                        "description": "",
                                        "value": {
                                            "timed_out": false,
                                            "_shards": {
                                                "total": 1,
                                                "successful": 1,
                                                "skipped": 0,
                                                "failed": 0
                                            },
                                            "hits": {
                                                "total": {
                                                    "value": 0,
                                                    "relation": "eq"
                                                },
                                                "hits": []
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "search",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_settings": {
            "get": {
                "description": "Returns settings for one or more indices.",
                "operationId": "IndicesGetSettings_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "list"
                        },
                        "required": true,
                        "examples": {
                            "IndicesGetSettings_WithIndex_example1": {
                                "summary": "Examples for Get settings Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetSettings_WithIndex 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesGetSettings_WithIndexOutputPayload"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.get_settings",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_settings/{name}": {
            "get": {
                "description": "Returns settings for one or more indices.",
                "operationId": "IndicesGetSettings_WithIndexName",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "list"
                        },
                        "required": true,
                        "examples": {
                            "IndicesGetSettings_WithIndexName_example1": {
                                "summary": "Examples for Get settings Index-setting Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of settings.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Comma-separated list of settings.",
                            "x-data-type": "list"
                        },
                        "required": true,
                        "examples": {
                            "IndicesGetSettings_WithIndexName_example1": {
                                "summary": "Examples for Get settings Index-setting Operation.",
                                "description": "",
                                "value": "index"
                            }
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetSettings_WithIndexName 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesGetSettings_WithIndexNameOutputPayload"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.get_settings",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_source/{id}": {
            "get": {
                "description": "Returns the source of a document.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
                },
                "operationId": "GetSource",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Document ID."
                        },
                        "required": true,
                        "examples": {
                            "GetSource_example1": {
                                "summary": "Examples for Get document source Operation.",
                                "description": "",
                                "value": "1"
                            }
                        }
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^_][\\d\\w-*]*$",
                            "description": "Index name."
                        },
                        "required": true,
                        "examples": {
                            "GetSource_example1": {
                                "summary": "Examples for Get document source Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetSource 200 response"
                    }
                },
                "x-operation-group": "get_source",
                "x-version-added": "1.0"
            }
        }
    },
    "components": {
        "schemas": {
            "ActionObjectStructure": {
                "type": "object",
                "properties": {
                    "add": {
                        "$ref": "#/components/schemas/UserDefinedStructure"
                    },
                    "remove": {
                        "$ref": "#/components/schemas/UserDefinedStructure"
                    },
                    "remove_index": {
                        "$ref": "#/components/schemas/UserDefinedStructure"
                    }
                }
            },
            "Bytes": {
                "type": "string",
                "description": "The unit in which to display byte values.",
                "enum": [
                    "b",
                    "k",
                    "kb",
                    "m",
                    "mb",
                    "g",
                    "gb",
                    "t",
                    "tb",
                    "p",
                    "pb"
                ]
            },
            "CatIndicesOutputPayload": {},
            "CatIndices_WithIndexOutputPayload": {},
            "CatNodesOutputPayload": {},
            "ClusterGetSettingsResponseContent": {
                "type": "object",
                "properties": {
                    "persistent": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "transient": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "defaults": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                }
            },
            "ClusterPutSettingsResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    },
                    "persistent": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "transient": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                }
            },
            "ClusterPutSettings_BodyParams": {
                "type": "object",
                "properties": {
                    "persistent": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "transient": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                }
            },
            "DefaultOperator": {
                "type": "string",
                "description": "The default operator for query string query (AND or OR).",
                "enum": [
                    "AND",
                    "OR"
                ]
            },
            "ExpandWildcards": {
                "type": "string",
                "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                "enum": [
                    "all",
                    "open",
                    "closed",
                    "hidden",
                    "none"
                ]
            },
            "GetResponseContent": {
                "type": "object",
                "properties": {
                    "_index": {
                        "type": "string"
                    },
                    "_type": {
                        "type": "string"
                    },
                    "_id": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "seq_no": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "primary_term": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "found": {
                        "type": "boolean"
                    },
                    "_routing": {
                        "type": "string"
                    },
                    "_source": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "_fields": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                },
                "required": [
                    "_id",
                    "_index",
                    "found"
                ]
            },
            "Health": {
                "type": "string",
                "description": "Health status ('green', 'yellow', or 'red') to filter only indices matching the specified health status.",
                "enum": [
                    "green",
                    "yellow",
                    "red"
                ]
            },
            "Hits": {
                "type": "object",
                "properties": {
                    "_index": {
                        "type": "string"
                    },
                    "_type": {
                        "type": "string"
                    },
                    "_id": {
                        "type": "string"
                    },
                    "_score": {
                        "type": "number",
                        "format": "float"
                    },
                    "_source": {},
                    "fields": {}
                }
            },
            "HitsMetadata": {
                "type": "object",
                "properties": {
                    "total": {
                        "$ref": "#/components/schemas/Total"
                    },
                    "max_score": {
                        "type": "number",
                        "format": "double"
                    },
                    "hits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Hits"
                        }
                    }
                }
            },
            "IndicesCreateResponseContent": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "string"
                    },
                    "shards_acknowledged": {
                        "type": "boolean"
                    },
                    "acknowledged": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "acknowledged",
                    "index",
                    "shards_acknowledged"
                ]
            },
            "IndicesCreate_BodyParams": {
                "type": "object",
                "properties": {
                    "aliases": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "mapping": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                }
            },
            "IndicesDeleteResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                }
            },
            "IndicesGetSettingsOutputPayload": {},
            "IndicesGetSettings_WithIndexNameOutputPayload": {},
            "IndicesGetSettings_WithIndexOutputPayload": {},
            "IndicesGetSettings_WithNameOutputPayload": {},
            "IndicesPutMapping_BodyParams": {
                "type": "object"
            },
            "IndicesPutMapping_PostResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                }
            },
            "IndicesPutMapping_PutResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                }
            },
            "IndicesUpdateAliasesResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "acknowledged"
                ]
            },
            "IndicesUpdateAliases_BodyParams": {
                "type": "object",
                "properties": {
                    "actions": {
                        "$ref": "#/components/schemas/ActionObjectStructure"
                    }
                }
            },
            "InfoResponseContent": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "cluster_name": {
                        "type": "string"
                    },
                    "cluster_uuid": {
                        "type": "string"
                    },
                    "version": {
                        "$ref": "#/components/schemas/InfoVersion"
                    },
                    "tagline": {
                        "type": "string"
                    }
                }
            },
            "InfoVersion": {
                "type": "object",
                "properties": {
                    "distribution": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "build_type": {
                        "type": "string"
                    },
                    "build_hash": {
                        "type": "string"
                    },
                    "build_date": {
                        "type": "string"
                    },
                    "build_snapshot": {
                        "type": "boolean"
                    },
                    "lucene_version": {
                        "type": "string"
                    },
                    "minimum_wire_compatibility_version": {
                        "type": "string"
                    },
                    "minimum_index_compatibility_version": {
                        "type": "string"
                    }
                }
            },
            "Relation": {
                "type": "string",
                "enum": [
                    "eq",
                    "gte"
                ]
            },
            "RemoteStoreRestoreInfo": {
                "type": "object",
                "properties": {
                    "snapshot": {
                        "type": "string"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "shards": {
                        "$ref": "#/components/schemas/RemoteStoreRestoreShardsInfo"
                    }
                }
            },
            "RemoteStoreRestoreResponseContent": {
                "type": "object",
                "properties": {
                    "accepted": {
                        "type": "boolean"
                    },
                    "remote_store": {
                        "$ref": "#/components/schemas/RemoteStoreRestoreInfo"
                    }
                }
            },
            "RemoteStoreRestoreShardsInfo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "failed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successful": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RemoteStoreRestore_BodyParams": {
                "type": "object",
                "properties": {
                    "indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "indices"
                ]
            },
            "SearchType": {
                "type": "string",
                "description": "Search operation type.",
                "enum": [
                    "query_then_fetch",
                    "dfs_query_then_fetch"
                ]
            },
            "Search_BodyParams": {
                "type": "object",
                "properties": {
                    "docvalue_fields": {
                        "type": "string"
                    },
                    "explain": {
                        "type": "boolean"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "seq_no_primary_term": {
                        "type": "boolean"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "source": {
                        "type": "string"
                    },
                    "stats": {
                        "type": "string"
                    },
                    "terminate_after": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "timeout": {
                        "$ref": "#/components/schemas/Time"
                    },
                    "version": {
                        "type": "boolean"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "min_score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "indices_boost": {
                        "type": "array",
                        "items": {}
                    },
                    "query": {
                        "$ref": "#/components/schemas/UserDefinedObjectStructure"
                    }
                }
            },
            "Search_GetResponseContent": {
                "type": "object",
                "properties": {
                    "_scroll_id": {
                        "type": "string"
                    },
                    "took": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timed_out": {
                        "type": "boolean"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "hits": {
                        "$ref": "#/components/schemas/HitsMetadata"
                    }
                }
            },
            "Search_Get_WithIndexResponseContent": {
                "type": "object",
                "properties": {
                    "_scroll_id": {
                        "type": "string"
                    },
                    "took": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timed_out": {
                        "type": "boolean"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "hits": {
                        "$ref": "#/components/schemas/HitsMetadata"
                    }
                }
            },
            "Search_PostResponseContent": {
                "type": "object",
                "properties": {
                    "_scroll_id": {
                        "type": "string"
                    },
                    "took": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timed_out": {
                        "type": "boolean"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "hits": {
                        "$ref": "#/components/schemas/HitsMetadata"
                    }
                }
            },
            "Search_Post_WithIndexResponseContent": {
                "type": "object",
                "properties": {
                    "_scroll_id": {
                        "type": "string"
                    },
                    "took": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timed_out": {
                        "type": "boolean"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "hits": {
                        "$ref": "#/components/schemas/HitsMetadata"
                    }
                }
            },
            "ShardStatistics": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successful": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "skipped": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "failed": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "SuggestMode": {
                "type": "string",
                "description": "Specify suggest mode.",
                "enum": [
                    "missing",
                    "popular",
                    "always"
                ]
            },
            "Time": {
                "type": "string",
                "description": "The unit in which to display time values.",
                "enum": [
                    "d",
                    "h",
                    "m",
                    "s",
                    "ms",
                    "micros",
                    "nanos"
                ]
            },
            "Total": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "relation": {
                        "$ref": "#/components/schemas/Relation"
                    }
                }
            },
            "UserDefinedObjectStructure": {
                "type": "object",
                "properties": {
                    "bool": {},
                    "boosting": {},
                    "combined_fields": {},
                    "constant_score": {},
                    "dis_max": {},
                    "distance_feature": {},
                    "exists": {},
                    "function_score": {},
                    "fuzzy": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "geo_bounding_box": {},
                    "geo_distance": {},
                    "geo_polygon": {},
                    "geo_shape": {},
                    "has_child": {},
                    "has_parent": {},
                    "ids": {},
                    "intervals": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "knn": {},
                    "match": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "match_all": {},
                    "match_bool_prefix": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "match_none": {},
                    "match_phrase": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "match_phrase_prefix": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "more_like_this": {},
                    "multi_match": {},
                    "nested": {},
                    "parent_id": {},
                    "percolate": {},
                    "pinned": {},
                    "prefix": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "query_string": {},
                    "range": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "rank_feature": {},
                    "regexp": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "script": {},
                    "script_score": {},
                    "shape": {},
                    "simple_query_string": {},
                    "span_containing": {},
                    "field_masking_span": {},
                    "span_first": {},
                    "span_multi": {},
                    "span_near": {},
                    "span_not": {},
                    "span_or": {},
                    "span_term": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "span_within": {},
                    "term": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "terms": {},
                    "terms_set": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "wildcard": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "wrapper": {}
                }
            },
            "UserDefinedStructure": {
                "type": "object",
                "properties": {
                    "alias": {
                        "type": "string"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filter": {},
                    "index": {
                        "type": "string"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "index_routing": {
                        "type": "string"
                    },
                    "is_hidden": {
                        "type": "boolean"
                    },
                    "is_write_index": {
                        "type": "boolean"
                    },
                    "must_exist": {
                        "type": "string"
                    },
                    "routing": {
                        "type": "string"
                    },
                    "search_routing": {
                        "type": "string"
                    }
                }
            },
            "UserDefinedValueMap": {
                "type": "object",
                "additionalProperties": {}
            },
            "VersionType": {
                "type": "string",
                "description": "Specific version type.",
                "enum": [
                    "internal",
                    "external",
                    "external_gte",
                    "force"
                ]
            }
        },
        "securitySchemes": {
            "smithy.api.httpBasicAuth": {
                "type": "http",
                "description": "HTTP Basic authentication",
                "scheme": "Basic"
            }
        }
    },
    "security": [
        {
            "smithy.api.httpBasicAuth": []
        }
    ]
}
