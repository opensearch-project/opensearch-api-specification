{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenSearch _core API",
    "description": "OpenSearch _core API",
    "version": "1.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "description": "Returns basic information about the cluster.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "Info",
        "responses": {
          "200": {
            "$ref": "#/components/responses/info#200"
          }
        },
        "x-operation-group": "info",
        "x-version-added": "1.0",
        "parameters": []
      },
      "head": {
        "description": "Returns whether the cluster is running.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "Ping",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ping#200"
          }
        },
        "x-operation-group": "ping",
        "x-version-added": "1.0",
        "parameters": []
      }
    },
    "/_bulk": {
      "post": {
        "description": "Allows to perform multiple index/update/delete operations in a single request.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/bulk/"
        },
        "operationId": "Bulk_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/bulk"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/bulk#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/bulk#refresh"
          },
          {
            "$ref": "#/components/parameters/bulk#routing"
          },
          {
            "$ref": "#/components/parameters/bulk#timeout"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Default document type for items which don't provide one.",
            "schema": {
              "type": "string",
              "description": "Default document type for items which don't provide one."
            }
          },
          {
            "$ref": "#/components/parameters/bulk#_source"
          },
          {
            "$ref": "#/components/parameters/bulk#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/bulk#_source_includes"
          },
          {
            "$ref": "#/components/parameters/bulk#pipeline"
          },
          {
            "$ref": "#/components/parameters/bulk#require_alias"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/bulk#200"
          }
        },
        "x-operation-group": "bulk",
        "x-version-added": "1.0"
      },
      "put": {
        "description": "Allows to perform multiple index/update/delete operations in a single request.",
        "operationId": "Bulk_Put",
        "requestBody": {
          "$ref": "#/components/requestBodies/bulk"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/bulk#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/bulk#refresh"
          },
          {
            "$ref": "#/components/parameters/bulk#routing"
          },
          {
            "$ref": "#/components/parameters/bulk#timeout"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Default document type for items which don't provide one.",
            "schema": {
              "type": "string",
              "description": "Default document type for items which don't provide one."
            }
          },
          {
            "$ref": "#/components/parameters/bulk#_source"
          },
          {
            "$ref": "#/components/parameters/bulk#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/bulk#_source_includes"
          },
          {
            "$ref": "#/components/parameters/bulk#pipeline"
          },
          {
            "$ref": "#/components/parameters/bulk#require_alias"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/bulk#200"
          }
        },
        "x-operation-group": "bulk",
        "x-version-added": "1.0"
      }
    },
    "/_count": {
      "get": {
        "description": "Returns number of documents matching a query.",
        "operationId": "Count_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/count#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/count#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/count#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/count#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/count#min_score"
          },
          {
            "$ref": "#/components/parameters/count#preference"
          },
          {
            "$ref": "#/components/parameters/count#routing"
          },
          {
            "$ref": "#/components/parameters/count#q"
          },
          {
            "$ref": "#/components/parameters/count#analyzer"
          },
          {
            "$ref": "#/components/parameters/count#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/count#default_operator"
          },
          {
            "$ref": "#/components/parameters/count#df"
          },
          {
            "$ref": "#/components/parameters/count#lenient"
          },
          {
            "$ref": "#/components/parameters/count#terminate_after"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/count#200"
          }
        },
        "x-operation-group": "count",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/count"
        }
      },
      "post": {
        "description": "Returns number of documents matching a query.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/count/"
        },
        "operationId": "Count_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/count"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/count#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/count#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/count#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/count#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/count#min_score"
          },
          {
            "$ref": "#/components/parameters/count#preference"
          },
          {
            "$ref": "#/components/parameters/count#routing"
          },
          {
            "$ref": "#/components/parameters/count#q"
          },
          {
            "$ref": "#/components/parameters/count#analyzer"
          },
          {
            "$ref": "#/components/parameters/count#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/count#default_operator"
          },
          {
            "$ref": "#/components/parameters/count#df"
          },
          {
            "$ref": "#/components/parameters/count#lenient"
          },
          {
            "$ref": "#/components/parameters/count#terminate_after"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/count#200"
          }
        },
        "x-operation-group": "count",
        "x-version-added": "1.0"
      }
    },
    "/_delete_by_query/{task_id}/_rethrottle": {
      "post": {
        "description": "Changes the number of requests per second for a particular Delete By Query operation.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "DeleteByQueryRethrottle",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "description": "The ID for the task.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/TaskId"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "requests_per_second",
            "description": "The throttle for this request in sub-requests per second.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_by_query_rethrottle#200"
          }
        },
        "x-operation-group": "delete_by_query_rethrottle",
        "x-version-added": "1.0"
      }
    },
    "/_field_caps": {
      "get": {
        "description": "Returns the information about the capabilities of fields among multiple indices.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/field-types/supported-field-types/alias/#using-aliases-in-field-capabilities-api-operations"
        },
        "operationId": "FieldCaps_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/field_caps#fields"
          },
          {
            "$ref": "#/components/parameters/field_caps#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/field_caps#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/field_caps#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/field_caps#include_unmapped"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/field_caps#200"
          }
        },
        "x-operation-group": "field_caps",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/field_caps"
        }
      },
      "post": {
        "description": "Returns the information about the capabilities of fields among multiple indices.",
        "operationId": "FieldCaps_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/field_caps"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/field_caps#fields"
          },
          {
            "$ref": "#/components/parameters/field_caps#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/field_caps#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/field_caps#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/field_caps#include_unmapped"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/field_caps#200"
          }
        },
        "x-operation-group": "field_caps",
        "x-version-added": "1.0"
      }
    },
    "/_mget": {
      "get": {
        "description": "Allows to get multiple documents in one request.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/multi-get/"
        },
        "operationId": "Mget_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/mget#stored_fields"
          },
          {
            "$ref": "#/components/parameters/mget#preference"
          },
          {
            "$ref": "#/components/parameters/mget#realtime"
          },
          {
            "$ref": "#/components/parameters/mget#refresh"
          },
          {
            "$ref": "#/components/parameters/mget#routing"
          },
          {
            "$ref": "#/components/parameters/mget#_source"
          },
          {
            "$ref": "#/components/parameters/mget#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/mget#_source_includes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mget#200"
          }
        },
        "x-operation-group": "mget",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/mget"
        }
      },
      "post": {
        "description": "Allows to get multiple documents in one request.",
        "operationId": "Mget_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/mget"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/mget#stored_fields"
          },
          {
            "$ref": "#/components/parameters/mget#preference"
          },
          {
            "$ref": "#/components/parameters/mget#realtime"
          },
          {
            "$ref": "#/components/parameters/mget#refresh"
          },
          {
            "$ref": "#/components/parameters/mget#routing"
          },
          {
            "$ref": "#/components/parameters/mget#_source"
          },
          {
            "$ref": "#/components/parameters/mget#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/mget#_source_includes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mget#200"
          }
        },
        "x-operation-group": "mget",
        "x-version-added": "1.0"
      }
    },
    "/_msearch": {
      "get": {
        "description": "Allows to execute several search operations in one request.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/multi-search/"
        },
        "operationId": "Msearch_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/msearch#search_type"
          },
          {
            "$ref": "#/components/parameters/msearch#max_concurrent_searches"
          },
          {
            "$ref": "#/components/parameters/msearch#typed_keys"
          },
          {
            "$ref": "#/components/parameters/msearch#pre_filter_shard_size"
          },
          {
            "$ref": "#/components/parameters/msearch#max_concurrent_shard_requests"
          },
          {
            "$ref": "#/components/parameters/msearch#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/msearch#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/msearch#200"
          }
        },
        "x-operation-group": "msearch",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/msearch"
        }
      },
      "post": {
        "description": "Allows to execute several search operations in one request.",
        "operationId": "Msearch_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/msearch"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/msearch#search_type"
          },
          {
            "$ref": "#/components/parameters/msearch#max_concurrent_searches"
          },
          {
            "$ref": "#/components/parameters/msearch#typed_keys"
          },
          {
            "$ref": "#/components/parameters/msearch#pre_filter_shard_size"
          },
          {
            "$ref": "#/components/parameters/msearch#max_concurrent_shard_requests"
          },
          {
            "$ref": "#/components/parameters/msearch#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/msearch#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/msearch#200"
          }
        },
        "x-operation-group": "msearch",
        "x-version-added": "1.0"
      }
    },
    "/_msearch/template": {
      "get": {
        "description": "Allows to execute several search template operations in one request.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/search-plugins/search-template/"
        },
        "operationId": "MsearchTemplate_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/msearch_template#search_type"
          },
          {
            "$ref": "#/components/parameters/msearch_template#typed_keys"
          },
          {
            "$ref": "#/components/parameters/msearch_template#max_concurrent_searches"
          },
          {
            "$ref": "#/components/parameters/msearch_template#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/msearch_template#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/msearch_template#200"
          }
        },
        "x-operation-group": "msearch_template",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/msearch_template"
        }
      },
      "post": {
        "description": "Allows to execute several search template operations in one request.",
        "operationId": "MsearchTemplate_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/msearch_template"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/msearch_template#search_type"
          },
          {
            "$ref": "#/components/parameters/msearch_template#typed_keys"
          },
          {
            "$ref": "#/components/parameters/msearch_template#max_concurrent_searches"
          },
          {
            "$ref": "#/components/parameters/msearch_template#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/msearch_template#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/msearch_template#200"
          }
        },
        "x-operation-group": "msearch_template",
        "x-version-added": "1.0"
      }
    },
    "/_mtermvectors": {
      "get": {
        "description": "Returns multiple termvectors in one request.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "Mtermvectors_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/mtermvectors#ids"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#term_statistics"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#field_statistics"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#fields"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#offsets"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#positions"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#payloads"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#preference"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#routing"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#realtime"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#version"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#version_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mtermvectors#200"
          }
        },
        "x-operation-group": "mtermvectors",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/mtermvectors"
        }
      },
      "post": {
        "description": "Returns multiple termvectors in one request.",
        "operationId": "Mtermvectors_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/mtermvectors"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/mtermvectors#ids"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#term_statistics"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#field_statistics"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#fields"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#offsets"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#positions"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#payloads"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#preference"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#routing"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#realtime"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#version"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#version_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mtermvectors#200"
          }
        },
        "x-operation-group": "mtermvectors",
        "x-version-added": "1.0"
      }
    },
    "/_rank_eval": {
      "get": {
        "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/rank-eval/"
        },
        "operationId": "RankEval_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/rank_eval#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/rank_eval#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/rank_eval#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/rank_eval#search_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/rank_eval#200"
          }
        },
        "x-operation-group": "rank_eval",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/rank_eval"
        }
      },
      "post": {
        "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries.",
        "operationId": "RankEval_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/rank_eval"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/rank_eval#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/rank_eval#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/rank_eval#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/rank_eval#search_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/rank_eval#200"
          }
        },
        "x-operation-group": "rank_eval",
        "x-version-added": "1.0"
      }
    },
    "/_reindex": {
      "post": {
        "description": "Allows to copy documents from one index to another, optionally filtering the source\ndocuments by a query, changing the destination index settings, or fetching the\ndocuments from a remote cluster.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/im-plugin/reindex-data/"
        },
        "operationId": "Reindex",
        "requestBody": {
          "$ref": "#/components/requestBodies/reindex"
        },
        "parameters": [
          {
            "in": "query",
            "name": "refresh",
            "description": "If `true`, the request refreshes affected shards to make this operation visible to search.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Period each indexing waits for automatic index creation, dynamic mapping updates, and waiting for active shards.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "wait_for_active_shards",
            "description": "The number of shard copies that must be active before proceeding with the operation.\nSet to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/WaitForActiveShards"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "wait_for_completion",
            "description": "If `true`, the request blocks until the operation is complete.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "requests_per_second",
            "description": "The throttle for this request in sub-requests per second.\nDefaults to no throttle.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "scroll",
            "description": "Specifies how long a consistent view of the index should be maintained for scrolled search.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "slices",
            "description": "The number of slices this task should be divided into.\nDefaults to 1 slice, meaning the task isn’t sliced into subtasks.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Slices"
            },
            "style": "form"
          },
          {
            "name": "max_docs",
            "in": "query",
            "description": "Maximum number of documents to process (default: all documents).",
            "schema": {
              "type": "integer",
              "description": "Maximum number of documents to process (default: all documents).",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/reindex#200"
          }
        },
        "x-operation-group": "reindex",
        "x-version-added": "1.0"
      }
    },
    "/_reindex/{task_id}/_rethrottle": {
      "post": {
        "description": "Changes the number of requests per second for a particular Reindex operation.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "ReindexRethrottle",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "description": "Identifier for the task.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "requests_per_second",
            "description": "The throttle for this request in sub-requests per second.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/reindex_rethrottle#200"
          }
        },
        "x-operation-group": "reindex_rethrottle",
        "x-version-added": "1.0"
      }
    },
    "/_render/template": {
      "get": {
        "description": "Allows to use the Mustache language to pre-render a search definition.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/search-plugins/search-template/"
        },
        "operationId": "RenderSearchTemplate_Get",
        "responses": {
          "200": {
            "$ref": "#/components/responses/render_search_template#200"
          }
        },
        "x-operation-group": "render_search_template",
        "x-version-added": "1.0",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/render_search_template"
        }
      },
      "post": {
        "description": "Allows to use the Mustache language to pre-render a search definition.",
        "operationId": "RenderSearchTemplate_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/render_search_template"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/render_search_template#200"
          }
        },
        "x-operation-group": "render_search_template",
        "x-version-added": "1.0",
        "parameters": []
      }
    },
    "/_render/template/{id}": {
      "get": {
        "description": "Allows to use the Mustache language to pre-render a search definition.",
        "operationId": "RenderSearchTemplate_Get_WithId",
        "parameters": [
          {
            "$ref": "#/components/parameters/render_search_template#id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/render_search_template#200"
          }
        },
        "x-operation-group": "render_search_template",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/render_search_template"
        }
      },
      "post": {
        "description": "Allows to use the Mustache language to pre-render a search definition.",
        "operationId": "RenderSearchTemplate_Post_WithId",
        "requestBody": {
          "$ref": "#/components/requestBodies/render_search_template"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/render_search_template#id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/render_search_template#200"
          }
        },
        "x-operation-group": "render_search_template",
        "x-version-added": "1.0"
      }
    },
    "/_script_context": {
      "get": {
        "description": "Returns all script contexts.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/script-apis/get-script-contexts/"
        },
        "operationId": "GetScriptContext",
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_script_context#200"
          }
        },
        "x-operation-group": "get_script_context",
        "x-version-added": "1.0",
        "parameters": []
      }
    },
    "/_script_language": {
      "get": {
        "description": "Returns available script types, languages and contexts.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/script-apis/get-script-language/"
        },
        "operationId": "GetScriptLanguages",
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_script_languages#200"
          }
        },
        "x-operation-group": "get_script_languages",
        "x-version-added": "1.0",
        "parameters": []
      }
    },
    "/_scripts/painless/_execute": {
      "get": {
        "description": "Allows an arbitrary script to be executed and a result to be returned.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/script-apis/exec-script/"
        },
        "operationId": "ScriptsPainlessExecute_Get",
        "responses": {
          "200": {
            "$ref": "#/components/responses/scripts_painless_execute#200"
          }
        },
        "x-operation-group": "scripts_painless_execute",
        "x-version-added": "1.0",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/scripts_painless_execute"
        }
      },
      "post": {
        "description": "Allows an arbitrary script to be executed and a result to be returned.",
        "operationId": "ScriptsPainlessExecute_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/scripts_painless_execute"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/scripts_painless_execute#200"
          }
        },
        "x-operation-group": "scripts_painless_execute",
        "x-version-added": "1.0",
        "parameters": []
      }
    },
    "/_scripts/{id}": {
      "delete": {
        "description": "Deletes a script.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/script-apis/delete-script/"
        },
        "operationId": "DeleteScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Identifier for the stored script or search template.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Period to wait for a response.\nIf no response is received before the timeout expires, the request fails and returns an error.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "master_timeout",
            "description": "Period to wait for a connection to the master node.\nIf no response is received before the timeout expires, the request fails and returns an error.",
            "deprecated": true,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form",
            "x-version-deprecated": "2.0.0",
            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead."
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_script#200"
          }
        },
        "x-operation-group": "delete_script",
        "x-version-added": "1.0"
      },
      "get": {
        "description": "Returns a script.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/script-apis/get-stored-script/"
        },
        "operationId": "GetScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Identifier for the stored script or search template.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "master_timeout",
            "description": "Specify timeout for connection to master",
            "deprecated": true,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form",
            "x-version-deprecated": "2.0.0",
            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead."
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_script#200"
          }
        },
        "x-operation-group": "get_script",
        "x-version-added": "1.0"
      },
      "post": {
        "description": "Creates or updates a script.",
        "operationId": "PutScript_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/put_script"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/put_script#id"
          },
          {
            "$ref": "#/components/parameters/put_script#timeout"
          },
          {
            "$ref": "#/components/parameters/put_script#master_timeout"
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/put_script#200"
          }
        },
        "x-operation-group": "put_script",
        "x-version-added": "1.0"
      },
      "put": {
        "description": "Creates or updates a script.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/script-apis/create-stored-script/"
        },
        "operationId": "PutScript_Put",
        "requestBody": {
          "$ref": "#/components/requestBodies/put_script"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/put_script#id"
          },
          {
            "$ref": "#/components/parameters/put_script#timeout"
          },
          {
            "$ref": "#/components/parameters/put_script#master_timeout"
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/put_script#200"
          }
        },
        "x-operation-group": "put_script",
        "x-version-added": "1.0"
      }
    },
    "/_scripts/{id}/{context}": {
      "post": {
        "description": "Creates or updates a script.",
        "operationId": "PutScript_Post_WithContext",
        "requestBody": {
          "$ref": "#/components/requestBodies/put_script"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/put_script#id"
          },
          {
            "$ref": "#/components/parameters/put_script#context"
          },
          {
            "$ref": "#/components/parameters/put_script#timeout"
          },
          {
            "$ref": "#/components/parameters/put_script#master_timeout"
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/put_script#200"
          }
        },
        "x-operation-group": "put_script",
        "x-version-added": "1.0"
      },
      "put": {
        "description": "Creates or updates a script.",
        "operationId": "PutScript_Put_WithContext",
        "requestBody": {
          "$ref": "#/components/requestBodies/put_script"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/put_script#id"
          },
          {
            "$ref": "#/components/parameters/put_script#context"
          },
          {
            "$ref": "#/components/parameters/put_script#timeout"
          },
          {
            "$ref": "#/components/parameters/put_script#master_timeout"
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/put_script#200"
          }
        },
        "x-operation-group": "put_script",
        "x-version-added": "1.0"
      }
    },
    "/_search": {
      "get": {
        "description": "Returns results matching a query.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/search/"
        },
        "operationId": "Search_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/search#analyzer"
          },
          {
            "$ref": "#/components/parameters/search#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/search#ccs_minimize_roundtrips"
          },
          {
            "$ref": "#/components/parameters/search#default_operator"
          },
          {
            "$ref": "#/components/parameters/search#df"
          },
          {
            "$ref": "#/components/parameters/search#explain"
          },
          {
            "$ref": "#/components/parameters/search#stored_fields"
          },
          {
            "$ref": "#/components/parameters/search#docvalue_fields"
          },
          {
            "$ref": "#/components/parameters/search#from"
          },
          {
            "$ref": "#/components/parameters/search#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/search#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/search#lenient"
          },
          {
            "$ref": "#/components/parameters/search#preference"
          },
          {
            "$ref": "#/components/parameters/search#q"
          },
          {
            "$ref": "#/components/parameters/search#routing"
          },
          {
            "$ref": "#/components/parameters/search#scroll"
          },
          {
            "$ref": "#/components/parameters/search#search_type"
          },
          {
            "$ref": "#/components/parameters/search#size"
          },
          {
            "$ref": "#/components/parameters/search#sort"
          },
          {
            "$ref": "#/components/parameters/search#_source"
          },
          {
            "$ref": "#/components/parameters/search#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/search#_source_includes"
          },
          {
            "$ref": "#/components/parameters/search#terminate_after"
          },
          {
            "$ref": "#/components/parameters/search#stats"
          },
          {
            "$ref": "#/components/parameters/search#suggest_field"
          },
          {
            "$ref": "#/components/parameters/search#suggest_mode"
          },
          {
            "$ref": "#/components/parameters/search#suggest_size"
          },
          {
            "$ref": "#/components/parameters/search#suggest_text"
          },
          {
            "$ref": "#/components/parameters/search#timeout"
          },
          {
            "$ref": "#/components/parameters/search#track_scores"
          },
          {
            "$ref": "#/components/parameters/search#track_total_hits"
          },
          {
            "$ref": "#/components/parameters/search#allow_partial_search_results"
          },
          {
            "$ref": "#/components/parameters/search#typed_keys"
          },
          {
            "$ref": "#/components/parameters/search#version"
          },
          {
            "$ref": "#/components/parameters/search#seq_no_primary_term"
          },
          {
            "$ref": "#/components/parameters/search#request_cache"
          },
          {
            "$ref": "#/components/parameters/search#batched_reduce_size"
          },
          {
            "$ref": "#/components/parameters/search#max_concurrent_shard_requests"
          },
          {
            "$ref": "#/components/parameters/search#pre_filter_shard_size"
          },
          {
            "$ref": "#/components/parameters/search#rest_total_hits_as_int"
          },
          {
            "name": "search_pipeline",
            "in": "query",
            "description": "Customizable sequence of processing stages applied to search queries.",
            "schema": {
              "type": "string",
              "description": "Customizable sequence of processing stages applied to search queries."
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search#200"
          }
        },
        "x-operation-group": "search",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/search"
        }
      },
      "post": {
        "description": "Returns results matching a query.",
        "operationId": "Search_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/search"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/search#analyzer"
          },
          {
            "$ref": "#/components/parameters/search#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/search#ccs_minimize_roundtrips"
          },
          {
            "$ref": "#/components/parameters/search#default_operator"
          },
          {
            "$ref": "#/components/parameters/search#df"
          },
          {
            "$ref": "#/components/parameters/search#explain"
          },
          {
            "$ref": "#/components/parameters/search#stored_fields"
          },
          {
            "$ref": "#/components/parameters/search#docvalue_fields"
          },
          {
            "$ref": "#/components/parameters/search#from"
          },
          {
            "$ref": "#/components/parameters/search#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/search#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/search#lenient"
          },
          {
            "$ref": "#/components/parameters/search#preference"
          },
          {
            "$ref": "#/components/parameters/search#q"
          },
          {
            "$ref": "#/components/parameters/search#routing"
          },
          {
            "$ref": "#/components/parameters/search#scroll"
          },
          {
            "$ref": "#/components/parameters/search#search_type"
          },
          {
            "$ref": "#/components/parameters/search#size"
          },
          {
            "$ref": "#/components/parameters/search#sort"
          },
          {
            "$ref": "#/components/parameters/search#_source"
          },
          {
            "$ref": "#/components/parameters/search#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/search#_source_includes"
          },
          {
            "$ref": "#/components/parameters/search#terminate_after"
          },
          {
            "$ref": "#/components/parameters/search#stats"
          },
          {
            "$ref": "#/components/parameters/search#suggest_field"
          },
          {
            "$ref": "#/components/parameters/search#suggest_mode"
          },
          {
            "$ref": "#/components/parameters/search#suggest_size"
          },
          {
            "$ref": "#/components/parameters/search#suggest_text"
          },
          {
            "$ref": "#/components/parameters/search#timeout"
          },
          {
            "$ref": "#/components/parameters/search#track_scores"
          },
          {
            "$ref": "#/components/parameters/search#track_total_hits"
          },
          {
            "$ref": "#/components/parameters/search#allow_partial_search_results"
          },
          {
            "$ref": "#/components/parameters/search#typed_keys"
          },
          {
            "$ref": "#/components/parameters/search#version"
          },
          {
            "$ref": "#/components/parameters/search#seq_no_primary_term"
          },
          {
            "$ref": "#/components/parameters/search#request_cache"
          },
          {
            "$ref": "#/components/parameters/search#batched_reduce_size"
          },
          {
            "$ref": "#/components/parameters/search#max_concurrent_shard_requests"
          },
          {
            "$ref": "#/components/parameters/search#pre_filter_shard_size"
          },
          {
            "$ref": "#/components/parameters/search#rest_total_hits_as_int"
          },
          {
            "name": "search_pipeline",
            "in": "query",
            "description": "Customizable sequence of processing stages applied to search queries.",
            "schema": {
              "type": "string",
              "description": "Customizable sequence of processing stages applied to search queries."
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search#200"
          }
        },
        "x-operation-group": "search",
        "x-version-added": "1.0"
      }
    },
    "/_search/point_in_time": {
      "delete": {
        "description": "Deletes one or more point in time searches based on the IDs passed.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#delete-pits"
        },
        "operationId": "DeletePit",
        "requestBody": {
          "$ref": "#/components/requestBodies/delete_pit"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_pit#200"
          }
        },
        "x-operation-group": "delete_pit",
        "x-version-added": "2.4"
      }
    },
    "/_search/point_in_time/_all": {
      "delete": {
        "description": "Deletes all active point in time searches.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#delete-pits"
        },
        "operationId": "DeleteAllPits",
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_all_pits#200"
          }
        },
        "x-operation-group": "delete_all_pits",
        "x-version-added": "2.4"
      },
      "get": {
        "description": "Lists all active point in time searches.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#list-all-pits"
        },
        "operationId": "GetAllPits",
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_all_pits#200"
          }
        },
        "x-operation-group": "get_all_pits",
        "x-version-added": "2.4"
      }
    },
    "/_search/scroll": {
      "delete": {
        "description": "Explicitly clears the search context for a scroll.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/scroll/"
        },
        "operationId": "ClearScroll",
        "requestBody": {
          "$ref": "#/components/requestBodies/clear_scroll"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/clear_scroll#200"
          }
        },
        "x-operation-group": "clear_scroll",
        "x-version-added": "1.0",
        "parameters": []
      },
      "get": {
        "description": "Allows to retrieve a large numbers of results from a single search request.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/scroll/#path-and-http-methods"
        },
        "operationId": "Scroll_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/scroll#scroll"
          },
          {
            "$ref": "#/components/parameters/scroll#scroll_id_"
          },
          {
            "$ref": "#/components/parameters/scroll#rest_total_hits_as_int"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/scroll#200"
          }
        },
        "x-operation-group": "scroll",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/scroll"
        }
      },
      "post": {
        "description": "Allows to retrieve a large numbers of results from a single search request.",
        "operationId": "Scroll_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/scroll"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/scroll#scroll"
          },
          {
            "$ref": "#/components/parameters/scroll#scroll_id_"
          },
          {
            "$ref": "#/components/parameters/scroll#rest_total_hits_as_int"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/scroll#200"
          }
        },
        "x-operation-group": "scroll",
        "x-version-added": "1.0"
      }
    },
    "/_search/scroll/{scroll_id}": {
      "delete": {
        "description": "Explicitly clears the search context for a scroll.",
        "operationId": "ClearScroll_WithScrollId",
        "requestBody": {
          "$ref": "#/components/requestBodies/clear_scroll"
        },
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/clear_scroll#scroll_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/clear_scroll#200"
          }
        },
        "x-deprecation-message": "A scroll id can be quite large and should be specified as part of the body",
        "x-operation-group": "clear_scroll",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0"
      },
      "get": {
        "description": "Allows to retrieve a large numbers of results from a single search request.",
        "operationId": "Scroll_Get_WithScrollId",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/scroll#scroll_id"
          },
          {
            "$ref": "#/components/parameters/scroll#scroll"
          },
          {
            "$ref": "#/components/parameters/scroll#scroll_id_"
          },
          {
            "$ref": "#/components/parameters/scroll#rest_total_hits_as_int"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/scroll#200"
          }
        },
        "x-deprecation-message": "A scroll id can be quite large and should be specified as part of the body",
        "x-operation-group": "scroll",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/scroll"
        }
      },
      "post": {
        "description": "Allows to retrieve a large numbers of results from a single search request.",
        "operationId": "Scroll_Post_WithScrollId",
        "requestBody": {
          "$ref": "#/components/requestBodies/scroll"
        },
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/scroll#scroll_id"
          },
          {
            "$ref": "#/components/parameters/scroll#scroll"
          },
          {
            "$ref": "#/components/parameters/scroll#scroll_id_"
          },
          {
            "$ref": "#/components/parameters/scroll#rest_total_hits_as_int"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/scroll#200"
          }
        },
        "x-deprecation-message": "A scroll id can be quite large and should be specified as part of the body",
        "x-operation-group": "scroll",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0"
      }
    },
    "/_search/template": {
      "get": {
        "description": "Allows to use the Mustache language to pre-render a search definition.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/search-plugins/search-template/"
        },
        "operationId": "SearchTemplate_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_template#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search_template#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/search_template#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search_template#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/search_template#preference"
          },
          {
            "$ref": "#/components/parameters/search_template#routing"
          },
          {
            "$ref": "#/components/parameters/search_template#scroll"
          },
          {
            "$ref": "#/components/parameters/search_template#search_type"
          },
          {
            "$ref": "#/components/parameters/search_template#explain"
          },
          {
            "$ref": "#/components/parameters/search_template#profile"
          },
          {
            "$ref": "#/components/parameters/search_template#typed_keys"
          },
          {
            "$ref": "#/components/parameters/search_template#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/search_template#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search_template#200"
          }
        },
        "x-operation-group": "search_template",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/search_template"
        }
      },
      "post": {
        "description": "Allows to use the Mustache language to pre-render a search definition.",
        "operationId": "SearchTemplate_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/search_template"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/search_template#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search_template#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/search_template#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search_template#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/search_template#preference"
          },
          {
            "$ref": "#/components/parameters/search_template#routing"
          },
          {
            "$ref": "#/components/parameters/search_template#scroll"
          },
          {
            "$ref": "#/components/parameters/search_template#search_type"
          },
          {
            "$ref": "#/components/parameters/search_template#explain"
          },
          {
            "$ref": "#/components/parameters/search_template#profile"
          },
          {
            "$ref": "#/components/parameters/search_template#typed_keys"
          },
          {
            "$ref": "#/components/parameters/search_template#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/search_template#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search_template#200"
          }
        },
        "x-operation-group": "search_template",
        "x-version-added": "1.0"
      }
    },
    "/_search_shards": {
      "get": {
        "description": "Returns information about the indices and shards that a search request would be executed against.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "SearchShards_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_shards#preference"
          },
          {
            "$ref": "#/components/parameters/search_shards#routing"
          },
          {
            "$ref": "#/components/parameters/search_shards#local"
          },
          {
            "$ref": "#/components/parameters/search_shards#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search_shards#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search_shards#expand_wildcards"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search_shards#200"
          }
        },
        "x-operation-group": "search_shards",
        "x-version-added": "1.0"
      },
      "post": {
        "description": "Returns information about the indices and shards that a search request would be executed against.",
        "operationId": "SearchShards_Post",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_shards#preference"
          },
          {
            "$ref": "#/components/parameters/search_shards#routing"
          },
          {
            "$ref": "#/components/parameters/search_shards#local"
          },
          {
            "$ref": "#/components/parameters/search_shards#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search_shards#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search_shards#expand_wildcards"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search_shards#200"
          }
        },
        "x-operation-group": "search_shards",
        "x-version-added": "1.0"
      }
    },
    "/_update_by_query/{task_id}/_rethrottle": {
      "post": {
        "description": "Changes the number of requests per second for a particular Update By Query operation.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "UpdateByQueryRethrottle",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "description": "The ID for the task.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "requests_per_second",
            "description": "The throttle for this request in sub-requests per second.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/update_by_query_rethrottle#200"
          }
        },
        "x-operation-group": "update_by_query_rethrottle",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_bulk": {
      "post": {
        "description": "Allows to perform multiple index/update/delete operations in a single request.",
        "operationId": "Bulk_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/bulk"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/bulk#index"
          },
          {
            "$ref": "#/components/parameters/bulk#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/bulk#refresh"
          },
          {
            "$ref": "#/components/parameters/bulk#routing"
          },
          {
            "$ref": "#/components/parameters/bulk#timeout"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Default document type for items which don't provide one.",
            "schema": {
              "type": "string",
              "description": "Default document type for items which don't provide one."
            }
          },
          {
            "$ref": "#/components/parameters/bulk#_source"
          },
          {
            "$ref": "#/components/parameters/bulk#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/bulk#_source_includes"
          },
          {
            "$ref": "#/components/parameters/bulk#pipeline"
          },
          {
            "$ref": "#/components/parameters/bulk#require_alias"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/bulk#200"
          }
        },
        "x-operation-group": "bulk",
        "x-version-added": "1.0"
      },
      "put": {
        "description": "Allows to perform multiple index/update/delete operations in a single request.",
        "operationId": "Bulk_Put_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/bulk"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/bulk#index"
          },
          {
            "$ref": "#/components/parameters/bulk#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/bulk#refresh"
          },
          {
            "$ref": "#/components/parameters/bulk#routing"
          },
          {
            "$ref": "#/components/parameters/bulk#timeout"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Default document type for items which don't provide one.",
            "schema": {
              "type": "string",
              "description": "Default document type for items which don't provide one."
            }
          },
          {
            "$ref": "#/components/parameters/bulk#_source"
          },
          {
            "$ref": "#/components/parameters/bulk#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/bulk#_source_includes"
          },
          {
            "$ref": "#/components/parameters/bulk#pipeline"
          },
          {
            "$ref": "#/components/parameters/bulk#require_alias"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/bulk#200"
          }
        },
        "x-operation-group": "bulk",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_count": {
      "get": {
        "description": "Returns number of documents matching a query.",
        "operationId": "Count_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/count#index"
          },
          {
            "$ref": "#/components/parameters/count#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/count#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/count#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/count#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/count#min_score"
          },
          {
            "$ref": "#/components/parameters/count#preference"
          },
          {
            "$ref": "#/components/parameters/count#routing"
          },
          {
            "$ref": "#/components/parameters/count#q"
          },
          {
            "$ref": "#/components/parameters/count#analyzer"
          },
          {
            "$ref": "#/components/parameters/count#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/count#default_operator"
          },
          {
            "$ref": "#/components/parameters/count#df"
          },
          {
            "$ref": "#/components/parameters/count#lenient"
          },
          {
            "$ref": "#/components/parameters/count#terminate_after"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/count#200"
          }
        },
        "x-operation-group": "count",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/count"
        }
      },
      "post": {
        "description": "Returns number of documents matching a query.",
        "operationId": "Count_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/count"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/count#index"
          },
          {
            "$ref": "#/components/parameters/count#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/count#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/count#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/count#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/count#min_score"
          },
          {
            "$ref": "#/components/parameters/count#preference"
          },
          {
            "$ref": "#/components/parameters/count#routing"
          },
          {
            "$ref": "#/components/parameters/count#q"
          },
          {
            "$ref": "#/components/parameters/count#analyzer"
          },
          {
            "$ref": "#/components/parameters/count#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/count#default_operator"
          },
          {
            "$ref": "#/components/parameters/count#df"
          },
          {
            "$ref": "#/components/parameters/count#lenient"
          },
          {
            "$ref": "#/components/parameters/count#terminate_after"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/count#200"
          }
        },
        "x-operation-group": "count",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_create/{id}": {
      "post": {
        "description": "Creates a new document in the index.\n\nReturns a 409 response when a document with a same ID already exists in the index.",
        "operationId": "Create_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/create"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/create#id"
          },
          {
            "$ref": "#/components/parameters/create#index"
          },
          {
            "$ref": "#/components/parameters/create#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/create#refresh"
          },
          {
            "$ref": "#/components/parameters/create#routing"
          },
          {
            "$ref": "#/components/parameters/create#timeout"
          },
          {
            "$ref": "#/components/parameters/create#version"
          },
          {
            "$ref": "#/components/parameters/create#version_type"
          },
          {
            "$ref": "#/components/parameters/create#pipeline"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/create#200"
          }
        },
        "x-operation-group": "create",
        "x-version-added": "1.0"
      },
      "put": {
        "description": "Creates a new document in the index.\n\nReturns a 409 response when a document with a same ID already exists in the index.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/index-document/"
        },
        "operationId": "Create_Put",
        "requestBody": {
          "$ref": "#/components/requestBodies/create"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/create#id"
          },
          {
            "$ref": "#/components/parameters/create#index"
          },
          {
            "$ref": "#/components/parameters/create#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/create#refresh"
          },
          {
            "$ref": "#/components/parameters/create#routing"
          },
          {
            "$ref": "#/components/parameters/create#timeout"
          },
          {
            "$ref": "#/components/parameters/create#version"
          },
          {
            "$ref": "#/components/parameters/create#version_type"
          },
          {
            "$ref": "#/components/parameters/create#pipeline"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/create#200"
          }
        },
        "x-operation-group": "create",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_delete_by_query": {
      "post": {
        "description": "Deletes documents matching the provided query.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/delete-by-query/"
        },
        "operationId": "DeleteByQuery",
        "requestBody": {
          "$ref": "#/components/requestBodies/delete_by_query"
        },
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "description": "Comma-separated list of data streams, indices, and aliases to search.\nSupports wildcards (`*`).\nTo search all data streams or indices, omit this parameter or use `*` or `_all`.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Indices"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "analyzer",
            "description": "Analyzer to use for the query string.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "analyze_wildcard",
            "description": "If `true`, wildcard and prefix queries are analyzed.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "default_operator",
            "description": "The default operator for query string query: `AND` or `OR`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.query_dsl.json#/components/schemas/Operator"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "df",
            "description": "Field to use as default where no field prefix is given in the query string.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from",
            "description": "Starting offset (default: 0)",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "ignore_unavailable",
            "description": "If `false`, the request returns an error if it targets a missing or closed index.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "allow_no_indices",
            "description": "If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices.\nThis behavior applies even if the request targets other open indices.\nFor example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "conflicts",
            "description": "What to do if delete by query hits version conflicts: `abort` or `proceed`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Conflicts"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "expand_wildcards",
            "description": "Type of index that wildcard patterns can match.\nIf the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.\nSupports comma-separated values, such as `open,hidden`. Valid values are: `all`, `open`, `closed`, `hidden`, `none`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "lenient",
            "description": "If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "preference",
            "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "description": "Query in the Lucene query string syntax.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "routing",
            "description": "Custom value used to route operations to a specific shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Routing"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "scroll",
            "description": "Period to retain the search context for scrolling.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search_type",
            "description": "The type of the search operation.\nAvailable options: `query_then_fetch`, `dfs_query_then_fetch`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/SearchType"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search_timeout",
            "description": "Explicit timeout for each search request.\nDefaults to no timeout.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Deprecated, please use `max_docs` instead.",
            "schema": {
              "type": "integer",
              "description": "Deprecated, please use `max_docs` instead.",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "max_docs",
            "description": "Maximum number of documents to process.\nDefaults to all documents.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "A comma-separated list of <field>:<direction> pairs.",
            "deprecated": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "name": "_source",
            "in": "query",
            "description": "True or false to return the _source field or not, or a list of fields to return.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "True or false to return the _source field or not, or a list of fields to return."
            },
            "explode": true
          },
          {
            "name": "_source_excludes",
            "in": "query",
            "description": "List of fields to exclude from the returned _source field.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of fields to exclude from the returned _source field."
            },
            "explode": true
          },
          {
            "name": "_source_includes",
            "in": "query",
            "description": "List of fields to extract and return from the _source field.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of fields to extract and return from the _source field."
            },
            "explode": true
          },
          {
            "in": "query",
            "name": "terminate_after",
            "description": "Maximum number of documents to collect for each shard.\nIf a query reaches this limit, Opensearch terminates the query early.\nOpensearch collects documents before sorting.\nUse with caution.\nOpensearch applies this parameter to each shard handling the request.\nWhen possible, let Opensearch perform early termination automatically.\nAvoid specifying this parameter for requests that target data streams with backing indices across multiple data tiers.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "stats",
            "description": "Specific `tag` of the request for logging and statistical purposes.",
            "deprecated": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version",
            "description": "If `true`, returns the document version as part of a hit.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "request_cache",
            "description": "If `true`, the request cache is used for this request.\nDefaults to the index-level setting.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "refresh",
            "description": "If `true`, Opensearch refreshes all shards involved in the delete by query after the request completes.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Period each deletion request waits for active shards.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "wait_for_active_shards",
            "description": "The number of shard copies that must be active before proceeding with the operation.\nSet to all or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/WaitForActiveShards"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "scroll_size",
            "description": "Size of the scroll request that powers the operation.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "wait_for_completion",
            "description": "If `true`, the request blocks until the operation is complete.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "requests_per_second",
            "description": "The throttle for this request in sub-requests per second.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "slices",
            "description": "The number of slices this task should be divided into.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Slices"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_by_query#200"
          }
        },
        "x-operation-group": "delete_by_query",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_doc": {
      "post": {
        "description": "Creates or updates a document in an index.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/index-document/"
        },
        "operationId": "Index_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/index"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index#index"
          },
          {
            "$ref": "#/components/parameters/index#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/index#op_type"
          },
          {
            "$ref": "#/components/parameters/index#refresh"
          },
          {
            "$ref": "#/components/parameters/index#routing"
          },
          {
            "$ref": "#/components/parameters/index#timeout"
          },
          {
            "$ref": "#/components/parameters/index#version"
          },
          {
            "$ref": "#/components/parameters/index#version_type"
          },
          {
            "$ref": "#/components/parameters/index#if_seq_no"
          },
          {
            "$ref": "#/components/parameters/index#if_primary_term"
          },
          {
            "$ref": "#/components/parameters/index#pipeline"
          },
          {
            "$ref": "#/components/parameters/index#require_alias"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/index#200"
          }
        },
        "x-operation-group": "index",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_doc/{id}": {
      "delete": {
        "description": "Removes a document from the index.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/delete-document/"
        },
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique identifier for the document.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "index",
            "description": "Name of the target index.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/IndexName"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "wait_for_active_shards",
            "description": "The number of shard copies that must be active before proceeding with the operation.\nSet to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/WaitForActiveShards"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "refresh",
            "description": "If `true`, Opensearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes.\nValid values: `true`, `false`, `wait_for`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Refresh"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "routing",
            "description": "Custom value used to route operations to a specific shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Routing"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Period to wait for active shards.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "if_seq_no",
            "description": "Only perform the operation if the document has this sequence number.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/SequenceNumber"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "if_primary_term",
            "description": "Only perform the operation if the document has this primary term.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version",
            "description": "Explicit version number for concurrency control.\nThe specified version must match the current version of the document for the request to succeed.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version_type",
            "description": "Specific version type: `external`, `external_gte`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionType"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete#200"
          }
        },
        "x-operation-group": "delete",
        "x-version-added": "1.0"
      },
      "get": {
        "description": "Returns a document.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
        },
        "operationId": "Get",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique identifier of the document.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "index",
            "description": "Name of the index that contains the document.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/IndexName"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "stored_fields",
            "description": "List of stored fields to return as part of a hit.\nIf no fields are specified, no stored fields are included in the response.\nIf this field is specified, the `_source` parameter defaults to false.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "preference",
            "description": "Specifies the node or shard the operation should be performed on. Random by default.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realtime",
            "description": "If `true`, the request is real-time as opposed to near-real-time.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "refresh",
            "description": "If true, Opensearch refreshes the affected shards to make this operation visible to search. If false, do nothing with refreshes.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "routing",
            "description": "Target the specified primary shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Routing"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source",
            "description": "True or false to return the _source field or not, or a list of fields to return.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_excludes",
            "description": "A comma-separated list of source fields to exclude in the response.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_includes",
            "description": "A comma-separated list of source fields to include in the response.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version",
            "description": "Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version_type",
            "description": "Specific version type: internal, external, external_gte.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionType"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get#200"
          }
        },
        "x-operation-group": "get",
        "x-version-added": "1.0"
      },
      "head": {
        "description": "Returns information about whether a document exists in an index.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
        },
        "operationId": "Exists",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Identifier of the document.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "index",
            "description": "Comma-separated list of data streams, indices, and aliases.\nSupports wildcards (`*`).",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/IndexName"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "stored_fields",
            "description": "List of stored fields to return as part of a hit.\nIf no fields are specified, no stored fields are included in the response.\nIf this field is specified, the `_source` parameter defaults to false.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "preference",
            "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realtime",
            "description": "If `true`, the request is real-time as opposed to near-real-time.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "refresh",
            "description": "If `true`, Opensearch refreshes all shards involved in the delete by query after the request completes.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "routing",
            "description": "Target the specified primary shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Routing"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source",
            "description": "`true` or `false` to return the `_source` field or not, or a list of fields to return.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_excludes",
            "description": "A comma-separated list of source fields to exclude in the response.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_includes",
            "description": "A comma-separated list of source fields to include in the response.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version",
            "description": "Explicit version number for concurrency control.\nThe specified version must match the current version of the document for the request to succeed.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version_type",
            "description": "Specific version type: `external`, `external_gte`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionType"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/exists#200"
          }
        },
        "x-operation-group": "exists",
        "x-version-added": "1.0"
      },
      "post": {
        "description": "Creates or updates a document in an index.",
        "operationId": "Index_Post_WithId",
        "requestBody": {
          "$ref": "#/components/requestBodies/index"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index#id"
          },
          {
            "$ref": "#/components/parameters/index#index"
          },
          {
            "$ref": "#/components/parameters/index#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/index#op_type"
          },
          {
            "$ref": "#/components/parameters/index#refresh"
          },
          {
            "$ref": "#/components/parameters/index#routing"
          },
          {
            "$ref": "#/components/parameters/index#timeout"
          },
          {
            "$ref": "#/components/parameters/index#version"
          },
          {
            "$ref": "#/components/parameters/index#version_type"
          },
          {
            "$ref": "#/components/parameters/index#if_seq_no"
          },
          {
            "$ref": "#/components/parameters/index#if_primary_term"
          },
          {
            "$ref": "#/components/parameters/index#pipeline"
          },
          {
            "$ref": "#/components/parameters/index#require_alias"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/index#200"
          }
        },
        "x-operation-group": "index",
        "x-version-added": "1.0"
      },
      "put": {
        "description": "Creates or updates a document in an index.",
        "operationId": "Index_Put_WithId",
        "requestBody": {
          "$ref": "#/components/requestBodies/index"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index#id"
          },
          {
            "$ref": "#/components/parameters/index#index"
          },
          {
            "$ref": "#/components/parameters/index#wait_for_active_shards"
          },
          {
            "$ref": "#/components/parameters/index#op_type"
          },
          {
            "$ref": "#/components/parameters/index#refresh"
          },
          {
            "$ref": "#/components/parameters/index#routing"
          },
          {
            "$ref": "#/components/parameters/index#timeout"
          },
          {
            "$ref": "#/components/parameters/index#version"
          },
          {
            "$ref": "#/components/parameters/index#version_type"
          },
          {
            "$ref": "#/components/parameters/index#if_seq_no"
          },
          {
            "$ref": "#/components/parameters/index#if_primary_term"
          },
          {
            "$ref": "#/components/parameters/index#pipeline"
          },
          {
            "$ref": "#/components/parameters/index#require_alias"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/index#200"
          }
        },
        "x-operation-group": "index",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_explain/{id}": {
      "get": {
        "description": "Returns information about why a specific matches (or doesn't match) a query.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/explain/"
        },
        "operationId": "Explain_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/explain#id"
          },
          {
            "$ref": "#/components/parameters/explain#index"
          },
          {
            "$ref": "#/components/parameters/explain#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/explain#analyzer"
          },
          {
            "$ref": "#/components/parameters/explain#default_operator"
          },
          {
            "$ref": "#/components/parameters/explain#df"
          },
          {
            "$ref": "#/components/parameters/explain#stored_fields"
          },
          {
            "$ref": "#/components/parameters/explain#lenient"
          },
          {
            "$ref": "#/components/parameters/explain#preference"
          },
          {
            "$ref": "#/components/parameters/explain#q"
          },
          {
            "$ref": "#/components/parameters/explain#routing"
          },
          {
            "$ref": "#/components/parameters/explain#_source"
          },
          {
            "$ref": "#/components/parameters/explain#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/explain#_source_includes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/explain#200"
          }
        },
        "x-operation-group": "explain",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/explain"
        }
      },
      "post": {
        "description": "Returns information about why a specific matches (or doesn't match) a query.",
        "operationId": "Explain_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/explain"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/explain#id"
          },
          {
            "$ref": "#/components/parameters/explain#index"
          },
          {
            "$ref": "#/components/parameters/explain#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/explain#analyzer"
          },
          {
            "$ref": "#/components/parameters/explain#default_operator"
          },
          {
            "$ref": "#/components/parameters/explain#df"
          },
          {
            "$ref": "#/components/parameters/explain#stored_fields"
          },
          {
            "$ref": "#/components/parameters/explain#lenient"
          },
          {
            "$ref": "#/components/parameters/explain#preference"
          },
          {
            "$ref": "#/components/parameters/explain#q"
          },
          {
            "$ref": "#/components/parameters/explain#routing"
          },
          {
            "$ref": "#/components/parameters/explain#_source"
          },
          {
            "$ref": "#/components/parameters/explain#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/explain#_source_includes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/explain#200"
          }
        },
        "x-operation-group": "explain",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_field_caps": {
      "get": {
        "description": "Returns the information about the capabilities of fields among multiple indices.",
        "operationId": "FieldCaps_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/field_caps#index"
          },
          {
            "$ref": "#/components/parameters/field_caps#fields"
          },
          {
            "$ref": "#/components/parameters/field_caps#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/field_caps#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/field_caps#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/field_caps#include_unmapped"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/field_caps#200"
          }
        },
        "x-operation-group": "field_caps",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/field_caps"
        }
      },
      "post": {
        "description": "Returns the information about the capabilities of fields among multiple indices.",
        "operationId": "FieldCaps_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/field_caps"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/field_caps#index"
          },
          {
            "$ref": "#/components/parameters/field_caps#fields"
          },
          {
            "$ref": "#/components/parameters/field_caps#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/field_caps#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/field_caps#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/field_caps#include_unmapped"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/field_caps#200"
          }
        },
        "x-operation-group": "field_caps",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_mget": {
      "get": {
        "description": "Allows to get multiple documents in one request.",
        "operationId": "Mget_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/mget#index"
          },
          {
            "$ref": "#/components/parameters/mget#stored_fields"
          },
          {
            "$ref": "#/components/parameters/mget#preference"
          },
          {
            "$ref": "#/components/parameters/mget#realtime"
          },
          {
            "$ref": "#/components/parameters/mget#refresh"
          },
          {
            "$ref": "#/components/parameters/mget#routing"
          },
          {
            "$ref": "#/components/parameters/mget#_source"
          },
          {
            "$ref": "#/components/parameters/mget#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/mget#_source_includes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mget#200"
          }
        },
        "x-operation-group": "mget",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/mget"
        }
      },
      "post": {
        "description": "Allows to get multiple documents in one request.",
        "operationId": "Mget_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/mget"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/mget#index"
          },
          {
            "$ref": "#/components/parameters/mget#stored_fields"
          },
          {
            "$ref": "#/components/parameters/mget#preference"
          },
          {
            "$ref": "#/components/parameters/mget#realtime"
          },
          {
            "$ref": "#/components/parameters/mget#refresh"
          },
          {
            "$ref": "#/components/parameters/mget#routing"
          },
          {
            "$ref": "#/components/parameters/mget#_source"
          },
          {
            "$ref": "#/components/parameters/mget#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/mget#_source_includes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mget#200"
          }
        },
        "x-operation-group": "mget",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_msearch": {
      "get": {
        "description": "Allows to execute several search operations in one request.",
        "operationId": "Msearch_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/msearch#index"
          },
          {
            "$ref": "#/components/parameters/msearch#search_type"
          },
          {
            "$ref": "#/components/parameters/msearch#max_concurrent_searches"
          },
          {
            "$ref": "#/components/parameters/msearch#typed_keys"
          },
          {
            "$ref": "#/components/parameters/msearch#pre_filter_shard_size"
          },
          {
            "$ref": "#/components/parameters/msearch#max_concurrent_shard_requests"
          },
          {
            "$ref": "#/components/parameters/msearch#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/msearch#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/msearch#200"
          }
        },
        "x-operation-group": "msearch",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/msearch"
        }
      },
      "post": {
        "description": "Allows to execute several search operations in one request.",
        "operationId": "Msearch_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/msearch"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/msearch#index"
          },
          {
            "$ref": "#/components/parameters/msearch#search_type"
          },
          {
            "$ref": "#/components/parameters/msearch#max_concurrent_searches"
          },
          {
            "$ref": "#/components/parameters/msearch#typed_keys"
          },
          {
            "$ref": "#/components/parameters/msearch#pre_filter_shard_size"
          },
          {
            "$ref": "#/components/parameters/msearch#max_concurrent_shard_requests"
          },
          {
            "$ref": "#/components/parameters/msearch#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/msearch#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/msearch#200"
          }
        },
        "x-operation-group": "msearch",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_msearch/template": {
      "get": {
        "description": "Allows to execute several search template operations in one request.",
        "operationId": "MsearchTemplate_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/msearch_template#index"
          },
          {
            "$ref": "#/components/parameters/msearch_template#search_type"
          },
          {
            "$ref": "#/components/parameters/msearch_template#typed_keys"
          },
          {
            "$ref": "#/components/parameters/msearch_template#max_concurrent_searches"
          },
          {
            "$ref": "#/components/parameters/msearch_template#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/msearch_template#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/msearch_template#200"
          }
        },
        "x-operation-group": "msearch_template",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/msearch_template"
        }
      },
      "post": {
        "description": "Allows to execute several search template operations in one request.",
        "operationId": "MsearchTemplate_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/msearch_template"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/msearch_template#index"
          },
          {
            "$ref": "#/components/parameters/msearch_template#search_type"
          },
          {
            "$ref": "#/components/parameters/msearch_template#typed_keys"
          },
          {
            "$ref": "#/components/parameters/msearch_template#max_concurrent_searches"
          },
          {
            "$ref": "#/components/parameters/msearch_template#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/msearch_template#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/msearch_template#200"
          }
        },
        "x-operation-group": "msearch_template",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_mtermvectors": {
      "get": {
        "description": "Returns multiple termvectors in one request.",
        "operationId": "Mtermvectors_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/mtermvectors#index"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#ids"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#term_statistics"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#field_statistics"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#fields"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#offsets"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#positions"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#payloads"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#preference"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#routing"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#realtime"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#version"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#version_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mtermvectors#200"
          }
        },
        "x-operation-group": "mtermvectors",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/mtermvectors"
        }
      },
      "post": {
        "description": "Returns multiple termvectors in one request.",
        "operationId": "Mtermvectors_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/mtermvectors"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/mtermvectors#index"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#ids"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#term_statistics"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#field_statistics"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#fields"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#offsets"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#positions"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#payloads"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#preference"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#routing"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#realtime"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#version"
          },
          {
            "$ref": "#/components/parameters/mtermvectors#version_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mtermvectors#200"
          }
        },
        "x-operation-group": "mtermvectors",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_rank_eval": {
      "get": {
        "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries.",
        "operationId": "RankEval_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/rank_eval#index"
          },
          {
            "$ref": "#/components/parameters/rank_eval#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/rank_eval#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/rank_eval#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/rank_eval#search_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/rank_eval#200"
          }
        },
        "x-operation-group": "rank_eval",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/rank_eval"
        }
      },
      "post": {
        "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries.",
        "operationId": "RankEval_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/rank_eval"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/rank_eval#index"
          },
          {
            "$ref": "#/components/parameters/rank_eval#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/rank_eval#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/rank_eval#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/rank_eval#search_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/rank_eval#200"
          }
        },
        "x-operation-group": "rank_eval",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_search": {
      "get": {
        "description": "Returns results matching a query.",
        "operationId": "Search_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/search#index"
          },
          {
            "$ref": "#/components/parameters/search#analyzer"
          },
          {
            "$ref": "#/components/parameters/search#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/search#ccs_minimize_roundtrips"
          },
          {
            "$ref": "#/components/parameters/search#default_operator"
          },
          {
            "$ref": "#/components/parameters/search#df"
          },
          {
            "$ref": "#/components/parameters/search#explain"
          },
          {
            "$ref": "#/components/parameters/search#stored_fields"
          },
          {
            "$ref": "#/components/parameters/search#docvalue_fields"
          },
          {
            "$ref": "#/components/parameters/search#from"
          },
          {
            "$ref": "#/components/parameters/search#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/search#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/search#lenient"
          },
          {
            "$ref": "#/components/parameters/search#preference"
          },
          {
            "$ref": "#/components/parameters/search#q"
          },
          {
            "$ref": "#/components/parameters/search#routing"
          },
          {
            "$ref": "#/components/parameters/search#scroll"
          },
          {
            "$ref": "#/components/parameters/search#search_type"
          },
          {
            "$ref": "#/components/parameters/search#size"
          },
          {
            "$ref": "#/components/parameters/search#sort"
          },
          {
            "$ref": "#/components/parameters/search#_source"
          },
          {
            "$ref": "#/components/parameters/search#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/search#_source_includes"
          },
          {
            "$ref": "#/components/parameters/search#terminate_after"
          },
          {
            "$ref": "#/components/parameters/search#stats"
          },
          {
            "$ref": "#/components/parameters/search#suggest_field"
          },
          {
            "$ref": "#/components/parameters/search#suggest_mode"
          },
          {
            "$ref": "#/components/parameters/search#suggest_size"
          },
          {
            "$ref": "#/components/parameters/search#suggest_text"
          },
          {
            "$ref": "#/components/parameters/search#timeout"
          },
          {
            "$ref": "#/components/parameters/search#track_scores"
          },
          {
            "$ref": "#/components/parameters/search#track_total_hits"
          },
          {
            "$ref": "#/components/parameters/search#allow_partial_search_results"
          },
          {
            "$ref": "#/components/parameters/search#typed_keys"
          },
          {
            "$ref": "#/components/parameters/search#version"
          },
          {
            "$ref": "#/components/parameters/search#seq_no_primary_term"
          },
          {
            "$ref": "#/components/parameters/search#request_cache"
          },
          {
            "$ref": "#/components/parameters/search#batched_reduce_size"
          },
          {
            "$ref": "#/components/parameters/search#max_concurrent_shard_requests"
          },
          {
            "$ref": "#/components/parameters/search#pre_filter_shard_size"
          },
          {
            "$ref": "#/components/parameters/search#rest_total_hits_as_int"
          },
          {
            "name": "search_pipeline",
            "in": "query",
            "description": "Customizable sequence of processing stages applied to search queries.",
            "schema": {
              "type": "string",
              "description": "Customizable sequence of processing stages applied to search queries."
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search#200"
          }
        },
        "x-operation-group": "search",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/search"
        }
      },
      "post": {
        "description": "Returns results matching a query.",
        "operationId": "Search_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/search"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/search#index"
          },
          {
            "$ref": "#/components/parameters/search#analyzer"
          },
          {
            "$ref": "#/components/parameters/search#analyze_wildcard"
          },
          {
            "$ref": "#/components/parameters/search#ccs_minimize_roundtrips"
          },
          {
            "$ref": "#/components/parameters/search#default_operator"
          },
          {
            "$ref": "#/components/parameters/search#df"
          },
          {
            "$ref": "#/components/parameters/search#explain"
          },
          {
            "$ref": "#/components/parameters/search#stored_fields"
          },
          {
            "$ref": "#/components/parameters/search#docvalue_fields"
          },
          {
            "$ref": "#/components/parameters/search#from"
          },
          {
            "$ref": "#/components/parameters/search#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/search#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/search#lenient"
          },
          {
            "$ref": "#/components/parameters/search#preference"
          },
          {
            "$ref": "#/components/parameters/search#q"
          },
          {
            "$ref": "#/components/parameters/search#routing"
          },
          {
            "$ref": "#/components/parameters/search#scroll"
          },
          {
            "$ref": "#/components/parameters/search#search_type"
          },
          {
            "$ref": "#/components/parameters/search#size"
          },
          {
            "$ref": "#/components/parameters/search#sort"
          },
          {
            "$ref": "#/components/parameters/search#_source"
          },
          {
            "$ref": "#/components/parameters/search#_source_excludes"
          },
          {
            "$ref": "#/components/parameters/search#_source_includes"
          },
          {
            "$ref": "#/components/parameters/search#terminate_after"
          },
          {
            "$ref": "#/components/parameters/search#stats"
          },
          {
            "$ref": "#/components/parameters/search#suggest_field"
          },
          {
            "$ref": "#/components/parameters/search#suggest_mode"
          },
          {
            "$ref": "#/components/parameters/search#suggest_size"
          },
          {
            "$ref": "#/components/parameters/search#suggest_text"
          },
          {
            "$ref": "#/components/parameters/search#timeout"
          },
          {
            "$ref": "#/components/parameters/search#track_scores"
          },
          {
            "$ref": "#/components/parameters/search#track_total_hits"
          },
          {
            "$ref": "#/components/parameters/search#allow_partial_search_results"
          },
          {
            "$ref": "#/components/parameters/search#typed_keys"
          },
          {
            "$ref": "#/components/parameters/search#version"
          },
          {
            "$ref": "#/components/parameters/search#seq_no_primary_term"
          },
          {
            "$ref": "#/components/parameters/search#request_cache"
          },
          {
            "$ref": "#/components/parameters/search#batched_reduce_size"
          },
          {
            "$ref": "#/components/parameters/search#max_concurrent_shard_requests"
          },
          {
            "$ref": "#/components/parameters/search#pre_filter_shard_size"
          },
          {
            "$ref": "#/components/parameters/search#rest_total_hits_as_int"
          },
          {
            "name": "search_pipeline",
            "in": "query",
            "description": "Customizable sequence of processing stages applied to search queries.",
            "schema": {
              "type": "string",
              "description": "Customizable sequence of processing stages applied to search queries."
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search#200"
          }
        },
        "x-operation-group": "search",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_search/point_in_time": {
      "post": {
        "description": "Creates point in time context.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#create-a-pit"
        },
        "operationId": "CreatePit",
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
            "schema": {
              "type": "string",
              "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
              "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
              "x-data-type": "array"
            },
            "required": true
          },
          {
            "name": "allow_partial_pit_creation",
            "in": "query",
            "description": "Allow if point in time can be created with partial failures.",
            "schema": {
              "type": "boolean",
              "description": "Allow if point in time can be created with partial failures."
            }
          },
          {
            "name": "keep_alive",
            "in": "query",
            "description": "Specify the keep alive for point in time.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          },
          {
            "name": "preference",
            "in": "query",
            "description": "Specify the node or shard the operation should be performed on.",
            "schema": {
              "type": "string",
              "default": "random",
              "description": "Specify the node or shard the operation should be performed on."
            }
          },
          {
            "name": "routing",
            "in": "query",
            "description": "Comma-separated list of specific routing values.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Comma-separated list of specific routing values."
            },
            "explode": true
          },
          {
            "name": "expand_wildcards",
            "in": "query",
            "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/create_pit#200"
          }
        },
        "x-operation-group": "create_pit",
        "x-version-added": "2.4"
      }
    },
    "/{index}/_search/template": {
      "get": {
        "description": "Allows to use the Mustache language to pre-render a search definition.",
        "operationId": "SearchTemplate_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_template#index"
          },
          {
            "$ref": "#/components/parameters/search_template#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search_template#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/search_template#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search_template#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/search_template#preference"
          },
          {
            "$ref": "#/components/parameters/search_template#routing"
          },
          {
            "$ref": "#/components/parameters/search_template#scroll"
          },
          {
            "$ref": "#/components/parameters/search_template#search_type"
          },
          {
            "$ref": "#/components/parameters/search_template#explain"
          },
          {
            "$ref": "#/components/parameters/search_template#profile"
          },
          {
            "$ref": "#/components/parameters/search_template#typed_keys"
          },
          {
            "$ref": "#/components/parameters/search_template#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/search_template#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search_template#200"
          }
        },
        "x-operation-group": "search_template",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/search_template"
        }
      },
      "post": {
        "description": "Allows to use the Mustache language to pre-render a search definition.",
        "operationId": "SearchTemplate_Post_WithIndex",
        "requestBody": {
          "$ref": "#/components/requestBodies/search_template"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/search_template#index"
          },
          {
            "$ref": "#/components/parameters/search_template#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search_template#ignore_throttled"
          },
          {
            "$ref": "#/components/parameters/search_template#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search_template#expand_wildcards"
          },
          {
            "$ref": "#/components/parameters/search_template#preference"
          },
          {
            "$ref": "#/components/parameters/search_template#routing"
          },
          {
            "$ref": "#/components/parameters/search_template#scroll"
          },
          {
            "$ref": "#/components/parameters/search_template#search_type"
          },
          {
            "$ref": "#/components/parameters/search_template#explain"
          },
          {
            "$ref": "#/components/parameters/search_template#profile"
          },
          {
            "$ref": "#/components/parameters/search_template#typed_keys"
          },
          {
            "$ref": "#/components/parameters/search_template#rest_total_hits_as_int"
          },
          {
            "$ref": "#/components/parameters/search_template#ccs_minimize_roundtrips"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search_template#200"
          }
        },
        "x-operation-group": "search_template",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_search_shards": {
      "get": {
        "description": "Returns information about the indices and shards that a search request would be executed against.",
        "operationId": "SearchShards_Get_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_shards#index"
          },
          {
            "$ref": "#/components/parameters/search_shards#preference"
          },
          {
            "$ref": "#/components/parameters/search_shards#routing"
          },
          {
            "$ref": "#/components/parameters/search_shards#local"
          },
          {
            "$ref": "#/components/parameters/search_shards#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search_shards#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search_shards#expand_wildcards"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search_shards#200"
          }
        },
        "x-operation-group": "search_shards",
        "x-version-added": "1.0"
      },
      "post": {
        "description": "Returns information about the indices and shards that a search request would be executed against.",
        "operationId": "SearchShards_Post_WithIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_shards#index"
          },
          {
            "$ref": "#/components/parameters/search_shards#preference"
          },
          {
            "$ref": "#/components/parameters/search_shards#routing"
          },
          {
            "$ref": "#/components/parameters/search_shards#local"
          },
          {
            "$ref": "#/components/parameters/search_shards#ignore_unavailable"
          },
          {
            "$ref": "#/components/parameters/search_shards#allow_no_indices"
          },
          {
            "$ref": "#/components/parameters/search_shards#expand_wildcards"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/search_shards#200"
          }
        },
        "x-operation-group": "search_shards",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_source/{id}": {
      "get": {
        "description": "Returns the source of a document.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
        },
        "operationId": "GetSource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique identifier of the document.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "index",
            "description": "Name of the index that contains the document.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/IndexName"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "preference",
            "description": "Specifies the node or shard the operation should be performed on. Random by default.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realtime",
            "description": "Boolean) If true, the request is real-time as opposed to near-real-time.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "refresh",
            "description": "If true, Opensearch refreshes the affected shards to make this operation visible to search. If false, do nothing with refreshes.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "routing",
            "description": "Target the specified primary shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Routing"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source",
            "description": "True or false to return the _source field or not, or a list of fields to return.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_excludes",
            "description": "A comma-separated list of source fields to exclude in the response.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_includes",
            "description": "A comma-separated list of source fields to include in the response.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version",
            "description": "Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version_type",
            "description": "Specific version type: internal, external, external_gte.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionType"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_source#200"
          }
        },
        "x-operation-group": "get_source",
        "x-version-added": "1.0"
      },
      "head": {
        "description": "Returns information about whether a document source exists in an index.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
        },
        "operationId": "ExistsSource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Identifier of the document.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "index",
            "description": "Comma-separated list of data streams, indices, and aliases.\nSupports wildcards (`*`).",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/IndexName"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "preference",
            "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realtime",
            "description": "If true, the request is real-time as opposed to near-real-time.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "refresh",
            "description": "If `true`, Opensearch refreshes all shards involved in the delete by query after the request completes.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "routing",
            "description": "Target the specified primary shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Routing"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source",
            "description": "`true` or `false` to return the `_source` field or not, or a list of fields to return.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_excludes",
            "description": "A comma-separated list of source fields to exclude in the response.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_includes",
            "description": "A comma-separated list of source fields to include in the response.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version",
            "description": "Explicit version number for concurrency control.\nThe specified version must match the current version of the document for the request to succeed.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version_type",
            "description": "Specific version type: `external`, `external_gte`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/VersionType"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/exists_source#200"
          }
        },
        "x-operation-group": "exists_source",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_termvectors": {
      "get": {
        "description": "Returns information and statistics about terms in the fields of a particular document.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "Termvectors_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/termvectors#index"
          },
          {
            "$ref": "#/components/parameters/termvectors#term_statistics"
          },
          {
            "$ref": "#/components/parameters/termvectors#field_statistics"
          },
          {
            "$ref": "#/components/parameters/termvectors#fields"
          },
          {
            "$ref": "#/components/parameters/termvectors#offsets"
          },
          {
            "$ref": "#/components/parameters/termvectors#positions"
          },
          {
            "$ref": "#/components/parameters/termvectors#payloads"
          },
          {
            "$ref": "#/components/parameters/termvectors#preference"
          },
          {
            "$ref": "#/components/parameters/termvectors#routing"
          },
          {
            "$ref": "#/components/parameters/termvectors#realtime"
          },
          {
            "$ref": "#/components/parameters/termvectors#version"
          },
          {
            "$ref": "#/components/parameters/termvectors#version_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/termvectors#200"
          }
        },
        "x-operation-group": "termvectors",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/termvectors"
        }
      },
      "post": {
        "description": "Returns information and statistics about terms in the fields of a particular document.",
        "operationId": "Termvectors_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/termvectors"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/termvectors#index"
          },
          {
            "$ref": "#/components/parameters/termvectors#term_statistics"
          },
          {
            "$ref": "#/components/parameters/termvectors#field_statistics"
          },
          {
            "$ref": "#/components/parameters/termvectors#fields"
          },
          {
            "$ref": "#/components/parameters/termvectors#offsets"
          },
          {
            "$ref": "#/components/parameters/termvectors#positions"
          },
          {
            "$ref": "#/components/parameters/termvectors#payloads"
          },
          {
            "$ref": "#/components/parameters/termvectors#preference"
          },
          {
            "$ref": "#/components/parameters/termvectors#routing"
          },
          {
            "$ref": "#/components/parameters/termvectors#realtime"
          },
          {
            "$ref": "#/components/parameters/termvectors#version"
          },
          {
            "$ref": "#/components/parameters/termvectors#version_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/termvectors#200"
          }
        },
        "x-operation-group": "termvectors",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_termvectors/{id}": {
      "get": {
        "description": "Returns information and statistics about terms in the fields of a particular document.",
        "operationId": "Termvectors_Get_WithId",
        "parameters": [
          {
            "$ref": "#/components/parameters/termvectors#index"
          },
          {
            "$ref": "#/components/parameters/termvectors#id"
          },
          {
            "$ref": "#/components/parameters/termvectors#term_statistics"
          },
          {
            "$ref": "#/components/parameters/termvectors#field_statistics"
          },
          {
            "$ref": "#/components/parameters/termvectors#fields"
          },
          {
            "$ref": "#/components/parameters/termvectors#offsets"
          },
          {
            "$ref": "#/components/parameters/termvectors#positions"
          },
          {
            "$ref": "#/components/parameters/termvectors#payloads"
          },
          {
            "$ref": "#/components/parameters/termvectors#preference"
          },
          {
            "$ref": "#/components/parameters/termvectors#routing"
          },
          {
            "$ref": "#/components/parameters/termvectors#realtime"
          },
          {
            "$ref": "#/components/parameters/termvectors#version"
          },
          {
            "$ref": "#/components/parameters/termvectors#version_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/termvectors#200"
          }
        },
        "x-operation-group": "termvectors",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/termvectors"
        }
      },
      "post": {
        "description": "Returns information and statistics about terms in the fields of a particular document.",
        "operationId": "Termvectors_Post_WithId",
        "requestBody": {
          "$ref": "#/components/requestBodies/termvectors"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/termvectors#index"
          },
          {
            "$ref": "#/components/parameters/termvectors#id"
          },
          {
            "$ref": "#/components/parameters/termvectors#term_statistics"
          },
          {
            "$ref": "#/components/parameters/termvectors#field_statistics"
          },
          {
            "$ref": "#/components/parameters/termvectors#fields"
          },
          {
            "$ref": "#/components/parameters/termvectors#offsets"
          },
          {
            "$ref": "#/components/parameters/termvectors#positions"
          },
          {
            "$ref": "#/components/parameters/termvectors#payloads"
          },
          {
            "$ref": "#/components/parameters/termvectors#preference"
          },
          {
            "$ref": "#/components/parameters/termvectors#routing"
          },
          {
            "$ref": "#/components/parameters/termvectors#realtime"
          },
          {
            "$ref": "#/components/parameters/termvectors#version"
          },
          {
            "$ref": "#/components/parameters/termvectors#version_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/termvectors#200"
          }
        },
        "x-operation-group": "termvectors",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_update/{id}": {
      "post": {
        "description": "Updates a document with a script or partial document.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/update-document/"
        },
        "operationId": "Update",
        "requestBody": {
          "$ref": "#/components/requestBodies/update"
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Document ID",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "index",
            "description": "The name of the index",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/IndexName"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "wait_for_active_shards",
            "description": "The number of shard copies that must be active before proceeding with the operations.\nSet to 'all' or any positive integer up to the total number of shards in the index\n(number_of_replicas+1). Defaults to 1 meaning the primary shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/WaitForActiveShards"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source",
            "description": "Set to false to disable source retrieval. You can also specify a comma-separated\nlist of the fields you want to retrieve.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_excludes",
            "description": "Specify the source fields you want to exclude.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "_source_includes",
            "description": "Specify the source fields you want to retrieve.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Fields"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "lang",
            "description": "The script language.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "refresh",
            "description": "If 'true', Opensearch refreshes the affected shards to make this operation\nvisible to search, if 'wait_for' then wait for a refresh to make this operation\nvisible to search, if 'false' do nothing with refreshes.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Refresh"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "retry_on_conflict",
            "description": "Specify how many times should the operation be retried when a conflict occurs.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "routing",
            "description": "Custom value used to route operations to a specific shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Routing"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Period to wait for dynamic mapping updates and active shards.\nThis guarantees Opensearch waits for at least the timeout before failing.\nThe actual wait time could be longer, particularly when multiple waits occur.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "if_seq_no",
            "description": "Only perform the operation if the document has this sequence number.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/SequenceNumber"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "if_primary_term",
            "description": "Only perform the operation if the document has this primary term.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "require_alias",
            "description": "If true, the destination must be an index alias.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/update#200"
          }
        },
        "x-operation-group": "update",
        "x-version-added": "1.0"
      }
    },
    "/{index}/_update_by_query": {
      "post": {
        "description": "Performs an update on every document in the index without changing the source,\nfor example to pick up a mapping change.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/document-apis/update-by-query/"
        },
        "operationId": "UpdateByQuery",
        "requestBody": {
          "$ref": "#/components/requestBodies/update_by_query"
        },
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "description": "Comma-separated list of data streams, indices, and aliases to search.\nSupports wildcards (`*`).\nTo search all data streams or indices, omit this parameter or use `*` or `_all`.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Indices"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "analyzer",
            "description": "Analyzer to use for the query string.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "analyze_wildcard",
            "description": "If `true`, wildcard and prefix queries are analyzed.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "default_operator",
            "description": "The default operator for query string query: `AND` or `OR`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.query_dsl.json#/components/schemas/Operator"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "df",
            "description": "Field to use as default where no field prefix is given in the query string.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "from",
            "description": "Starting offset (default: 0)",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "ignore_unavailable",
            "description": "If `false`, the request returns an error if it targets a missing or closed index.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "allow_no_indices",
            "description": "If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices.\nThis behavior applies even if the request targets other open indices.\nFor example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "conflicts",
            "description": "What to do if update by query hits version conflicts: `abort` or `proceed`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Conflicts"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "expand_wildcards",
            "description": "Type of index that wildcard patterns can match.\nIf the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.\nSupports comma-separated values, such as `open,hidden`.\nValid values are: `all`, `open`, `closed`, `hidden`, `none`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "lenient",
            "description": "If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "pipeline",
            "description": "ID of the pipeline to use to preprocess incoming documents.\nIf the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request.\nIf a final pipeline is configured it will always run, regardless of the value of this parameter.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "preference",
            "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
            "deprecated": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Query in the Lucene query string syntax.",
            "schema": {
              "type": "string",
              "description": "Query in the Lucene query string syntax."
            }
          },
          {
            "in": "query",
            "name": "routing",
            "description": "Custom value used to route operations to a specific shard.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Routing"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "scroll",
            "description": "Period to retain the search context for scrolling.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search_type",
            "description": "The type of the search operation. Available options: `query_then_fetch`, `dfs_query_then_fetch`.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/SearchType"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search_timeout",
            "description": "Explicit timeout for each search request.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Deprecated, please use `max_docs` instead.",
            "schema": {
              "type": "integer",
              "description": "Deprecated, please use `max_docs` instead.",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "max_docs",
            "description": "Maximum number of documents to process.\nDefaults to all documents.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "A comma-separated list of <field>:<direction> pairs.",
            "deprecated": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "name": "_source",
            "in": "query",
            "description": "True or false to return the _source field or not, or a list of fields to return.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "True or false to return the _source field or not, or a list of fields to return."
            },
            "explode": true
          },
          {
            "name": "_source_excludes",
            "in": "query",
            "description": "List of fields to exclude from the returned _source field.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of fields to exclude from the returned _source field."
            },
            "explode": true
          },
          {
            "name": "_source_includes",
            "in": "query",
            "description": "List of fields to extract and return from the _source field.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of fields to extract and return from the _source field."
            },
            "explode": true
          },
          {
            "in": "query",
            "name": "terminate_after",
            "description": "Maximum number of documents to collect for each shard.\nIf a query reaches this limit, Opensearch terminates the query early.\nOpensearch collects documents before sorting.\nUse with caution.\nOpensearch applies this parameter to each shard handling the request.\nWhen possible, let Opensearch perform early termination automatically.\nAvoid specifying this parameter for requests that target data streams with backing indices across multiple data tiers.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "stats",
            "description": "Specific `tag` of the request for logging and statistical purposes.",
            "deprecated": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "version",
            "description": "If `true`, returns the document version as part of a hit.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "request_cache",
            "description": "If `true`, the request cache is used for this request.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "refresh",
            "description": "If `true`, Opensearch refreshes affected shards to make the operation visible to search.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Period each update request waits for the following operations: dynamic mapping updates, waiting for active shards.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "wait_for_active_shards",
            "description": "The number of shard copies that must be active before proceeding with the operation.\nSet to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/WaitForActiveShards"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "scroll_size",
            "description": "Size of the scroll request that powers the operation.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "wait_for_completion",
            "description": "If `true`, the request blocks until the operation is complete.",
            "deprecated": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "requests_per_second",
            "description": "The throttle for this request in sub-requests per second.",
            "deprecated": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "slices",
            "description": "The number of slices this task should be divided into.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Slices"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/update_by_query#200"
          }
        },
        "x-operation-group": "update_by_query",
        "x-version-added": "1.0"
      }
    }
  },
  "components": {
    "requestBodies": {
      "bulk": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "../schemas/_core.bulk.json#/components/schemas/OperationContainer"
                  },
                  {
                    "$ref": "../schemas/_core.bulk.json#/components/schemas/UpdateAction"
                  },
                  {
                    "type": "object"
                  }
                ]
              },
              "description": "The operation definition and data (action-data pairs), separated by newlines",
              "x-serialize": "bulk"
            }
          }
        },
        "required": true
      },
      "clear_scroll": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "scroll_id": {
                  "$ref": "../schemas/_common.json#/components/schemas/ScrollIds"
                }
              },
              "description": "Comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter"
            }
          }
        }
      },
      "count": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "$ref": "../schemas/_common.query_dsl.json#/components/schemas/QueryContainer"
                }
              },
              "description": "Query to restrict the results specified with the Query DSL (optional)"
            }
          }
        }
      },
      "create": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "The document"
            }
          }
        },
        "required": true
      },
      "explain": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "$ref": "../schemas/_common.query_dsl.json#/components/schemas/QueryContainer"
                }
              },
              "description": "The query definition using the Query DSL"
            }
          }
        }
      },
      "field_caps": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "fields": {
                  "$ref": "../schemas/_common.json#/components/schemas/Fields"
                },
                "index_filter": {
                  "$ref": "../schemas/_common.query_dsl.json#/components/schemas/QueryContainer"
                },
                "runtime_mappings": {
                  "$ref": "../schemas/_common.mapping.json#/components/schemas/RuntimeFields"
                }
              },
              "description": "An index filter specified with the Query DSL"
            }
          }
        }
      },
      "index": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "The document"
            }
          }
        },
        "required": true
      },
      "mget": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "docs": {
                  "description": "The documents you want to retrieve. Required if no index is specified in the request URI.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core.mget.json#/components/schemas/Operation"
                  }
                },
                "ids": {
                  "$ref": "../schemas/_common.json#/components/schemas/Ids"
                }
              },
              "description": "Document identifiers; can be either `docs` (containing full document information) or `ids` (when index is provided in the URL."
            }
          }
        },
        "required": true
      },
      "msearch": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "../schemas/_core.msearch.json#/components/schemas/RequestItem"
              },
              "description": "The request definitions (metadata-search request definition pairs), separated by newlines",
              "x-serialize": "bulk"
            }
          }
        },
        "required": true
      },
      "msearch_template": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "../schemas/_core.msearch_template.json#/components/schemas/RequestItem"
              },
              "description": "The request definitions (metadata-search request definition pairs), separated by newlines",
              "x-serialize": "bulk"
            }
          }
        },
        "required": true
      },
      "mtermvectors": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "docs": {
                  "description": "Array of existing or artificial documents.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core.mtermvectors.json#/components/schemas/Operation"
                  }
                },
                "ids": {
                  "description": "Simplified syntax to specify documents by their ID if they're in the same index.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_common.json#/components/schemas/Id"
                  }
                }
              },
              "description": "Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation."
            }
          }
        }
      },
      "put_script": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "script": {
                  "$ref": "../schemas/_common.json#/components/schemas/StoredScript"
                }
              },
              "required": [
                "script"
              ],
              "description": "The document"
            }
          }
        },
        "required": true
      },
      "rank_eval": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "requests": {
                  "description": "A set of typical search requests, together with their provided ratings.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core.rank_eval.json#/components/schemas/RankEvalRequestItem"
                  }
                },
                "metric": {
                  "$ref": "../schemas/_core.rank_eval.json#/components/schemas/RankEvalMetric"
                }
              },
              "required": [
                "requests"
              ],
              "description": "The ranking evaluation search definition, including search requests, document ratings and ranking metric definition."
            }
          }
        },
        "required": true
      },
      "render_search_template": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "file": {
                  "type": "string"
                },
                "params": {
                  "description": "Key-value pairs used to replace Mustache variables in the template.\nThe key is the variable name.\nThe value is the variable value.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "source": {
                  "description": "An inline search template.\nSupports the same parameters as the search API's request body.\nThese parameters also support Mustache variables.\nIf no `id` or `<templated-id>` is specified, this parameter is required.",
                  "type": "string"
                }
              },
              "description": "The search definition template and its params"
            }
          }
        }
      },
      "scripts_painless_execute": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "description": "The context that the script should run in.",
                  "type": "string"
                },
                "context_setup": {
                  "$ref": "../schemas/_core.scripts_painless_execute.json#/components/schemas/PainlessContextSetup"
                },
                "script": {
                  "$ref": "../schemas/_common.json#/components/schemas/InlineScript"
                }
              },
              "description": "The script to execute"
            }
          }
        }
      },
      "scroll": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "scroll": {
                  "$ref": "../schemas/_common.json#/components/schemas/Duration"
                },
                "scroll_id": {
                  "$ref": "../schemas/_common.json#/components/schemas/ScrollId"
                }
              },
              "required": [
                "scroll_id"
              ],
              "description": "The scroll ID if not passed by URL or query parameter."
            }
          }
        }
      },
      "search": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "aggregations": {
                  "description": "Defines the aggregations that are run as part of the search request.",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_common.aggregations.json#/components/schemas/AggregationContainer"
                  }
                },
                "collapse": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/FieldCollapse"
                },
                "explain": {
                  "description": "If true, returns detailed information about score computation as part of a hit.",
                  "type": "boolean"
                },
                "ext": {
                  "description": "Configuration of search extensions defined by Opensearch plugins.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "from": {
                  "description": "Starting document offset.\nNeeds to be non-negative.\nBy default, you cannot page through more than 10,000 hits using the `from` and `size` parameters.\nTo page through more hits, use the `search_after` parameter.",
                  "type": "number"
                },
                "highlight": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/Highlight"
                },
                "track_total_hits": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/TrackHits"
                },
                "indices_boost": {
                  "description": "Boosts the _score of documents from specified indices.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "number"
                    }
                  }
                },
                "docvalue_fields": {
                  "description": "Array of wildcard (`*`) patterns.\nThe request returns doc values for field names matching these patterns in the `hits.fields` property of the response.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_common.query_dsl.json#/components/schemas/FieldAndFormat"
                  }
                },
                "knn": {
                  "description": "Defines the approximate kNN search to run.",
                  "oneOf": [
                    {
                      "$ref": "../schemas/_common.json#/components/schemas/KnnQuery"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "../schemas/_common.json#/components/schemas/KnnQuery"
                      }
                    }
                  ]
                },
                "rank": {
                  "$ref": "../schemas/_common.json#/components/schemas/RankContainer"
                },
                "min_score": {
                  "description": "Minimum `_score` for matching documents.\nDocuments with a lower `_score` are not included in the search results.",
                  "type": "number"
                },
                "post_filter": {
                  "$ref": "../schemas/_common.query_dsl.json#/components/schemas/QueryContainer"
                },
                "profile": {
                  "description": "Set to `true` to return detailed timing information about the execution of individual components in a search request.\nNOTE: This is a debugging tool and adds significant overhead to search execution.",
                  "type": "boolean"
                },
                "query": {
                  "$ref": "../schemas/_common.query_dsl.json#/components/schemas/QueryContainer"
                },
                "rescore": {
                  "description": "Can be used to improve precision by reordering just the top (for example 100 - 500) documents returned by the `query` and `post_filter` phases.",
                  "oneOf": [
                    {
                      "$ref": "../schemas/_core.search.json#/components/schemas/Rescore"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "../schemas/_core.search.json#/components/schemas/Rescore"
                      }
                    }
                  ]
                },
                "script_fields": {
                  "description": "Retrieve a script evaluation (based on different fields) for each hit.",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_common.json#/components/schemas/ScriptField"
                  }
                },
                "search_after": {
                  "$ref": "../schemas/_common.json#/components/schemas/SortResults"
                },
                "size": {
                  "description": "The number of hits to return.\nBy default, you cannot page through more than 10,000 hits using the `from` and `size` parameters.\nTo page through more hits, use the `search_after` parameter.",
                  "type": "number"
                },
                "slice": {
                  "$ref": "../schemas/_common.json#/components/schemas/SlicedScroll"
                },
                "sort": {
                  "$ref": "../schemas/_common.json#/components/schemas/Sort"
                },
                "_source": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfig"
                },
                "fields": {
                  "description": "Array of wildcard (`*`) patterns.\nThe request returns values for field names matching these patterns in the `hits.fields` property of the response.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_common.query_dsl.json#/components/schemas/FieldAndFormat"
                  }
                },
                "suggest": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/Suggester"
                },
                "terminate_after": {
                  "description": "Maximum number of documents to collect for each shard.\nIf a query reaches this limit, Opensearch terminates the query early.\nOpensearch collects documents before sorting.\nUse with caution.\nOpensearch applies this parameter to each shard handling the request.\nWhen possible, let Opensearch perform early termination automatically.\nAvoid specifying this parameter for requests that target data streams with backing indices across multiple data tiers.\nIf set to `0` (default), the query does not terminate early.",
                  "type": "number"
                },
                "timeout": {
                  "description": "Specifies the period of time to wait for a response from each shard.\nIf no response is received before the timeout expires, the request fails and returns an error.\nDefaults to no timeout.",
                  "type": "string"
                },
                "track_scores": {
                  "description": "If true, calculate and return document scores, even if the scores are not used for sorting.",
                  "type": "boolean"
                },
                "version": {
                  "description": "If true, returns document version as part of a hit.",
                  "type": "boolean"
                },
                "seq_no_primary_term": {
                  "description": "If `true`, returns sequence number and primary term of the last modification of each hit.",
                  "type": "boolean"
                },
                "stored_fields": {
                  "$ref": "../schemas/_common.json#/components/schemas/Fields"
                },
                "pit": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/PointInTimeReference"
                },
                "runtime_mappings": {
                  "$ref": "../schemas/_common.mapping.json#/components/schemas/RuntimeFields"
                },
                "stats": {
                  "description": "Stats groups to associate with the search.\nEach group maintains a statistics aggregation for its associated searches.\nYou can retrieve these stats using the indices stats API.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "description": "The search definition using the Query DSL"
            }
          }
        }
      },
      "search_template": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "explain": {
                  "description": "If `true`, returns detailed information about score calculation as part of each hit.",
                  "type": "boolean"
                },
                "id": {
                  "$ref": "../schemas/_common.json#/components/schemas/Id"
                },
                "params": {
                  "description": "Key-value pairs used to replace Mustache variables in the template.\nThe key is the variable name.\nThe value is the variable value.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "profile": {
                  "description": "If `true`, the query execution is profiled.",
                  "type": "boolean"
                },
                "source": {
                  "description": "An inline search template. Supports the same parameters as the search API's\nrequest body. Also supports Mustache variables. If no id is specified, this\nparameter is required.",
                  "type": "string"
                }
              },
              "description": "The search definition template and its params"
            }
          }
        },
        "required": true
      },
      "termvectors": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "doc": {
                  "description": "An artificial document (a document not present in the index) for which you want to retrieve term vectors.",
                  "type": "object"
                },
                "filter": {
                  "$ref": "../schemas/_core.termvectors.json#/components/schemas/Filter"
                },
                "per_field_analyzer": {
                  "description": "Overrides the default per-field analyzer.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "description": "Define parameters and or supply a document to get termvectors for. See documentation."
            }
          }
        }
      },
      "reindex": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "conflicts": {
                  "$ref": "../schemas/_common.json#/components/schemas/Conflicts"
                },
                "dest": {
                  "$ref": "../schemas/_core.reindex.json#/components/schemas/Destination"
                },
                "max_docs": {
                  "description": "The maximum number of documents to reindex.",
                  "type": "number"
                },
                "script": {
                  "$ref": "../schemas/_common.json#/components/schemas/Script"
                },
                "size": {
                  "type": "number"
                },
                "source": {
                  "$ref": "../schemas/_core.reindex.json#/components/schemas/Source"
                }
              },
              "required": [
                "dest",
                "source"
              ],
              "description": "The search definition using the Query DSL and the prototype for the index request."
            }
          }
        },
        "required": true
      },
      "delete_pit": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "The point-in-time ids to be deleted",
              "properties": {
                "pit_id": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "pit_id"
              ]
            }
          }
        }
      },
      "delete_by_query": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "max_docs": {
                  "description": "The maximum number of documents to delete.",
                  "type": "number"
                },
                "query": {
                  "$ref": "../schemas/_common.query_dsl.json#/components/schemas/QueryContainer"
                },
                "slice": {
                  "$ref": "../schemas/_common.json#/components/schemas/SlicedScroll"
                }
              },
              "description": "The search definition using the Query DSL"
            }
          }
        },
        "required": true
      },
      "update": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detect_noop": {
                  "description": "Set to false to disable setting 'result' in the response\nto 'noop' if no change to the document occurred.",
                  "type": "boolean"
                },
                "doc": {
                  "description": "A partial update to an existing document.",
                  "type": "object"
                },
                "doc_as_upsert": {
                  "description": "Set to true to use the contents of 'doc' as the value of 'upsert'",
                  "type": "boolean"
                },
                "script": {
                  "$ref": "../schemas/_common.json#/components/schemas/Script"
                },
                "scripted_upsert": {
                  "description": "Set to true to execute the script whether or not the document exists.",
                  "type": "boolean"
                },
                "_source": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfig"
                },
                "upsert": {
                  "description": "If the document does not already exist, the contents of 'upsert' are inserted as a\nnew document. If the document exists, the 'script' is executed.",
                  "type": "object"
                }
              },
              "description": "The request definition requires either `script` or partial `doc`"
            }
          }
        },
        "required": true
      },
      "update_by_query": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "max_docs": {
                  "description": "The maximum number of documents to update.",
                  "type": "number"
                },
                "query": {
                  "$ref": "../schemas/_common.query_dsl.json#/components/schemas/QueryContainer"
                },
                "script": {
                  "$ref": "../schemas/_common.json#/components/schemas/Script"
                },
                "slice": {
                  "$ref": "../schemas/_common.json#/components/schemas/SlicedScroll"
                },
                "conflicts": {
                  "$ref": "../schemas/_common.json#/components/schemas/Conflicts"
                }
              },
              "description": "The search definition using the Query DSL"
            }
          }
        }
      }
    },
    "responses": {
      "bulk#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "boolean"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "../schemas/_core.bulk.json#/components/schemas/ResponseItem"
                    },
                    "minProperties": 1,
                    "maxProperties": 1
                  }
                },
                "took": {
                  "type": "number"
                },
                "ingest_took": {
                  "type": "number"
                }
              },
              "required": [
                "errors",
                "items",
                "took"
              ]
            }
          }
        }
      },
      "clear_scroll#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "succeeded": {
                  "type": "boolean"
                },
                "num_freed": {
                  "type": "number"
                }
              },
              "required": [
                "succeeded",
                "num_freed"
              ]
            }
          }
        }
      },
      "count#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number"
                },
                "_shards": {
                  "$ref": "../schemas/_common.json#/components/schemas/ShardStatistics"
                }
              },
              "required": [
                "count",
                "_shards"
              ]
            }
          }
        }
      },
      "create#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/WriteResponseBase"
            }
          }
        }
      },
      "explain#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "_index": {
                  "$ref": "../schemas/_common.json#/components/schemas/IndexName"
                },
                "_id": {
                  "$ref": "../schemas/_common.json#/components/schemas/Id"
                },
                "matched": {
                  "type": "boolean"
                },
                "explanation": {
                  "$ref": "../schemas/_core.explain.json#/components/schemas/ExplanationDetail"
                },
                "get": {
                  "$ref": "../schemas/_common.json#/components/schemas/InlineGet"
                }
              },
              "required": [
                "_index",
                "_id",
                "matched"
              ]
            }
          }
        }
      },
      "field_caps#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "indices": {
                  "$ref": "../schemas/_common.json#/components/schemas/Indices"
                },
                "fields": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "../schemas/_core.field_caps.json#/components/schemas/FieldCapability"
                    }
                  }
                }
              },
              "required": [
                "indices",
                "fields"
              ]
            }
          }
        }
      },
      "index#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/WriteResponseBase"
            }
          }
        }
      },
      "mget#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core.mget.json#/components/schemas/ResponseItem"
                  }
                }
              },
              "required": [
                "docs"
              ]
            }
          }
        }
      },
      "msearch#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_core.msearch.json#/components/schemas/MultiSearchResult"
            }
          }
        }
      },
      "msearch_template#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_core.msearch.json#/components/schemas/MultiSearchResult"
            }
          }
        }
      },
      "mtermvectors#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core.mtermvectors.json#/components/schemas/TermVectorsResult"
                  }
                }
              },
              "required": [
                "docs"
              ]
            }
          }
        }
      },
      "put_script#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/AcknowledgedResponseBase"
            }
          }
        }
      },
      "rank_eval#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "metric_score": {
                  "description": "The overall evaluation quality calculated by the defined metric",
                  "type": "number"
                },
                "details": {
                  "description": "The details section contains one entry for every query in the original requests section, keyed by the search request id",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_core.rank_eval.json#/components/schemas/RankEvalMetricDetail"
                  }
                },
                "failures": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "required": [
                "metric_score",
                "details",
                "failures"
              ]
            }
          }
        }
      },
      "render_search_template#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "template_output": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "required": [
                "template_output"
              ]
            }
          }
        }
      },
      "scripts_painless_execute#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object"
                }
              },
              "required": [
                "result"
              ]
            }
          }
        }
      },
      "scroll#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_core.search.json#/components/schemas/ResponseBody"
            }
          }
        }
      },
      "search#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_core.search.json#/components/schemas/ResponseBody"
            }
          }
        }
      },
      "search_shards#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "nodes": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_common.json#/components/schemas/NodeAttributes"
                  }
                },
                "shards": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "../schemas/_common.json#/components/schemas/NodeShard"
                    }
                  }
                },
                "indices": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_core.search_shards.json#/components/schemas/ShardStoreIndex"
                  }
                }
              },
              "required": [
                "nodes",
                "shards",
                "indices"
              ]
            }
          }
        }
      },
      "search_template#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "took": {
                  "type": "number"
                },
                "timed_out": {
                  "type": "boolean"
                },
                "_shards": {
                  "$ref": "../schemas/_common.json#/components/schemas/ShardStatistics"
                },
                "hits": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/HitsMetadata"
                },
                "aggregations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_common.aggregations.json#/components/schemas/Aggregate"
                  }
                },
                "_clusters": {
                  "$ref": "../schemas/_common.json#/components/schemas/ClusterStatistics"
                },
                "fields": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "max_score": {
                  "type": "number"
                },
                "num_reduce_phases": {
                  "type": "number"
                },
                "profile": {
                  "$ref": "../schemas/_core.search.json#/components/schemas/Profile"
                },
                "pit_id": {
                  "$ref": "../schemas/_common.json#/components/schemas/Id"
                },
                "_scroll_id": {
                  "$ref": "../schemas/_common.json#/components/schemas/ScrollId"
                },
                "suggest": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "../schemas/_core.search.json#/components/schemas/Suggest"
                    }
                  }
                },
                "terminated_early": {
                  "type": "boolean"
                }
              },
              "required": [
                "took",
                "timed_out",
                "_shards",
                "hits"
              ]
            }
          }
        }
      },
      "termvectors#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "found": {
                  "type": "boolean"
                },
                "_id": {
                  "$ref": "../schemas/_common.json#/components/schemas/Id"
                },
                "_index": {
                  "$ref": "../schemas/_common.json#/components/schemas/IndexName"
                },
                "term_vectors": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_core.termvectors.json#/components/schemas/TermVector"
                  }
                },
                "took": {
                  "type": "number"
                },
                "_version": {
                  "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
                }
              },
              "required": [
                "found",
                "_id",
                "_index",
                "took",
                "_version"
              ]
            }
          }
        }
      },
      "info#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "cluster_name": {
                  "$ref": "../schemas/_common.json#/components/schemas/Name"
                },
                "cluster_uuid": {
                  "$ref": "../schemas/_common.json#/components/schemas/Uuid"
                },
                "name": {
                  "$ref": "../schemas/_common.json#/components/schemas/Name"
                },
                "tagline": {
                  "type": "string"
                },
                "version": {
                  "$ref": "../schemas/_common.json#/components/schemas/OpensearchVersionInfo"
                }
              },
              "required": [
                "cluster_name",
                "cluster_uuid",
                "name",
                "tagline",
                "version"
              ]
            }
          }
        }
      },
      "ping#200": {
        "description": "",
        "content": {
          "application/json": {}
        }
      },
      "delete_by_query_rethrottle#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/tasks._common.json#/components/schemas/TaskListResponseBase"
            }
          }
        }
      },
      "reindex#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "batches": {
                  "type": "number"
                },
                "created": {
                  "type": "number"
                },
                "deleted": {
                  "type": "number"
                },
                "failures": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_common.json#/components/schemas/BulkIndexByScrollFailure"
                  }
                },
                "noops": {
                  "type": "number"
                },
                "retries": {
                  "$ref": "../schemas/_common.json#/components/schemas/Retries"
                },
                "requests_per_second": {
                  "type": "number"
                },
                "slice_id": {
                  "type": "number"
                },
                "task": {
                  "$ref": "../schemas/_common.json#/components/schemas/TaskId"
                },
                "throttled_millis": {
                  "$ref": "../schemas/_common.json#/components/schemas/EpochTimeUnitMillis"
                },
                "throttled_until_millis": {
                  "$ref": "../schemas/_common.json#/components/schemas/EpochTimeUnitMillis"
                },
                "timed_out": {
                  "type": "boolean"
                },
                "took": {
                  "$ref": "../schemas/_common.json#/components/schemas/DurationValueUnitMillis"
                },
                "total": {
                  "type": "number"
                },
                "updated": {
                  "type": "number"
                },
                "version_conflicts": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "reindex_rethrottle#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "nodes": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_core.reindex_rethrottle.json#/components/schemas/ReindexNode"
                  }
                }
              },
              "required": [
                "nodes"
              ]
            }
          }
        }
      },
      "get_script_context#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "contexts": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core.get_script_context.json#/components/schemas/Context"
                  }
                }
              },
              "required": [
                "contexts"
              ]
            }
          }
        }
      },
      "get_script_languages#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "language_contexts": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core.get_script_languages.json#/components/schemas/LanguageContext"
                  }
                },
                "types_allowed": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "language_contexts",
                "types_allowed"
              ]
            }
          }
        }
      },
      "delete_script#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/AcknowledgedResponseBase"
            }
          }
        }
      },
      "get_script#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "$ref": "../schemas/_common.json#/components/schemas/Id"
                },
                "found": {
                  "type": "boolean"
                },
                "script": {
                  "$ref": "../schemas/_common.json#/components/schemas/StoredScript"
                }
              },
              "required": [
                "_id",
                "found"
              ]
            }
          }
        }
      },
      "delete_pit#200": {
        "description": "DeletePit 200 response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pits": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core._common.json#/components/schemas/DeletedPit"
                  }
                }
              }
            }
          }
        }
      },
      "delete_all_pits#200": {
        "description": "DeleteAllPits 200 response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pits": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core._common.json#/components/schemas/PitsDetailsDeleteAll"
                  }
                }
              }
            }
          }
        }
      },
      "get_all_pits#200": {
        "description": "GetAllPits 200 response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pits": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_core._common.json#/components/schemas/PitDetail"
                  }
                }
              }
            }
          }
        }
      },
      "update_by_query_rethrottle#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "nodes": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "../schemas/_core.update_by_query_rethrottle.json#/components/schemas/UpdateByQueryRethrottleNode"
                  }
                }
              },
              "required": [
                "nodes"
              ]
            }
          }
        }
      },
      "delete_by_query#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "batches": {
                  "type": "number"
                },
                "deleted": {
                  "type": "number"
                },
                "failures": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_common.json#/components/schemas/BulkIndexByScrollFailure"
                  }
                },
                "noops": {
                  "type": "number"
                },
                "requests_per_second": {
                  "type": "number"
                },
                "retries": {
                  "$ref": "../schemas/_common.json#/components/schemas/Retries"
                },
                "slice_id": {
                  "type": "number"
                },
                "task": {
                  "$ref": "../schemas/_common.json#/components/schemas/TaskId"
                },
                "throttled": {
                  "$ref": "../schemas/_common.json#/components/schemas/Duration"
                },
                "throttled_millis": {
                  "$ref": "../schemas/_common.json#/components/schemas/DurationValueUnitMillis"
                },
                "throttled_until": {
                  "$ref": "../schemas/_common.json#/components/schemas/Duration"
                },
                "throttled_until_millis": {
                  "$ref": "../schemas/_common.json#/components/schemas/DurationValueUnitMillis"
                },
                "timed_out": {
                  "type": "boolean"
                },
                "took": {
                  "$ref": "../schemas/_common.json#/components/schemas/DurationValueUnitMillis"
                },
                "total": {
                  "type": "number"
                },
                "version_conflicts": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "delete#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/WriteResponseBase"
            }
          }
        }
      },
      "get#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_core.get.json#/components/schemas/GetResult"
            }
          }
        }
      },
      "exists#200": {
        "description": "",
        "content": {
          "application/json": {}
        }
      },
      "create_pit#200": {
        "description": "CreatePit 200 response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pit_id": {
                  "type": "string"
                },
                "_shards": {
                  "$ref": "../schemas/_core._common.json#/components/schemas/ShardStatistics"
                },
                "creation_time": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "get_source#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "exists_source#200": {
        "description": "",
        "content": {
          "application/json": {}
        }
      },
      "update#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_core.update.json#/components/schemas/UpdateWriteResponseBase"
            }
          }
        }
      },
      "update_by_query#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "batches": {
                  "type": "number"
                },
                "failures": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/_common.json#/components/schemas/BulkIndexByScrollFailure"
                  }
                },
                "noops": {
                  "type": "number"
                },
                "deleted": {
                  "type": "number"
                },
                "requests_per_second": {
                  "type": "number"
                },
                "retries": {
                  "$ref": "../schemas/_common.json#/components/schemas/Retries"
                },
                "task": {
                  "$ref": "../schemas/_common.json#/components/schemas/TaskId"
                },
                "timed_out": {
                  "type": "boolean"
                },
                "took": {
                  "$ref": "../schemas/_common.json#/components/schemas/DurationValueUnitMillis"
                },
                "total": {
                  "type": "number"
                },
                "updated": {
                  "type": "number"
                },
                "version_conflicts": {
                  "type": "number"
                },
                "throttled": {
                  "$ref": "../schemas/_common.json#/components/schemas/Duration"
                },
                "throttled_millis": {
                  "$ref": "../schemas/_common.json#/components/schemas/DurationValueUnitMillis"
                },
                "throttled_until": {
                  "$ref": "../schemas/_common.json#/components/schemas/Duration"
                },
                "throttled_until_millis": {
                  "$ref": "../schemas/_common.json#/components/schemas/DurationValueUnitMillis"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "bulk#index": {
        "in": "path",
        "name": "index",
        "description": "Name of the data stream, index, or index alias to perform bulk actions on.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/IndexName"
        },
        "style": "simple"
      },
      "bulk#pipeline": {
        "in": "query",
        "name": "pipeline",
        "description": "ID of the pipeline to use to preprocess incoming documents.\nIf the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request.\nIf a final pipeline is configured it will always run, regardless of the value of this parameter.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "bulk#refresh": {
        "in": "query",
        "name": "refresh",
        "description": "If `true`, Opensearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes.\nValid values: `true`, `false`, `wait_for`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Refresh"
        },
        "style": "form"
      },
      "bulk#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "bulk#_source": {
        "in": "query",
        "name": "_source",
        "description": "`true` or `false` to return the `_source` field or not, or a list of fields to return.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
        },
        "style": "form"
      },
      "bulk#_source_excludes": {
        "in": "query",
        "name": "_source_excludes",
        "description": "A comma-separated list of source fields to exclude from the response.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "bulk#_source_includes": {
        "in": "query",
        "name": "_source_includes",
        "description": "A comma-separated list of source fields to include in the response.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "bulk#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "bulk#wait_for_active_shards": {
        "in": "query",
        "name": "wait_for_active_shards",
        "description": "The number of shard copies that must be active before proceeding with the operation.\nSet to all or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/WaitForActiveShards"
        },
        "style": "form"
      },
      "bulk#require_alias": {
        "in": "query",
        "name": "require_alias",
        "description": "If `true`, the request’s actions must target an index alias.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "clear_scroll#scroll_id": {
        "in": "path",
        "name": "scroll_id",
        "description": "Comma-separated list of scroll IDs to clear.\nTo clear all scroll IDs, use `_all`.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ScrollIds"
        },
        "style": "simple"
      },
      "count#index": {
        "in": "path",
        "name": "index",
        "description": "Comma-separated list of data streams, indices, and aliases to search.\nSupports wildcards (`*`).\nTo search all data streams and indices, omit this parameter or use `*` or `_all`.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Indices"
        },
        "style": "simple"
      },
      "count#allow_no_indices": {
        "in": "query",
        "name": "allow_no_indices",
        "description": "If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices.\nThis behavior applies even if the request targets other open indices.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "count#analyzer": {
        "in": "query",
        "name": "analyzer",
        "description": "Analyzer to use for the query string.\nThis parameter can only be used when the `q` query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "count#analyze_wildcard": {
        "in": "query",
        "name": "analyze_wildcard",
        "description": "If `true`, wildcard and prefix queries are analyzed.\nThis parameter can only be used when the `q` query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "count#default_operator": {
        "in": "query",
        "name": "default_operator",
        "description": "The default operator for query string query: `AND` or `OR`.\nThis parameter can only be used when the `q` query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.query_dsl.json#/components/schemas/Operator"
        },
        "style": "form"
      },
      "count#df": {
        "in": "query",
        "name": "df",
        "description": "Field to use as default where no field prefix is given in the query string.\nThis parameter can only be used when the `q` query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "count#expand_wildcards": {
        "in": "query",
        "name": "expand_wildcards",
        "description": "Type of index that wildcard patterns can match.\nIf the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.\nSupports comma-separated values, such as `open,hidden`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
        },
        "style": "form"
      },
      "count#ignore_throttled": {
        "in": "query",
        "name": "ignore_throttled",
        "description": "If `true`, concrete, expanded or aliased indices are ignored when frozen.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "count#ignore_unavailable": {
        "in": "query",
        "name": "ignore_unavailable",
        "description": "If `false`, the request returns an error if it targets a missing or closed index.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "count#lenient": {
        "in": "query",
        "name": "lenient",
        "description": "If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "count#min_score": {
        "in": "query",
        "name": "min_score",
        "description": "Sets the minimum `_score` value that documents must have to be included in the result.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "count#preference": {
        "in": "query",
        "name": "preference",
        "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "count#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "count#terminate_after": {
        "in": "query",
        "name": "terminate_after",
        "description": "Maximum number of documents to collect for each shard.\nIf a query reaches this limit, Opensearch terminates the query early.\nOpensearch collects documents before sorting.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "count#q": {
        "in": "query",
        "name": "q",
        "description": "Query in the Lucene query string syntax.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "create#id": {
        "in": "path",
        "name": "id",
        "description": "Unique identifier for the document.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Id"
        },
        "style": "simple"
      },
      "create#index": {
        "in": "path",
        "name": "index",
        "description": "Name of the data stream or index to target.\nIf the target doesn’t exist and matches the name or wildcard (`*`) pattern of an index template with a `data_stream` definition, this request creates the data stream.\nIf the target doesn’t exist and doesn’t match a data stream template, this request creates the index.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/IndexName"
        },
        "style": "simple"
      },
      "create#pipeline": {
        "in": "query",
        "name": "pipeline",
        "description": "ID of the pipeline to use to preprocess incoming documents.\nIf the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request.\nIf a final pipeline is configured it will always run, regardless of the value of this parameter.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "create#refresh": {
        "in": "query",
        "name": "refresh",
        "description": "If `true`, Opensearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes.\nValid values: `true`, `false`, `wait_for`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Refresh"
        },
        "style": "form"
      },
      "create#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "create#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period the request waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "create#version": {
        "in": "query",
        "name": "version",
        "description": "Explicit version number for concurrency control.\nThe specified version must match the current version of the document for the request to succeed.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
        },
        "style": "form"
      },
      "create#version_type": {
        "in": "query",
        "name": "version_type",
        "description": "Specific version type: `external`, `external_gte`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/VersionType"
        },
        "style": "form"
      },
      "create#wait_for_active_shards": {
        "in": "query",
        "name": "wait_for_active_shards",
        "description": "The number of shard copies that must be active before proceeding with the operation.\nSet to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/WaitForActiveShards"
        },
        "style": "form"
      },
      "explain#id": {
        "in": "path",
        "name": "id",
        "description": "Defines the document ID.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Id"
        },
        "style": "simple"
      },
      "explain#index": {
        "in": "path",
        "name": "index",
        "description": "Index names used to limit the request.\nOnly a single index name can be provided to this parameter.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/IndexName"
        },
        "style": "simple"
      },
      "explain#analyzer": {
        "in": "query",
        "name": "analyzer",
        "description": "Analyzer to use for the query string.\nThis parameter can only be used when the `q` query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "explain#analyze_wildcard": {
        "in": "query",
        "name": "analyze_wildcard",
        "description": "If `true`, wildcard and prefix queries are analyzed.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "explain#default_operator": {
        "in": "query",
        "name": "default_operator",
        "description": "The default operator for query string query: `AND` or `OR`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.query_dsl.json#/components/schemas/Operator"
        },
        "style": "form"
      },
      "explain#df": {
        "in": "query",
        "name": "df",
        "description": "Field to use as default where no field prefix is given in the query string.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "explain#lenient": {
        "in": "query",
        "name": "lenient",
        "description": "If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "explain#preference": {
        "in": "query",
        "name": "preference",
        "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "explain#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "explain#_source": {
        "in": "query",
        "name": "_source",
        "description": "True or false to return the `_source` field or not, or a list of fields to return.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
        },
        "style": "form"
      },
      "explain#_source_excludes": {
        "in": "query",
        "name": "_source_excludes",
        "description": "A comma-separated list of source fields to exclude from the response.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "explain#_source_includes": {
        "in": "query",
        "name": "_source_includes",
        "description": "A comma-separated list of source fields to include in the response.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "explain#stored_fields": {
        "in": "query",
        "name": "stored_fields",
        "description": "A comma-separated list of stored fields to return in the response.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "explain#q": {
        "in": "query",
        "name": "q",
        "description": "Query in the Lucene query string syntax.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "field_caps#index": {
        "in": "path",
        "name": "index",
        "description": "Comma-separated list of data streams, indices, and aliases used to limit the request. Supports wildcards (*). To target all data streams and indices, omit this parameter or use * or _all.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Indices"
        },
        "style": "simple"
      },
      "field_caps#allow_no_indices": {
        "in": "query",
        "name": "allow_no_indices",
        "description": "If false, the request returns an error if any wildcard expression, index alias,\nor `_all` value targets only missing or closed indices. This behavior applies even if the request targets other open indices. For example, a request\ntargeting `foo*,bar*` returns an error if an index starts with foo but no index starts with bar.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "field_caps#expand_wildcards": {
        "in": "query",
        "name": "expand_wildcards",
        "description": "Type of index that wildcard patterns can match. If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams. Supports comma-separated values, such as `open,hidden`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
        },
        "style": "form"
      },
      "field_caps#fields": {
        "in": "query",
        "name": "fields",
        "description": "Comma-separated list of fields to retrieve capabilities for. Wildcard (`*`) expressions are supported.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "field_caps#ignore_unavailable": {
        "in": "query",
        "name": "ignore_unavailable",
        "description": "If `true`, missing or closed indices are not included in the response.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "field_caps#include_unmapped": {
        "in": "query",
        "name": "include_unmapped",
        "description": "If true, unmapped fields are included in the response.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "index#id": {
        "in": "path",
        "name": "id",
        "description": "Unique identifier for the document.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Id"
        },
        "style": "simple"
      },
      "index#index": {
        "in": "path",
        "name": "index",
        "description": "Name of the data stream or index to target.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/IndexName"
        },
        "style": "simple"
      },
      "index#if_primary_term": {
        "in": "query",
        "name": "if_primary_term",
        "description": "Only perform the operation if the document has this primary term.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "index#if_seq_no": {
        "in": "query",
        "name": "if_seq_no",
        "description": "Only perform the operation if the document has this sequence number.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/SequenceNumber"
        },
        "style": "form"
      },
      "index#op_type": {
        "in": "query",
        "name": "op_type",
        "description": "Set to create to only index the document if it does not already exist (put if absent).\nIf a document with the specified `_id` already exists, the indexing operation will fail.\nSame as using the `<index>/_create` endpoint.\nValid values: `index`, `create`.\nIf document id is specified, it defaults to `index`.\nOtherwise, it defaults to `create`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/OpType"
        },
        "style": "form"
      },
      "index#pipeline": {
        "in": "query",
        "name": "pipeline",
        "description": "ID of the pipeline to use to preprocess incoming documents.\nIf the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request.\nIf a final pipeline is configured it will always run, regardless of the value of this parameter.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "index#refresh": {
        "in": "query",
        "name": "refresh",
        "description": "If `true`, Opensearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes.\nValid values: `true`, `false`, `wait_for`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Refresh"
        },
        "style": "form"
      },
      "index#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "index#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period the request waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "index#version": {
        "in": "query",
        "name": "version",
        "description": "Explicit version number for concurrency control.\nThe specified version must match the current version of the document for the request to succeed.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
        },
        "style": "form"
      },
      "index#version_type": {
        "in": "query",
        "name": "version_type",
        "description": "Specific version type: `external`, `external_gte`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/VersionType"
        },
        "style": "form"
      },
      "index#wait_for_active_shards": {
        "in": "query",
        "name": "wait_for_active_shards",
        "description": "The number of shard copies that must be active before proceeding with the operation.\nSet to all or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/WaitForActiveShards"
        },
        "style": "form"
      },
      "index#require_alias": {
        "in": "query",
        "name": "require_alias",
        "description": "If `true`, the destination must be an index alias.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mget#index": {
        "in": "path",
        "name": "index",
        "description": "Name of the index to retrieve documents from when `ids` are specified, or when a document in the `docs` array does not specify an index.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/IndexName"
        },
        "style": "simple"
      },
      "mget#preference": {
        "in": "query",
        "name": "preference",
        "description": "Specifies the node or shard the operation should be performed on. Random by default.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "mget#realtime": {
        "in": "query",
        "name": "realtime",
        "description": "If `true`, the request is real-time as opposed to near-real-time.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mget#refresh": {
        "in": "query",
        "name": "refresh",
        "description": "If `true`, the request refreshes relevant shards before retrieving documents.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mget#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "mget#_source": {
        "in": "query",
        "name": "_source",
        "description": "True or false to return the `_source` field or not, or a list of fields to return.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
        },
        "style": "form"
      },
      "mget#_source_excludes": {
        "in": "query",
        "name": "_source_excludes",
        "description": "A comma-separated list of source fields to exclude from the response.\nYou can also use this parameter to exclude fields from the subset specified in `_source_includes` query parameter.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "mget#_source_includes": {
        "in": "query",
        "name": "_source_includes",
        "description": "A comma-separated list of source fields to include in the response.\nIf this parameter is specified, only these source fields are returned. You can exclude fields from this subset using the `_source_excludes` query parameter.\nIf the `_source` parameter is `false`, this parameter is ignored.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "mget#stored_fields": {
        "in": "query",
        "name": "stored_fields",
        "description": "If `true`, retrieves the document fields stored in the index rather than the document `_source`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "msearch#index": {
        "in": "path",
        "name": "index",
        "description": "Comma-separated list of data streams, indices, and index aliases to search.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Indices"
        },
        "style": "simple"
      },
      "msearch#ccs_minimize_roundtrips": {
        "in": "query",
        "name": "ccs_minimize_roundtrips",
        "description": "If true, network roundtrips between the coordinating node and remote clusters are minimized for cross-cluster search requests.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "msearch#max_concurrent_searches": {
        "in": "query",
        "name": "max_concurrent_searches",
        "description": "Maximum number of concurrent searches the multi search API can execute.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "msearch#max_concurrent_shard_requests": {
        "in": "query",
        "name": "max_concurrent_shard_requests",
        "description": "Maximum number of concurrent shard requests that each sub-search request executes per node.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "msearch#pre_filter_shard_size": {
        "in": "query",
        "name": "pre_filter_shard_size",
        "description": "Defines a threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method i.e., if date filters are mandatory to match but the shard bounds and the query are disjoint.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "msearch#rest_total_hits_as_int": {
        "in": "query",
        "name": "rest_total_hits_as_int",
        "description": "If true, hits.total are returned as an integer in the response. Defaults to false, which returns an object.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "msearch#search_type": {
        "in": "query",
        "name": "search_type",
        "description": "Indicates whether global term and document frequencies should be used when scoring returned documents.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/SearchType"
        },
        "style": "form"
      },
      "msearch#typed_keys": {
        "in": "query",
        "name": "typed_keys",
        "description": "Specifies whether aggregation and suggester names should be prefixed by their respective types in the response.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "msearch_template#index": {
        "in": "path",
        "name": "index",
        "description": "Comma-separated list of data streams, indices, and aliases to search.\nSupports wildcards (`*`).\nTo search all data streams and indices, omit this parameter or use `*`.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Indices"
        },
        "style": "simple"
      },
      "msearch_template#ccs_minimize_roundtrips": {
        "in": "query",
        "name": "ccs_minimize_roundtrips",
        "description": "If `true`, network round-trips are minimized for cross-cluster search requests.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "msearch_template#max_concurrent_searches": {
        "in": "query",
        "name": "max_concurrent_searches",
        "description": "Maximum number of concurrent searches the API can run.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "msearch_template#search_type": {
        "in": "query",
        "name": "search_type",
        "description": "The type of the search operation.\nAvailable options: `query_then_fetch`, `dfs_query_then_fetch`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/SearchType"
        },
        "style": "form"
      },
      "msearch_template#rest_total_hits_as_int": {
        "in": "query",
        "name": "rest_total_hits_as_int",
        "description": "If `true`, the response returns `hits.total` as an integer.\nIf `false`, it returns `hits.total` as an object.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "msearch_template#typed_keys": {
        "in": "query",
        "name": "typed_keys",
        "description": "If `true`, the response prefixes aggregation and suggester names with their respective types.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mtermvectors#index": {
        "in": "path",
        "name": "index",
        "description": "Name of the index that contains the documents.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/IndexName"
        },
        "style": "simple"
      },
      "mtermvectors#ids": {
        "in": "query",
        "name": "ids",
        "description": "A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body",
        "deprecated": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "../schemas/_common.json#/components/schemas/Id"
          }
        },
        "style": "form"
      },
      "mtermvectors#fields": {
        "in": "query",
        "name": "fields",
        "description": "Comma-separated list or wildcard expressions of fields to include in the statistics.\nUsed as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "mtermvectors#field_statistics": {
        "in": "query",
        "name": "field_statistics",
        "description": "If `true`, the response includes the document count, sum of document frequencies, and sum of total term frequencies.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mtermvectors#offsets": {
        "in": "query",
        "name": "offsets",
        "description": "If `true`, the response includes term offsets.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mtermvectors#payloads": {
        "in": "query",
        "name": "payloads",
        "description": "If `true`, the response includes term payloads.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mtermvectors#positions": {
        "in": "query",
        "name": "positions",
        "description": "If `true`, the response includes term positions.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mtermvectors#preference": {
        "in": "query",
        "name": "preference",
        "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "mtermvectors#realtime": {
        "in": "query",
        "name": "realtime",
        "description": "If true, the request is real-time as opposed to near-real-time.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mtermvectors#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "mtermvectors#term_statistics": {
        "in": "query",
        "name": "term_statistics",
        "description": "If true, the response includes term frequency and document frequency.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "mtermvectors#version": {
        "in": "query",
        "name": "version",
        "description": "If `true`, returns the document version as part of a hit.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
        },
        "style": "form"
      },
      "mtermvectors#version_type": {
        "in": "query",
        "name": "version_type",
        "description": "Specific version type.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/VersionType"
        },
        "style": "form"
      },
      "put_script#id": {
        "in": "path",
        "name": "id",
        "description": "Identifier for the stored script or search template.\nMust be unique within the cluster.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Id"
        },
        "style": "simple"
      },
      "put_script#context": {
        "in": "path",
        "name": "context",
        "description": "Context in which the script or search template should run.\nTo prevent errors, the API immediately compiles the script or template in this context.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Name"
        },
        "style": "simple"
      },
      "put_script#master_timeout": {
        "in": "query",
        "name": "master_timeout",
        "description": "Period to wait for a connection to the master node.\nIf no response is received before the timeout expires, the request fails and returns an error.",
        "deprecated": true,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form",
        "x-version-deprecated": "2.0.0",
        "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead."
      },
      "put_script#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period to wait for a response.\nIf no response is received before the timeout expires, the request fails and returns an error.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "rank_eval#index": {
        "in": "path",
        "name": "index",
        "description": "Comma-separated list of data streams, indices, and index aliases used to limit the request. Wildcard (`*`) expressions are supported.\nTo target all data streams and indices in a cluster, omit this parameter or use `_all` or `*`.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Indices"
        },
        "style": "simple"
      },
      "rank_eval#allow_no_indices": {
        "in": "query",
        "name": "allow_no_indices",
        "description": "If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices. This behavior applies even if the request targets other open indices. For example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "rank_eval#expand_wildcards": {
        "in": "query",
        "name": "expand_wildcards",
        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
        },
        "style": "form"
      },
      "rank_eval#ignore_unavailable": {
        "in": "query",
        "name": "ignore_unavailable",
        "description": "If `true`, missing or closed indices are not included in the response.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "rank_eval#search_type": {
        "in": "query",
        "name": "search_type",
        "description": "Search operation type",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "render_search_template#id": {
        "in": "path",
        "name": "id",
        "description": "ID of the search template to render.\nIf no `source` is specified, this or the `id` request body parameter is required.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Id"
        },
        "style": "simple"
      },
      "scroll#scroll_id": {
        "in": "path",
        "name": "scroll_id",
        "description": "The scroll ID",
        "required": true,
        "deprecated": true,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ScrollId"
        },
        "style": "simple"
      },
      "scroll#scroll": {
        "in": "query",
        "name": "scroll",
        "description": "Period to retain the search context for scrolling.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "scroll#scroll_id_": {
        "in": "query",
        "name": "scroll_id",
        "description": "The scroll ID for scrolled search",
        "deprecated": true,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ScrollId"
        },
        "style": "form"
      },
      "scroll#rest_total_hits_as_int": {
        "in": "query",
        "name": "rest_total_hits_as_int",
        "description": "If true, the API response’s hit.total property is returned as an integer. If false, the API response’s hit.total property is returned as an object.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#index": {
        "in": "path",
        "name": "index",
        "description": "Comma-separated list of data streams, indices, and aliases to search.\nSupports wildcards (`*`).\nTo search all data streams and indices, omit this parameter or use `*` or `_all`.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Indices"
        },
        "style": "simple"
      },
      "search#allow_no_indices": {
        "in": "query",
        "name": "allow_no_indices",
        "description": "If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices.\nThis behavior applies even if the request targets other open indices.\nFor example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#allow_partial_search_results": {
        "in": "query",
        "name": "allow_partial_search_results",
        "description": "If true, returns partial results if there are shard request timeouts or shard failures. If false, returns an error with no partial results.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#analyzer": {
        "in": "query",
        "name": "analyzer",
        "description": "Analyzer to use for the query string.\nThis parameter can only be used when the q query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "search#analyze_wildcard": {
        "in": "query",
        "name": "analyze_wildcard",
        "description": "If true, wildcard and prefix queries are analyzed.\nThis parameter can only be used when the q query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#batched_reduce_size": {
        "in": "query",
        "name": "batched_reduce_size",
        "description": "The number of shard results that should be reduced at once on the coordinating node.\nThis value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "search#ccs_minimize_roundtrips": {
        "in": "query",
        "name": "ccs_minimize_roundtrips",
        "description": "If true, network round-trips between the coordinating node and the remote clusters are minimized when executing cross-cluster search (CCS) requests.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#default_operator": {
        "in": "query",
        "name": "default_operator",
        "description": "The default operator for query string query: AND or OR.\nThis parameter can only be used when the `q` query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.query_dsl.json#/components/schemas/Operator"
        },
        "style": "form"
      },
      "search#df": {
        "in": "query",
        "name": "df",
        "description": "Field to use as default where no field prefix is given in the query string.\nThis parameter can only be used when the q query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "search#docvalue_fields": {
        "in": "query",
        "name": "docvalue_fields",
        "description": "A comma-separated list of fields to return as the docvalue representation for each hit.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "search#expand_wildcards": {
        "in": "query",
        "name": "expand_wildcards",
        "description": "Type of index that wildcard patterns can match.\nIf the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.\nSupports comma-separated values, such as `open,hidden`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
        },
        "style": "form"
      },
      "search#explain": {
        "in": "query",
        "name": "explain",
        "description": "If `true`, returns detailed information about score computation as part of a hit.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#ignore_throttled": {
        "in": "query",
        "name": "ignore_throttled",
        "description": "If `true`, concrete, expanded or aliased indices will be ignored when frozen.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#ignore_unavailable": {
        "in": "query",
        "name": "ignore_unavailable",
        "description": "If `false`, the request returns an error if it targets a missing or closed index.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#lenient": {
        "in": "query",
        "name": "lenient",
        "description": "If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored.\nThis parameter can only be used when the `q` query string parameter is specified.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#max_concurrent_shard_requests": {
        "in": "query",
        "name": "max_concurrent_shard_requests",
        "description": "Defines the number of concurrent shard requests per node this search executes concurrently.\nThis value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "search#preference": {
        "in": "query",
        "name": "preference",
        "description": "Nodes and shards used for the search.\nBy default, Opensearch selects from eligible nodes and shards using adaptive replica selection, accounting for allocation awareness. Valid values are:\n`_only_local` to run the search only on shards on the local node;\n`_local` to, if possible, run the search on shards on the local node, or if not, select shards using the default method;\n`_only_nodes:<node-id>,<node-id>` to run the search on only the specified nodes IDs, where, if suitable shards exist on more than one selected node, use shards on those nodes using the default method, or if none of the specified nodes are available, select shards from any available node using the default method;\n`_prefer_nodes:<node-id>,<node-id>` to if possible, run the search on the specified nodes IDs, or if not, select shards using the default method;\n`_shards:<shard>,<shard>` to run the search only on the specified shards;\n`<custom-string>` (any string that does not start with `_`) to route searches with the same `<custom-string>` to the same shards in the same order.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "search#pre_filter_shard_size": {
        "in": "query",
        "name": "pre_filter_shard_size",
        "description": "Defines a threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold.\nThis filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method (if date filters are mandatory to match but the shard bounds and the query are disjoint).\nWhen unspecified, the pre-filter phase is executed if any of these conditions is met:\nthe request targets more than 128 shards;\nthe request targets one or more read-only index;\nthe primary sort of the query targets an indexed field.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "search#request_cache": {
        "in": "query",
        "name": "request_cache",
        "description": "If `true`, the caching of search results is enabled for requests where `size` is `0`.\nDefaults to index level settings.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "search#scroll": {
        "in": "query",
        "name": "scroll",
        "description": "Period to retain the search context for scrolling. See Scroll search results.\nBy default, this value cannot exceed `1d` (24 hours).\nYou can change this limit using the `search.max_keep_alive` cluster-level setting.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "search#search_type": {
        "in": "query",
        "name": "search_type",
        "description": "How distributed term frequencies are calculated for relevance scoring.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/SearchType"
        },
        "style": "form"
      },
      "search#stats": {
        "in": "query",
        "name": "stats",
        "description": "Specific `tag` of the request for logging and statistical purposes.",
        "deprecated": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "style": "form"
      },
      "search#stored_fields": {
        "in": "query",
        "name": "stored_fields",
        "description": "A comma-separated list of stored fields to return as part of a hit.\nIf no fields are specified, no stored fields are included in the response.\nIf this field is specified, the `_source` parameter defaults to `false`.\nYou can pass `_source: true` to return both source fields and stored fields in the search response.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "search#suggest_field": {
        "in": "query",
        "name": "suggest_field",
        "description": "Specifies which field to use for suggestions.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Field"
        },
        "style": "form"
      },
      "search#suggest_mode": {
        "in": "query",
        "name": "suggest_mode",
        "description": "Specifies the suggest mode.\nThis parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/SuggestMode"
        },
        "style": "form"
      },
      "search#suggest_size": {
        "in": "query",
        "name": "suggest_size",
        "description": "Number of suggestions to return.\nThis parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "search#suggest_text": {
        "in": "query",
        "name": "suggest_text",
        "description": "The source text for which the suggestions should be returned.\nThis parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "search#terminate_after": {
        "in": "query",
        "name": "terminate_after",
        "description": "Maximum number of documents to collect for each shard.\nIf a query reaches this limit, Opensearch terminates the query early.\nOpensearch collects documents before sorting.\nUse with caution.\nOpensearch applies this parameter to each shard handling the request.\nWhen possible, let Opensearch perform early termination automatically.\nAvoid specifying this parameter for requests that target data streams with backing indices across multiple data tiers.\nIf set to `0` (default), the query does not terminate early.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "search#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Specifies the period of time to wait for a response from each shard.\nIf no response is received before the timeout expires, the request fails and returns an error.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "search#track_total_hits": {
        "in": "query",
        "name": "track_total_hits",
        "description": "Number of hits matching the query to count accurately.\nIf `true`, the exact number of hits is returned at the cost of some performance.\nIf `false`, the response does not include the total number of hits matching the query.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_core.search.json#/components/schemas/TrackHits"
        },
        "style": "form"
      },
      "search#track_scores": {
        "in": "query",
        "name": "track_scores",
        "description": "If `true`, calculate and return document scores, even if the scores are not used for sorting.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#typed_keys": {
        "in": "query",
        "name": "typed_keys",
        "description": "If `true`, aggregation and suggester names are be prefixed by their respective types in the response.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#rest_total_hits_as_int": {
        "in": "query",
        "name": "rest_total_hits_as_int",
        "description": "Indicates whether `hits.total` should be rendered as an integer or an object in the rest search response.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#version": {
        "in": "query",
        "name": "version",
        "description": "If `true`, returns document version as part of a hit.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#_source": {
        "in": "query",
        "name": "_source",
        "description": "Indicates which source fields are returned for matching documents.\nThese fields are returned in the `hits._source` property of the search response.\nValid values are:\n`true` to return the entire document source;\n`false` to not return the document source;\n`<string>` to return the source fields that are specified as a comma-separated list (supports wildcard (`*`) patterns).",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_core.search.json#/components/schemas/SourceConfigParam"
        },
        "style": "form"
      },
      "search#_source_excludes": {
        "in": "query",
        "name": "_source_excludes",
        "description": "A comma-separated list of source fields to exclude from the response.\nYou can also use this parameter to exclude fields from the subset specified in `_source_includes` query parameter.\nIf the `_source` parameter is `false`, this parameter is ignored.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "search#_source_includes": {
        "in": "query",
        "name": "_source_includes",
        "description": "A comma-separated list of source fields to include in the response.\nIf this parameter is specified, only these source fields are returned.\nYou can exclude fields from this subset using the `_source_excludes` query parameter.\nIf the `_source` parameter is `false`, this parameter is ignored.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "search#seq_no_primary_term": {
        "in": "query",
        "name": "seq_no_primary_term",
        "description": "If `true`, returns sequence number and primary term of the last modification of each hit.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search#q": {
        "in": "query",
        "name": "q",
        "description": "Query in the Lucene query string syntax using query parameter search.\nQuery parameter searches do not support the full Opensearch Query DSL but are handy for testing.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "search#size": {
        "in": "query",
        "name": "size",
        "description": "Defines the number of hits to return.\nBy default, you cannot page through more than 10,000 hits using the `from` and `size` parameters.\nTo page through more hits, use the `search_after` parameter.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "search#from": {
        "in": "query",
        "name": "from",
        "description": "Starting document offset.\nNeeds to be non-negative.\nBy default, you cannot page through more than 10,000 hits using the `from` and `size` parameters.\nTo page through more hits, use the `search_after` parameter.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "search#sort": {
        "in": "query",
        "name": "sort",
        "description": "A comma-separated list of <field>:<direction> pairs.",
        "deprecated": false,
        "schema": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "style": "form"
      },
      "search_shards#index": {
        "in": "path",
        "name": "index",
        "description": "Returns the indices and shards that a search request would be executed against.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Indices"
        },
        "style": "simple"
      },
      "search_shards#allow_no_indices": {
        "in": "query",
        "name": "allow_no_indices",
        "description": "If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices.\nThis behavior applies even if the request targets other open indices.\nFor example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_shards#expand_wildcards": {
        "in": "query",
        "name": "expand_wildcards",
        "description": "Type of index that wildcard patterns can match.\nIf the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.\nSupports comma-separated values, such as `open,hidden`.\nValid values are: `all`, `open`, `closed`, `hidden`, `none`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
        },
        "style": "form"
      },
      "search_shards#ignore_unavailable": {
        "in": "query",
        "name": "ignore_unavailable",
        "description": "If `false`, the request returns an error if it targets a missing or closed index.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_shards#local": {
        "in": "query",
        "name": "local",
        "description": "If `true`, the request retrieves information from the local node only.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_shards#preference": {
        "in": "query",
        "name": "preference",
        "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "search_shards#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "search_template#index": {
        "in": "path",
        "name": "index",
        "description": "Comma-separated list of data streams, indices,\nand aliases to search. Supports wildcards (*).",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Indices"
        },
        "style": "simple"
      },
      "search_template#allow_no_indices": {
        "in": "query",
        "name": "allow_no_indices",
        "description": "If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices.\nThis behavior applies even if the request targets other open indices.\nFor example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_template#ccs_minimize_roundtrips": {
        "in": "query",
        "name": "ccs_minimize_roundtrips",
        "description": "If `true`, network round-trips are minimized for cross-cluster search requests.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_template#expand_wildcards": {
        "in": "query",
        "name": "expand_wildcards",
        "description": "Type of index that wildcard patterns can match.\nIf the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.\nSupports comma-separated values, such as `open,hidden`.\nValid values are: `all`, `open`, `closed`, `hidden`, `none`.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ExpandWildcards"
        },
        "style": "form"
      },
      "search_template#explain": {
        "in": "query",
        "name": "explain",
        "description": "If `true`, the response includes additional details about score computation as part of a hit.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_template#ignore_throttled": {
        "in": "query",
        "name": "ignore_throttled",
        "description": "If `true`, specified concrete, expanded, or aliased indices are not included in the response when throttled.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_template#ignore_unavailable": {
        "in": "query",
        "name": "ignore_unavailable",
        "description": "If `false`, the request returns an error if it targets a missing or closed index.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_template#preference": {
        "in": "query",
        "name": "preference",
        "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "search_template#profile": {
        "in": "query",
        "name": "profile",
        "description": "If `true`, the query execution is profiled.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_template#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "search_template#scroll": {
        "in": "query",
        "name": "scroll",
        "description": "Specifies how long a consistent view of the index\nshould be maintained for scrolled search.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "search_template#search_type": {
        "in": "query",
        "name": "search_type",
        "description": "The type of the search operation.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/SearchType"
        },
        "style": "form"
      },
      "search_template#rest_total_hits_as_int": {
        "in": "query",
        "name": "rest_total_hits_as_int",
        "description": "If true, hits.total are rendered as an integer in the response.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "search_template#typed_keys": {
        "in": "query",
        "name": "typed_keys",
        "description": "If `true`, the response prefixes aggregation and suggester names with their respective types.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "termvectors#index": {
        "in": "path",
        "name": "index",
        "description": "Name of the index that contains the document.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/IndexName"
        },
        "style": "simple"
      },
      "termvectors#id": {
        "in": "path",
        "name": "id",
        "description": "Unique identifier of the document.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Id"
        },
        "style": "simple"
      },
      "termvectors#fields": {
        "in": "query",
        "name": "fields",
        "description": "Comma-separated list or wildcard expressions of fields to include in the statistics.\nUsed as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "termvectors#field_statistics": {
        "in": "query",
        "name": "field_statistics",
        "description": "If `true`, the response includes the document count, sum of document frequencies, and sum of total term frequencies.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "termvectors#offsets": {
        "in": "query",
        "name": "offsets",
        "description": "If `true`, the response includes term offsets.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "termvectors#payloads": {
        "in": "query",
        "name": "payloads",
        "description": "If `true`, the response includes term payloads.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "termvectors#positions": {
        "in": "query",
        "name": "positions",
        "description": "If `true`, the response includes term positions.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "termvectors#preference": {
        "in": "query",
        "name": "preference",
        "description": "Specifies the node or shard the operation should be performed on.\nRandom by default.",
        "deprecated": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "termvectors#realtime": {
        "in": "query",
        "name": "realtime",
        "description": "If true, the request is real-time as opposed to near-real-time.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "termvectors#routing": {
        "in": "query",
        "name": "routing",
        "description": "Custom value used to route operations to a specific shard.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Routing"
        },
        "style": "form"
      },
      "termvectors#term_statistics": {
        "in": "query",
        "name": "term_statistics",
        "description": "If `true`, the response includes term frequency and document frequency.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "termvectors#version": {
        "in": "query",
        "name": "version",
        "description": "If `true`, returns the document version as part of a hit.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
        },
        "style": "form"
      },
      "termvectors#version_type": {
        "in": "query",
        "name": "version_type",
        "description": "Specific version type.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/VersionType"
        },
        "style": "form"
      }
    }
  }
}