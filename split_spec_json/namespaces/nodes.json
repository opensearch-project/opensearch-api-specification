{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenSearch Nodes API",
    "description": "OpenSearch Nodes API",
    "version": "1.0.0"
  },
  "paths": {
    "/_cluster/nodes/hot_threads": {
      "get": {
        "description": "Returns information about hot threads on each node in the cluster.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/"
        },
        "operationId": "NodesHotThreads_DeprecatedDash",
        "deprecated": true,
        "parameters": [
          {
            "name": "interval",
            "in": "query",
            "description": "The interval for the second sampling of threads.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          },
          {
            "name": "snapshots",
            "in": "query",
            "description": "Number of samples of thread stacktrace.",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Number of samples of thread stacktrace.",
              "format": "int32"
            }
          },
          {
            "name": "threads",
            "in": "query",
            "description": "Specify the number of threads to provide information for.",
            "schema": {
              "type": "integer",
              "default": 3,
              "description": "Specify the number of threads to provide information for.",
              "format": "int32"
            }
          },
          {
            "name": "ignore_idle_threads",
            "in": "query",
            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type to sample.",
            "schema": {
              "$ref": "../schemas/nodes._common.json#/components/schemas/SampleType"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Operation timeout.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NodesHotThreads_DeprecatedDash 200 response"
          }
        },
        "x-deprecation-message": "The hot accepts /_cluster/nodes as prefix for backwards compatibility reasons",
        "x-ignorable": true,
        "x-operation-group": "nodes.hot_threads",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0"
      }
    },
    "/_cluster/nodes/hotthreads": {
      "get": {
        "description": "Returns information about hot threads on each node in the cluster.",
        "operationId": "NodesHotThreads_DeprecatedCluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "interval",
            "in": "query",
            "description": "The interval for the second sampling of threads.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          },
          {
            "name": "snapshots",
            "in": "query",
            "description": "Number of samples of thread stacktrace.",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Number of samples of thread stacktrace.",
              "format": "int32"
            }
          },
          {
            "name": "threads",
            "in": "query",
            "description": "Specify the number of threads to provide information for.",
            "schema": {
              "type": "integer",
              "default": 3,
              "description": "Specify the number of threads to provide information for.",
              "format": "int32"
            }
          },
          {
            "name": "ignore_idle_threads",
            "in": "query",
            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type to sample.",
            "schema": {
              "$ref": "../schemas/nodes._common.json#/components/schemas/SampleType"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Operation timeout.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NodesHotThreads_DeprecatedCluster 200 response"
          }
        },
        "x-deprecation-message": "The hot threads API accepts `hotthreads` but only `hot_threads` is documented",
        "x-ignorable": true,
        "x-operation-group": "nodes.hot_threads",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0"
      }
    },
    "/_cluster/nodes/{node_id}/hot_threads": {
      "get": {
        "description": "Returns information about hot threads on each node in the cluster.",
        "operationId": "NodesHotThreads_WithNodeId_DeprecatedDash",
        "deprecated": true,
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
            "schema": {
              "type": "string",
              "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
              "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
              "x-data-type": "array"
            },
            "required": true
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The interval for the second sampling of threads.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          },
          {
            "name": "snapshots",
            "in": "query",
            "description": "Number of samples of thread stacktrace.",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Number of samples of thread stacktrace.",
              "format": "int32"
            }
          },
          {
            "name": "threads",
            "in": "query",
            "description": "Specify the number of threads to provide information for.",
            "schema": {
              "type": "integer",
              "default": 3,
              "description": "Specify the number of threads to provide information for.",
              "format": "int32"
            }
          },
          {
            "name": "ignore_idle_threads",
            "in": "query",
            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type to sample.",
            "schema": {
              "$ref": "../schemas/nodes._common.json#/components/schemas/SampleType"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Operation timeout.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NodesHotThreads_WithNodeId_DeprecatedDash 200 response"
          }
        },
        "x-deprecation-message": "The hot accepts /_cluster/nodes as prefix for backwards compatibility reasons",
        "x-ignorable": true,
        "x-operation-group": "nodes.hot_threads",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0"
      }
    },
    "/_cluster/nodes/{node_id}/hotthreads": {
      "get": {
        "description": "Returns information about hot threads on each node in the cluster.",
        "operationId": "NodesHotThreads_WithNodeId_DeprecatedCluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
            "schema": {
              "type": "string",
              "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
              "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
              "x-data-type": "array"
            },
            "required": true
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The interval for the second sampling of threads.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          },
          {
            "name": "snapshots",
            "in": "query",
            "description": "Number of samples of thread stacktrace.",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Number of samples of thread stacktrace.",
              "format": "int32"
            }
          },
          {
            "name": "threads",
            "in": "query",
            "description": "Specify the number of threads to provide information for.",
            "schema": {
              "type": "integer",
              "default": 3,
              "description": "Specify the number of threads to provide information for.",
              "format": "int32"
            }
          },
          {
            "name": "ignore_idle_threads",
            "in": "query",
            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type to sample.",
            "schema": {
              "$ref": "../schemas/nodes._common.json#/components/schemas/SampleType"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Operation timeout.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NodesHotThreads_WithNodeId_DeprecatedCluster 200 response"
          }
        },
        "x-deprecation-message": "The hot threads API accepts `hotthreads` but only `hot_threads` is documented",
        "x-ignorable": true,
        "x-operation-group": "nodes.hot_threads",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0"
      }
    },
    "/_nodes": {
      "get": {
        "description": "Returns information about nodes in the cluster.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-info/"
        },
        "operationId": "NodesInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.info#flat_settings"
          },
          {
            "$ref": "#/components/parameters/nodes.info#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.info#200"
          }
        },
        "x-operation-group": "nodes.info",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/hot_threads": {
      "get": {
        "description": "Returns information about hot threads on each node in the cluster.",
        "operationId": "NodesHotThreads",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.hot_threads#interval"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#snapshots"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#threads"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#ignore_idle_threads"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#type"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.hot_threads#200"
          }
        },
        "x-operation-group": "nodes.hot_threads",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/hotthreads": {
      "get": {
        "description": "Returns information about hot threads on each node in the cluster.",
        "operationId": "NodesHotThreads_Deprecated",
        "deprecated": true,
        "parameters": [
          {
            "name": "interval",
            "in": "query",
            "description": "The interval for the second sampling of threads.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          },
          {
            "name": "snapshots",
            "in": "query",
            "description": "Number of samples of thread stacktrace.",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Number of samples of thread stacktrace.",
              "format": "int32"
            }
          },
          {
            "name": "threads",
            "in": "query",
            "description": "Specify the number of threads to provide information for.",
            "schema": {
              "type": "integer",
              "default": 3,
              "description": "Specify the number of threads to provide information for.",
              "format": "int32"
            }
          },
          {
            "name": "ignore_idle_threads",
            "in": "query",
            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type to sample.",
            "schema": {
              "$ref": "../schemas/nodes._common.json#/components/schemas/SampleType"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Operation timeout.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NodesHotThreads_Deprecated 200 response"
          }
        },
        "x-deprecation-message": "The hot threads API accepts `hotthreads` but only `hot_threads` is documented",
        "x-ignorable": true,
        "x-operation-group": "nodes.hot_threads",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0"
      }
    },
    "/_nodes/reload_secure_settings": {
      "post": {
        "description": "Reloads secure settings.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-reload-secure/"
        },
        "operationId": "NodesReloadSecureSettings",
        "requestBody": {
          "$ref": "#/components/requestBodies/nodes.reload_secure_settings"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.reload_secure_settings#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.reload_secure_settings#200"
          }
        },
        "x-operation-group": "nodes.reload_secure_settings",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/stats": {
      "get": {
        "description": "Returns statistical information about nodes in the cluster.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-usage/"
        },
        "operationId": "NodesStats",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.stats#completion_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fielddata_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#groups"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#level"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#types"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#timeout"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#include_segment_file_sizes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.stats#200"
          }
        },
        "x-operation-group": "nodes.stats",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/stats/{metric}": {
      "get": {
        "description": "Returns statistical information about nodes in the cluster.",
        "operationId": "NodesStats_WithMetric",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.stats#metric"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#completion_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fielddata_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#groups"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#level"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#types"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#timeout"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#include_segment_file_sizes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.stats#200"
          }
        },
        "x-operation-group": "nodes.stats",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/stats/{metric}/{index_metric}": {
      "get": {
        "description": "Returns statistical information about nodes in the cluster.",
        "operationId": "NodesStats_WithIndexMetricMetric",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.stats#metric"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#index_metric"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#completion_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fielddata_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#groups"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#level"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#types"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#timeout"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#include_segment_file_sizes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.stats#200"
          }
        },
        "x-operation-group": "nodes.stats",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/usage": {
      "get": {
        "description": "Returns low-level information about REST actions usage on nodes.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "NodesUsage",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.usage#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.usage#200"
          }
        },
        "x-operation-group": "nodes.usage",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/usage/{metric}": {
      "get": {
        "description": "Returns low-level information about REST actions usage on nodes.",
        "operationId": "NodesUsage_WithMetric",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.usage#metric"
          },
          {
            "$ref": "#/components/parameters/nodes.usage#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.usage#200"
          }
        },
        "x-operation-group": "nodes.usage",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}": {
      "get": {
        "description": "Returns information about nodes in the cluster.",
        "operationId": "NodesInfo_WithNodeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.info#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.info#flat_settings"
          },
          {
            "$ref": "#/components/parameters/nodes.info#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.info#200"
          }
        },
        "x-operation-group": "nodes.info",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}/hot_threads": {
      "get": {
        "description": "Returns information about hot threads on each node in the cluster.",
        "operationId": "NodesHotThreads_WithNodeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.hot_threads#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#interval"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#snapshots"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#threads"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#ignore_idle_threads"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#type"
          },
          {
            "$ref": "#/components/parameters/nodes.hot_threads#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.hot_threads#200"
          }
        },
        "x-operation-group": "nodes.hot_threads",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}/hotthreads": {
      "get": {
        "description": "Returns information about hot threads on each node in the cluster.",
        "operationId": "NodesHotThreads_WithNodeId_Deprecated",
        "deprecated": true,
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
            "schema": {
              "type": "string",
              "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
              "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
              "x-data-type": "array"
            },
            "required": true
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The interval for the second sampling of threads.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          },
          {
            "name": "snapshots",
            "in": "query",
            "description": "Number of samples of thread stacktrace.",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Number of samples of thread stacktrace.",
              "format": "int32"
            }
          },
          {
            "name": "threads",
            "in": "query",
            "description": "Specify the number of threads to provide information for.",
            "schema": {
              "type": "integer",
              "default": 3,
              "description": "Specify the number of threads to provide information for.",
              "format": "int32"
            }
          },
          {
            "name": "ignore_idle_threads",
            "in": "query",
            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type to sample.",
            "schema": {
              "$ref": "../schemas/nodes._common.json#/components/schemas/SampleType"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Operation timeout.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NodesHotThreads_WithNodeId_Deprecated 200 response"
          }
        },
        "x-deprecation-message": "The hot threads API accepts `hotthreads` but only `hot_threads` is documented",
        "x-ignorable": true,
        "x-operation-group": "nodes.hot_threads",
        "x-version-added": "1.0",
        "x-version-deprecated": "1.0"
      }
    },
    "/_nodes/{node_id}/reload_secure_settings": {
      "post": {
        "description": "Reloads secure settings.",
        "operationId": "NodesReloadSecureSettings_WithNodeId",
        "requestBody": {
          "$ref": "#/components/requestBodies/nodes.reload_secure_settings"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.reload_secure_settings#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.reload_secure_settings#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.reload_secure_settings#200"
          }
        },
        "x-operation-group": "nodes.reload_secure_settings",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}/stats": {
      "get": {
        "description": "Returns statistical information about nodes in the cluster.",
        "operationId": "NodesStats_WithNodeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.stats#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#completion_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fielddata_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#groups"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#level"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#types"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#timeout"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#include_segment_file_sizes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.stats#200"
          }
        },
        "x-operation-group": "nodes.stats",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}/stats/{metric}": {
      "get": {
        "description": "Returns statistical information about nodes in the cluster.",
        "operationId": "NodesStats_WithMetricNodeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.stats#metric"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#completion_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fielddata_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#groups"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#level"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#types"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#timeout"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#include_segment_file_sizes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.stats#200"
          }
        },
        "x-operation-group": "nodes.stats",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}/stats/{metric}/{index_metric}": {
      "get": {
        "description": "Returns statistical information about nodes in the cluster.",
        "operationId": "NodesStats_WithIndexMetricMetricNodeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.stats#metric"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#index_metric"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#completion_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fielddata_fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#fields"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#groups"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#level"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#types"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#timeout"
          },
          {
            "$ref": "#/components/parameters/nodes.stats#include_segment_file_sizes"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.stats#200"
          }
        },
        "x-operation-group": "nodes.stats",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}/usage": {
      "get": {
        "description": "Returns low-level information about REST actions usage on nodes.",
        "operationId": "NodesUsage_WithNodeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.usage#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.usage#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.usage#200"
          }
        },
        "x-operation-group": "nodes.usage",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}/usage/{metric}": {
      "get": {
        "description": "Returns low-level information about REST actions usage on nodes.",
        "operationId": "NodesUsage_WithMetricNodeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.usage#metric"
          },
          {
            "$ref": "#/components/parameters/nodes.usage#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.usage#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.usage#200"
          }
        },
        "x-operation-group": "nodes.usage",
        "x-version-added": "1.0"
      }
    },
    "/_nodes/{node_id}/{metric}": {
      "get": {
        "description": "Returns information about nodes in the cluster.",
        "operationId": "NodesInfo_WithMetricNodeId",
        "parameters": [
          {
            "$ref": "#/components/parameters/nodes.info#node_id"
          },
          {
            "$ref": "#/components/parameters/nodes.info#metric"
          },
          {
            "$ref": "#/components/parameters/nodes.info#flat_settings"
          },
          {
            "$ref": "#/components/parameters/nodes.info#timeout"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/nodes.info#200"
          }
        },
        "x-operation-group": "nodes.info",
        "x-version-added": "1.0"
      }
    }
  },
  "components": {
    "requestBodies": {
      "nodes.reload_secure_settings": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "secure_settings_password": {
                  "$ref": "../schemas/_common.json#/components/schemas/Password"
                }
              },
              "description": "An object containing the password for the opensearch keystore"
            }
          }
        }
      }
    },
    "responses": {
      "nodes.hot_threads#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "hot_threads": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/nodes.hot_threads.json#/components/schemas/HotThread"
                  }
                }
              },
              "required": [
                "hot_threads"
              ]
            }
          }
        }
      },
      "nodes.info#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/nodes.info.json#/components/schemas/ResponseBase"
            }
          }
        }
      },
      "nodes.reload_secure_settings#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/nodes.reload_secure_settings.json#/components/schemas/ResponseBase"
            }
          }
        }
      },
      "nodes.stats#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/nodes.stats.json#/components/schemas/ResponseBase"
            }
          }
        }
      },
      "nodes.usage#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/nodes.usage.json#/components/schemas/ResponseBase"
            }
          }
        }
      }
    },
    "parameters": {
      "nodes.hot_threads#node_id": {
        "in": "path",
        "name": "node_id",
        "description": "List of node IDs or names used to limit returned information.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/NodeIds"
        },
        "style": "simple"
      },
      "nodes.hot_threads#ignore_idle_threads": {
        "in": "query",
        "name": "ignore_idle_threads",
        "description": "If true, known idle threads (e.g. waiting in a socket select, or to get\na task from an empty queue) are filtered out.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "nodes.hot_threads#interval": {
        "in": "query",
        "name": "interval",
        "description": "The interval to do the second sampling of threads.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "nodes.hot_threads#snapshots": {
        "in": "query",
        "name": "snapshots",
        "description": "Number of samples of thread stacktrace.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "nodes.hot_threads#threads": {
        "in": "query",
        "name": "threads",
        "description": "Specifies the number of hot threads to provide information for.",
        "deprecated": false,
        "schema": {
          "type": "number"
        },
        "style": "form"
      },
      "nodes.hot_threads#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period to wait for a response. If no response is received\nbefore the timeout expires, the request fails and returns an error.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "nodes.hot_threads#type": {
        "in": "query",
        "name": "type",
        "description": "The type to sample.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/ThreadType"
        },
        "style": "form"
      },
      "nodes.info#node_id": {
        "in": "path",
        "name": "node_id",
        "description": "Comma-separated list of node IDs or names used to limit returned information.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/NodeIds"
        },
        "style": "simple"
      },
      "nodes.info#metric": {
        "in": "path",
        "name": "metric",
        "description": "Limits the information returned to the specific metrics. Supports a comma-separated list, such as http,ingest.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Metrics"
        },
        "style": "simple"
      },
      "nodes.info#flat_settings": {
        "in": "query",
        "name": "flat_settings",
        "description": "If true, returns settings in flat format.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "nodes.info#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "nodes.reload_secure_settings#node_id": {
        "in": "path",
        "name": "node_id",
        "description": "The names of particular nodes in the cluster to target.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/NodeIds"
        },
        "style": "simple"
      },
      "nodes.reload_secure_settings#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period to wait for a response.\nIf no response is received before the timeout expires, the request fails and returns an error.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "nodes.stats#node_id": {
        "in": "path",
        "name": "node_id",
        "description": "Comma-separated list of node IDs or names used to limit returned information.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/NodeIds"
        },
        "style": "simple"
      },
      "nodes.stats#metric": {
        "in": "path",
        "name": "metric",
        "description": "Limit the information returned to the specified metrics",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Metrics"
        },
        "style": "simple"
      },
      "nodes.stats#index_metric": {
        "in": "path",
        "name": "index_metric",
        "description": "Limit the information returned for indices metric to the specific index metrics. It can be used only if indices (or all) metric is specified.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Metrics"
        },
        "style": "simple"
      },
      "nodes.stats#completion_fields": {
        "in": "query",
        "name": "completion_fields",
        "description": "Comma-separated list or wildcard expressions of fields to include in fielddata and suggest statistics.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "nodes.stats#fielddata_fields": {
        "in": "query",
        "name": "fielddata_fields",
        "description": "Comma-separated list or wildcard expressions of fields to include in fielddata statistics.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "nodes.stats#fields": {
        "in": "query",
        "name": "fields",
        "description": "Comma-separated list or wildcard expressions of fields to include in the statistics.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Fields"
        },
        "style": "form"
      },
      "nodes.stats#groups": {
        "in": "query",
        "name": "groups",
        "description": "Comma-separated list of search groups to include in the search statistics.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "nodes.stats#include_segment_file_sizes": {
        "in": "query",
        "name": "include_segment_file_sizes",
        "description": "If true, the call reports the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "nodes.stats#level": {
        "in": "query",
        "name": "level",
        "description": "Indicates whether statistics are aggregated at the cluster, index, or shard level.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Level"
        },
        "style": "form"
      },
      "nodes.stats#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      },
      "nodes.stats#types": {
        "in": "query",
        "name": "types",
        "description": "A comma-separated list of document types for the indexing index metric.",
        "deprecated": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "style": "form"
      },
      "nodes.usage#node_id": {
        "in": "path",
        "name": "node_id",
        "description": "A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/NodeIds"
        },
        "style": "simple"
      },
      "nodes.usage#metric": {
        "in": "path",
        "name": "metric",
        "description": "Limits the information returned to the specific metrics.\nA comma-separated list of the following options: `_all`, `rest_actions`.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Metrics"
        },
        "style": "simple"
      },
      "nodes.usage#timeout": {
        "in": "query",
        "name": "timeout",
        "description": "Period to wait for a response.\nIf no response is received before the timeout expires, the request fails and returns an error.",
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form"
      }
    }
  }
}