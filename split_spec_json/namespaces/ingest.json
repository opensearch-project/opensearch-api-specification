{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenSearch Ingest API",
    "description": "OpenSearch Ingest API",
    "version": "1.0.0"
  },
  "paths": {
    "/_ingest/pipeline": {
      "get": {
        "description": "Returns a pipeline.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/ingest-apis/get-ingest/"
        },
        "operationId": "IngestGetPipeline",
        "parameters": [
          {
            "$ref": "#/components/parameters/ingest.get_pipeline#master_timeout"
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.get_pipeline#200"
          }
        },
        "x-operation-group": "ingest.get_pipeline",
        "x-version-added": "1.0"
      }
    },
    "/_ingest/pipeline/_simulate": {
      "get": {
        "description": "Allows to simulate a pipeline with example documents.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/ingest-apis/simulate-ingest/"
        },
        "operationId": "IngestSimulate_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/ingest.simulate#verbose"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.simulate#200"
          }
        },
        "x-operation-group": "ingest.simulate",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/ingest.simulate"
        }
      },
      "post": {
        "description": "Allows to simulate a pipeline with example documents.",
        "operationId": "IngestSimulate_Post",
        "requestBody": {
          "$ref": "#/components/requestBodies/ingest.simulate"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ingest.simulate#verbose"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.simulate#200"
          }
        },
        "x-operation-group": "ingest.simulate",
        "x-version-added": "1.0"
      }
    },
    "/_ingest/pipeline/{id}": {
      "delete": {
        "description": "Deletes a pipeline.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/ingest-apis/delete-ingest/"
        },
        "operationId": "IngestDeletePipeline",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Pipeline ID or wildcard expression of pipeline IDs used to limit the request.\nTo delete all ingest pipelines in a cluster, use a value of `*`.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "master_timeout",
            "description": "Period to wait for a connection to the master node.\nIf no response is received before the timeout expires, the request fails and returns an error.",
            "deprecated": true,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form",
            "x-version-deprecated": "2.0.0",
            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead."
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Period to wait for a response.\nIf no response is received before the timeout expires, the request fails and returns an error.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.delete_pipeline#200"
          }
        },
        "x-operation-group": "ingest.delete_pipeline",
        "x-version-added": "1.0"
      },
      "get": {
        "description": "Returns a pipeline.",
        "operationId": "IngestGetPipeline_WithId",
        "parameters": [
          {
            "$ref": "#/components/parameters/ingest.get_pipeline#id"
          },
          {
            "$ref": "#/components/parameters/ingest.get_pipeline#master_timeout"
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.get_pipeline#200"
          }
        },
        "x-operation-group": "ingest.get_pipeline",
        "x-version-added": "1.0"
      },
      "put": {
        "description": "Creates or updates a pipeline.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest/api-reference/ingest-apis/create-update-ingest/"
        },
        "operationId": "IngestPutPipeline",
        "requestBody": {
          "$ref": "#/components/requestBodies/ingest.put_pipeline"
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ingest pipeline to create or update.",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Id"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "master_timeout",
            "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
            "deprecated": true,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form",
            "x-version-deprecated": "2.0.0",
            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead."
          },
          {
            "name": "cluster_manager_timeout",
            "in": "query",
            "description": "Operation timeout for connection to cluster-manager node.",
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "x-version-added": "2.0.0"
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
            "deprecated": false,
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/Duration"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.put_pipeline#200"
          }
        },
        "x-operation-group": "ingest.put_pipeline",
        "x-version-added": "1.0"
      }
    },
    "/_ingest/pipeline/{id}/_simulate": {
      "get": {
        "description": "Allows to simulate a pipeline with example documents.",
        "operationId": "IngestSimulate_Get_WithId",
        "parameters": [
          {
            "$ref": "#/components/parameters/ingest.simulate#id"
          },
          {
            "$ref": "#/components/parameters/ingest.simulate#verbose"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.simulate#200"
          }
        },
        "x-operation-group": "ingest.simulate",
        "x-version-added": "1.0",
        "requestBody": {
          "$ref": "#/components/requestBodies/ingest.simulate"
        }
      },
      "post": {
        "description": "Allows to simulate a pipeline with example documents.",
        "operationId": "IngestSimulate_Post_WithId",
        "requestBody": {
          "$ref": "#/components/requestBodies/ingest.simulate"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/ingest.simulate#id"
          },
          {
            "$ref": "#/components/parameters/ingest.simulate#verbose"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.simulate#200"
          }
        },
        "x-operation-group": "ingest.simulate",
        "x-version-added": "1.0"
      }
    },
    "/_ingest/processor/grok": {
      "get": {
        "description": "Returns a list of the built-in patterns.",
        "externalDocs": {
          "description": "API Reference",
          "url": "https://opensearch.org/docs/latest"
        },
        "operationId": "IngestProcessorGrok",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ingest.processor_grok#200"
          }
        },
        "x-operation-group": "ingest.processor_grok",
        "x-version-added": "1.0",
        "parameters": []
      }
    }
  },
  "components": {
    "requestBodies": {
      "ingest.simulate": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "docs": {
                  "description": "Sample documents to test in the pipeline.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/ingest.simulate.json#/components/schemas/Document"
                  }
                },
                "pipeline": {
                  "$ref": "../schemas/ingest._common.json#/components/schemas/Pipeline"
                }
              },
              "description": "The simulate definition"
            }
          }
        },
        "required": true
      },
      "ingest.put_pipeline": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "_meta": {
                  "$ref": "../schemas/_common.json#/components/schemas/Metadata"
                },
                "description": {
                  "description": "Description of the ingest pipeline.",
                  "type": "string"
                },
                "on_failure": {
                  "description": "Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, Opensearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Opensearch will not attempt to run the pipeline's remaining processors.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/ingest._common.json#/components/schemas/ProcessorContainer"
                  }
                },
                "processors": {
                  "description": "Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified.",
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/ingest._common.json#/components/schemas/ProcessorContainer"
                  }
                },
                "version": {
                  "$ref": "../schemas/_common.json#/components/schemas/VersionNumber"
                }
              },
              "description": "The ingest definition"
            }
          }
        },
        "required": true
      }
    },
    "responses": {
      "ingest.get_pipeline#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "../schemas/ingest._common.json#/components/schemas/Pipeline"
              }
            }
          }
        }
      },
      "ingest.simulate#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "../schemas/ingest.simulate.json#/components/schemas/PipelineSimulation"
                  }
                }
              },
              "required": [
                "docs"
              ]
            }
          }
        }
      },
      "ingest.delete_pipeline#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/AcknowledgedResponseBase"
            }
          }
        }
      },
      "ingest.put_pipeline#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/_common.json#/components/schemas/AcknowledgedResponseBase"
            }
          }
        }
      },
      "ingest.processor_grok#200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "patterns": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "patterns"
              ]
            }
          }
        }
      }
    },
    "parameters": {
      "ingest.get_pipeline#id": {
        "in": "path",
        "name": "id",
        "description": "Comma-separated list of pipeline IDs to retrieve.\nWildcard (`*`) expressions are supported.\nTo get all ingest pipelines, omit this parameter or use `*`.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Id"
        },
        "style": "simple"
      },
      "ingest.get_pipeline#master_timeout": {
        "in": "query",
        "name": "master_timeout",
        "description": "Period to wait for a connection to the master node.\nIf no response is received before the timeout expires, the request fails and returns an error.",
        "deprecated": true,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Duration"
        },
        "style": "form",
        "x-version-deprecated": "2.0.0",
        "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead."
      },
      "ingest.simulate#id": {
        "in": "path",
        "name": "id",
        "description": "Pipeline to test.\nIf you don’t specify a `pipeline` in the request body, this parameter is required.",
        "required": true,
        "deprecated": false,
        "schema": {
          "$ref": "../schemas/_common.json#/components/schemas/Id"
        },
        "style": "simple"
      },
      "ingest.simulate#verbose": {
        "in": "query",
        "name": "verbose",
        "description": "If `true`, the response includes output data for each processor in the executed pipeline.",
        "deprecated": false,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      }
    }
  }
}